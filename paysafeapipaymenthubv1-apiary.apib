FORMAT: 1A
HOST: https://api.test.paysafe.com/paymenthub/

# Paysafe Payments API 

>**NOTE:** The Payments API currently supports our Gaming & Gambling Partners in the US only. We’ll keep you updated when the API is made available in other geographies and markets. If you have any queries or concerns, please contact your Account Manager or our Integrations Support Team at integrations@paysafe.com.

>**IMPORTANT:**  Because the Paysafe Payments API uses its [own unique API keys for request authentication](#apikey) and provides its own [Test and Production accounts](#goinglive), you should never click the **SIGN UP** or **LOGIN** buttons at the top right of the 
Developer Center navigation, as these are used strictly for the other APIs on the Developer Center. Please contact your business relationship manager or reach out to <integrations@paysafe.com> for API keys and Test/Production accounts.

<a name="paymentsoverview" title="Payments API Overview"></a>
# Overview

The Paysafe Payments API allows merchants to accept payments via multiple payment methods while using a single endpoint integration.

 * Choose your preferred mode of integration based on your PCI DSS compliance level.
 * Access your transaction analytics and manage accounts with our all-in-one [Business Portal](https://merchant.paysafe.com/portal). 
 * Enjoy the flexibility of adding payment methods to your merchant account later on with minimal integration effort.

<a name="paymentsgettingstarted" title="Payments API Getting Started"></a>
# Getting Started

The Paysafe Payments API currently supports the following payment methods: 

- Card
- Paysafecard
- Paysafecash
- VIP Preferred
- Play+ (Sightline)
- Skrill
- Instant ACH (iACH)
- ACH
- EFT
- Paypal


**Here is a step-by-step guide to get you started:**

 1. Apply for a sandbox account &ndash; See [Applying for a Test Account](#applytestaccount) for information on how to get Test credentials.
 2. Get your API keys &ndash; See [Authentication](#apikey) for information on how to retrieve your Public and Secret API keys from the Business Portal. 
 3. Know the API endpoints &ndash; Check out our [API Endpoints](#apiendpoints) to see the endpoints that you need to use for different request types.
 4. Choose your preferred type of integration &ndash; [Pick an integration type](#choosingintegration) based on your PCI compliance level.
 5. Understand Payment Handles and some common Payments API scenarios &ndash; [Read about Payment Handles](#paymenthandleoverview) and 
 preview [some of the most common scenarios](#typicalscenarios).
 6. Integrate and test in our Sandbox &ndash; Access all test data and instructions on how to [proceed with your testing](#testinginstructions).
 7. Go live &ndash; See our instructions on [how to go live](#goinglive).


<a name="apikey" title="Authentication"></a>
## Authentication

In order for you to use the Paysafe Payments RESTful API, Paysafe must first set you up on their system
and provide you with an API key. Your API key will have the following format:

 * Key Username – MerchantXYZ
 * Key Password – B-tst1-0-51ed39e4-312d02345d3f123120881dff9bb4020a89e8ac44cdfdcecd702151182fdc952272661d290ab2e5849e31bb03deede7e

> **Note:** This is not the same the username and password you use to access the [Business Portal](https://merchant.paysafe.com/portal). Your Production API key will be different from your Test API key. Contact your account manager for details. You must keep your API keys safe and ensure that it is used appropriately for your needs.

The case-sensitive API key is sent using HTTP Basic Authentication. To use HTTP Basic Authentication, you must send the API key credentials using the Authorization header with every request. The Authorization header is constructed as follows:

 1. The Key Username and Key Password are combined into a string separated by a colon, e.g.,“Key Username:Key Password”.
 2. The resulting string literal is then encoded using Base64.
 3. The authorization method and a space (i.e., “Basic”) are then put before the encoded string.

For example, using the Key Username and Password examples above, the header is formed as follows:

``Authorization: Basic
TWVyY2hhbnRYWVo6Qi10c3QxLTAtNTFlZDM5ZTQtMzEyZDAyMzQ1ZDNmMTIzMTIwODgxZGZmOWJiNDAyMGE4OWU4YWM0NGNkZmRjZWNkNzAyMTUxMTgyZmRjOTU yMjcyNjYxZDI5MGFiMmU1ODQ5ZTMxYmIwM2RlZWRlN2U=``

For additional details, please refer to [http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication).

> **IMPORTANT:** The API key that you will use for the Paysafe Payments API is **different from** the API key used for all the other Developer Center APIs.

### Getting Your API Keys
The Payments API uses two distinct API keys:
 1. The **Secret Key** &ndash; used for all server-to-server Payments API requests.
 2. The **Public Key** &ndash; used as the value for the *apiKey* parameter when using the [Payments Checkout SDK option](#paymentscheckout).

You will require a Secret key and a Public key for each of the two Paysafe environments: Test and Production (live).

You will receive separate emails from Paysafe that will provide you with the credentials to sign in to the corresponding versions of the Paysafe [Business Portal](https://merchant.paysafe.com/portal) (Test and Production), where you can retrieve 
the API keys as required.

<a name="publicapikey" title="Public API Key"></a>
#### Getting Your Public API Key
You use the Public API key if you are using the [Payments Checkout SDK](#paymentscheckout) to process payment requests. 

 > **Note:** You must Base64 Encode your Public API key before using it in the Payments Checkout SDK.

To retrieve your Public API key from the Business Portal:
 1. Go to **Integrate>API Keys**. 
![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/API_Key.png)
 2. For *Public Key*, click on the icon in the **Copy** column to copy the API key to your clipboard.  

The default Test account can be used for processing Card, PaysafeCash, and Paysafecard payments with the processing currency (*currencyCode*) set to USD. 

<a name="secretapikey" title="Secret API Key"></a>
#### Getting Your Secret API Key
You use the Secret API key in all your server-to-server Payments API requests. 

 > **Note:** You must Base64 Encode your Secret API key before using it in your API requests.

To retrieve your Secret API key from the Business Portal: 
 1. Go to **Integrate>API Keys**.
 2. Under **Secret Key**, click on **Authenticate Now**.
 ![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/Secret_Key1.png)
 3. Enter your Business Portal password and click **Authenticate**.
 4. You can now access your Secret API key. 
 ![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/Secret_Key2.png)
 
 > **Note:** All your payment methods will be set up to use the same API key.


<a name="urls" title="URLs"></a>
## URLs

###  Test URL
In order to test your integration with Paysafe, use the following Test URL:

`https://api.test.paysafe.com/paymenthub/v1/`

For example:

`https://api.test.paysafe.com/paymenthub/v1/payments/{payment_id}`

### Production URL
In order to process live requests with Paysafe, use the following Production URL:

`https://api.paysafe.com/paymenthub/v1/`

For example:

`https://api.paysafe.com/paymenthub/v1/payments/{payment_id}`

<a name="paymenthandleoverview" title="Payment Handle Overview"></a>
## Payment Handle Overview

A Payment Handle is a token that represents a payment method that you set up for a customer. 
When you create the payment handle, you can include information like the credit card number and expiry date, the card holder's name, the type of transaction request it will be used for, some profile information about the customer, and some billing address information. 

When you create the Payment Handle, Paysafe returns a *paymentHandleToken* in the response. That token represents all the customer payment information you need to include in, for example, a [credit card payment request](#paymentrequest).

You have to create a separate Payment Handle for each transaction type/payment type combination you need to use &ndash; e.g., one for credit card Payments, one for credit card Standalone Credits,  etc. 
Payment Handles typically have a lifespan of 15 minutes and can be used only once.

### Some Important Parameters
When you create a Payment Handle, there are a few additional parameters that are important to be aware of because they have a significant impact on how you will use the payment token (*paymentHandleToken*) that's created.
 * action
 * usage
 * executionMode

#### Action

The *action* parameter is a read-only value that Paysafe returns in the response to the Payment Handle creation request, regardless of the payment method selected by the customer. It tells you what additional action, if any, you must take to allow the customer to complete the payment request. 

The possible values are: 

* NONE – No further action is required from the customer. This is typically the case for a card transaction where no further 3D Secure authentication is required from the customer after having entered valid card details. 
In this case, merchant can immediately make a Payments call to capture the payment, since the *status* of the Payment Handle token will immediately be set to *PAYABLE*.
   
* REDIRECT – The customer is required to authorize the payment on a redirected page. This is typically the case, e.g., with a 3D Secure card transaction where the customer must authenticate their card on the issuing bank's website. 
In this case, you must redirect the customer to a link that Paysafe returns in the response to the Payment Handle creation request. Once the customer has completed the authentication successfully, the *status* of the Payment Handle token will be modified to *PAYABLE*. 

Once the status of the Payment Handle token is *PAYABLE*, the merchant has to [make a Payment request](#paymentrequest) using the Payment Handle token within 15 minutes to capture the payment. Otherwise, the Payment Handle will expire.

#### Usage

The *usage* parameter is a read-only value that Paysafe returns in the response to the Payment Handle creation request that specifies whether the Payment Handle token (*paymentHandleToken*) can be used once only or multiple times. 

Typically, when you [create a regular Payment Handle Token](#paymenthandlerequest), its *usage* will be SINGLE_USE and it will expire after a specified time.
When you create a [Customer Payment Handle Token](#createcustomerpaymenthandlerequest), its *usage* will be MULTI-USE and will not expire.

The possible values are:
* SINGLE_USE – In this case, the Payment Handle token can be used only once for a subsequent Payments API request.
* MULTI USE - In this case, the Payment Handle token can be used multiple times for a Payments API request. This would be used, e.g., for recurring transactions like subscriptions or saved cards.

#### Execution Mode

The *executionMode* parameter is a read-only value that Paysafe returns in the response to the Payment Handle creation request that indicates whether the payment request will be completed immediately or after a delay of some length. 
Merchants can use this information to determine whether they can receive the payment status synchronously or if instead they need to [rely on the use of webhooks](#paymentswebhooks).

The possible values are:
* SYNCHRONOUS – The Payment status can be received by the merchant synchronously. In this case the merchant can poll the PROCESSING/PENDING Payments at regular intervals to retrieve the Payment status. 
* ASYNCHRONOUS – The Payment is expected to be completed after a significant time delay (e.g., after hours or days, as in the case of PaysafeCash). In this case, the merchant must [use webhooks to retrieve the Payment status](#paymentswebhooks).

<a name="choosingintegration" title="Choosing Your Integration"></a>
## Choosing Your Integration

The Paysafe Payments API supports two integration types: 
 1. [Direct API Integration](#paysafeapi) &ndash; This method is recommended for merchants who are  PCI-DSS compliant to level SAQ-D. 
 This method allows you to collect user payment information in your website while processing payments and other transactions using secure server-to-server requests sent to Paysafe.
 2. [Paysafe Payments Checkout](#paymentscheckout) &ndash; This method is perfect for merchants with the least demanding level of PCI compliance: SAQ-A.
 This method allows you to take payments from credit cards and other supported payment methods using a secure overlay that is hosted by Paysafe. 
 The user input and storage of credit card and other PII information (Personally Identifiable Information) are handled by Paysafe. 

## Testing 

See [Testing Instructions](#testinginstructions)

## Going Live

See [Going Live](#goinglive)

<a name="paysafeapi" title="Paysafe API"></a>
# API

The Payments API allows merchants to process payment-related requests across a wide variety of payment methods with a simple integration a single API using the REST protocol. The protocol uses JSON for all requests and responses.

* **Message body**: This must contain valid Paysafe JSON objects as required for the type of request. Not all API calls require a message-body; for example, GET requests do not require a body.
* **Resource ID**: Identifies the unique ID of a resource.
![Structure of a Typical Payments API Request](http://mweb1-paysafeio-foreign.fra.skrill.net/fileadmin/user_upload/authentication_example_payments.png)
* **Payment Simulator**: While testing your integration, you can choose whether you want to simulate the actual end customer experience (or) you want to use a page which lets you simulate all payment handle statuses.
The behavior is controlled by using an HTTP header named “**Simulator**” in your request, which has the following possible values:
   * **"INTERNAL" (default)** – which redirects you to the **status** simulator page.
   * **"EXTERNAL"** – which redirects/connects you to the downstream payment method website (Eg: Skrill authentication page)

## Request Types Supported
The following request types are supported:

  * [Payment Methods](#getpaymentmethods)
  * [Payment Handles](#paymenthandlerequest)
  * [Verifications](#verificationrequest)
  * [Payments](#paymentrequest)
  * [Void Authorizations](#voidauthrequest)
  * [Settlements](#settlementrequest)
  * [Refunds](#refundrequest)
  * [Standalone Credits](#standalonecreditrequest)
  * [Original Credits](#originalcreditrequest)
  * [Customers](#createcustomerrequest)
  * [Customer Addresses](#addressesrequest)
  * [Customer Payment Handles](#createcustomerpaymenthandlerequest)
  * [Customer Single-Use Tokens](#createcustomersut)
  

<a name="apiendpoints" title="API Endpoints"></a>
## API Endpoints

`https://api.paysafe.com/paymenthub/v1/payments/{payment_id}`

### Resource Patterns

|Endpoint URL                                   |Description                            |Action |
|---                                            |---                                    |---    |
|/paymentmethods                                |Look Up Payment Methods for a Merchant |GET   |
|/paymenthandles                                |Create a Customer Payment Handle       |POST   |
|/paymenthandles/{payment_handle_id}            |Look Up a Payment Handle               |GET    |
|/verifications                                 |Verify a Card                          |POST   |
|/verifications/{verification_id}               |Look Up a Verification                 |GET    |
|/payments                                      |Submit a Payment Request               |POST   |
|/payments/{payment_id}                         |Look Up a Payment                      |GET    |
|/payments/{payment_id}/settlements             |Settle an Authorization                |POST   |
|/payments/{payment_id}/voidauths               |Void (Reverse) an Authorization        |POST   |
|/voidauths/{void_auth_id}                      |Look Up a Void Authorization           |GET    |
|/settlements/{settlement_id}                   |Cancel a Settlement                    |PUT    |
|/settlements/{settlement_id}                   |Look Up a Settlement                   |GET    |
|/payments/{settlement_id}/refunds              |Submit a Refund                        |POST   |
|/refunds/{refund_id}                           |Cancel a Refund                        |PUT    |
|/refunds/{refund_id}                           |Look Up a Refund                       |GET    |
|/standalonecredits                             |Submit a Standalone Credit             |POST   |
|/standalonecredits/{standalone_credit_id}      |Cancel a Standalone Credit             |PUT    |
|/standalonecredits/{standalone_credit_id}      |Look Up a Standalone Credit            |GET    |
|/originalcredits                               |Submit an Original Credit              |POST   |
|/originalcredits/{original_credit_id}          |Cancel an Original Credit              |PUT    |
|/originalcredits/{original_credit_id}          |Look Up an Original Credit             |GET    |
|/customers                                     |Create a Customer                      |POST   |
|/customers/{customer_id}                       |Look Up a Customer                     |GET    |
|/customers/{customer_id}                       |Update a Customer                      |PUT    |
|/customers/{customer_id}                       |Delete a Customer                      |DELETE |
|/customers/{customer_id}/addresses             |Create an Address                      |POST   |
|/customers/{customer_id}/address/{addresses_id} |Look Up an Address                    |GET    |
|/customers/{customer_id}/address/{addresses_id} |Update an Address                     |PUT    |
|/customers/{customer_id}/address/{addresses_id} |Delete an Address                     |DELETE |
|/customers/{customer_id}/paymenthandles         |Create a Customer Payment Handle       |POST   |
|/customers/{customer_id}/paymenthandles/{paymenthandle_id} |Look Up a Customer Payment Handle   |GET    |
|/customers/{customer_id}/paymenthandles/{paymenthandle_id} |Update a Customer Payment Handle    |PUT    |
|/customers/{customer_id}/paymenthandles/{paymenthandle_id} |Delete a Customer Payment Handle    |DELETE |
|/customers/{customer_id}/singleusetokens       |Create a Single-Use Customer Token     |POST   |
|/singleusecustomertokens/[singleusecustomertoken_id}   |Look Up a Single-Use Customer Token    |GET    |


<a name="typicalscenarios" title="Typical Scenarios"></a>
## Typical Scenarios
When you use the Paysafe Payments API for payments and credits, you have to collect a variety of customer details on your platform/website, including card number, expiry date, and CVV/CVC code, among other items. 
You must then and send this information to Paysafe with your API request.

The scenarios below describe some of the common ways by which merchants can set up some Payment and Credit requests using the Paysafe Payments API.

### Scenario 1: Card Payment with Settlement

This is a common scenario, where the Authorization and Settlement of a credit card payment are completed in a single request. 
This type of request is typically used by merchants who provide immediate delivery of the service, e.g., a gaming merchant where a customer deposits money in to their player account. 
In this scenario, you would do the following: 
 1. Create a Payment Handle, which should immediately have the *status* of PAYABLE.
 2. Use the *paymentHandleToken* returned in the response to process the Payment request &ndash; the *settleWithAuth* parameter must be set to *true* in this case.
 3. Once the Payment request is successfully completed, the funds are immediately requested from the card issuer with the next Paysafe batch Settlement run.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 2: Card Payment with Settlement with 3D Secure Authentication

In this scenario, the Authorization and Settlement of a credit card payment are completed in a single request, but in addition the card holder is authenticated via 3D Secure by the card issuer prior to Payment authorization.
In this scenario, you would do the following:
 1. Create a Payment Handle. 
 2. Since the card is enabled for 3D Secure, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link points to the 3D Secure authentication URL
 3. Redirect the customer to the 3D Secure authentication URL so they can authenticate the credit card.
 4. Upon successful customer authentication, the merchant gets notified at the URL specified in the *on_completed* parameter included with their request.
 5. At this point, the *status* of the Payment Handle becomes PAYABLE. 
 6. Use the *paymentHandleToken* returned in the response to process the Payment request &ndash; the *settleWithAuth* parameter must be set to *true*.
 7. Once the Payment request is successfully completed, the funds are immediately requested from the card issuer with the next Paysafe batch Settlement run.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 3: Card Payment with Delayed Settlement

This is another common scenario, where a merchant obtains an authorization for a purchase amount and then settles it later once the service is fulfilled. 
A common example would be a merchant who ships goods &ndash; they might take your online order on day 1, when they do the authorization, but then settle it on day 3 when they ship the goods you have purchased. 
In this scenario, you would do the following:
 1. Create a Payment Handle, which should immediately have the *status* of PAYABLE.
 2. Use the *paymentHandleToken* returned in the response to process the Payment request &ndash; the *settleWithAuth* parameter must be set to *false* in this case.
 3. Once you have shipped the goods, use the same *paymentHandleToken* to process a Settlement request. The *payment_id* to include in the Settlement request URL is the *id* that was returned in the response to the Payment request.
 4. Once the Settlement request is successfully completed, the funds are immediately requested from the card issuer with the next Paysafe batch Settlement run.

> **Note:** You can make multiple Settlement requests to complete the initial Payment request, up to the full amount on the original authorization.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest) + [Settlements](#settlementrequest)

### Scenario 4: Card Original Credit

The Original Credit request allows the merchant to issue a credit to a customer in the case where there is no previous Payment to tie it to, as is the case with a regular [Refund](#refundrequest). 
For example, an online gaming merchant may want to perform a payout using an Original Credit. In this scenario, you would do the following: 
 1. Create a Payment Handle, with the *transactionType* parameter set to ORIGINAL_CREDIT. This Payment Handle should immediately have the *status* of PAYABLE.
 2. Use the *paymentHandleToken* returned in the response to process the Original Credit.
 3. Once the Original Credit request is successfully completed, the funds are transferred to the customer's card with the next Paysafe batch run.

>**Note:** Only merchants with [specific Merchant Category Codes](#originalcreditmccs) can process Original Credit requests. Merchants with all other Merchant Category Codes must process [Standalone Credit requests](#standalonecreditrequest).

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Original Credits](#originalcreditrequest)

### Scenario 5: Paysafecard Payment

For a Paysafecard request, the merchant wants to process a payment request using Paysafecard as the payment type. In this scenario, you would do the following:
 1. Create a Payment Handle with the *transactionType* parameter set to PAYMENT and the *paymentType* parameter set to PAYSAFECARD. 
 2. Since the customer has to complete payment authentication by providing Paysafecard details, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link points to the Paysafecard redirect URL
 3. Redirect the customer to the Paysafecard redirect URL so they can provide the PIN/Voucher details to complete the money transfer.
 4. Upon successful customer authentication, the merchant gets notified at the URL specified in the *on_completed* parameter included with their request.
 5. At this point, the *status* of the Payment Handle becomes PAYABLE. 
 6. Use the *paymentHandleToken* returned in the response to process the Payment request.
 7. Once the Payment request is successfully completed, the funds are immediately transferred to the merchant's account.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 6: Paysafecash Payment

When the merchant wants to process a payment request using Paysafecash as the payment type, you would do the following:
 1. Create a Payment Handle with the *transactionType* parameter set to PAYMENT and the *paymentType* parameter set to PAYSAFECASH. 
 2. Since the customer has to complete payment authentication by providing Paysafecash details, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link points to the Paysafecash redirect URL
 3. Redirect the customer to the Paysafecash redirect URL so they can generate a bar code.
 4. Upon successful bar-code generation, the *status* of the Payment Handle becomes PAYABLE. The merchant gets [notified of this status change via webhooks](paymentswebhooks) that have been configured.
 5. Use the *paymentHandleToken* returned in the response to process the Payment request. The Payment will have a *status* of PENDING until the customer has made the payment.
 6. Once the Payment request is successfully completed, the merchant [gets notified via webhooks](#paymentswebhooks) and the funds are immediately transferred to the merchant's account.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 7: VIP Preferred Payment

When the merchant wants to process a VIP Preferred payment request, you would do the following:
 1. Create a Payment Handle with the *transactionType* parameter set to PAYMENT and the *paymentType* parameter set to VIPPREFERRED.
 2. Since VIP Preferred is supported only via a hosted page, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link that points to the VIP Preferred hosted page URL
 3. You can either embed the hosted page within your own custom checkout solution or redirect the customer to the hosted page URL on a different tab. 
 4. Interactions on the hosted page are handled by Paysafe and on successful payment, we will notify you on the *on_completed* parameter included with your request. 
 5. At this point, the status of the Payment Handle becomes PAYABLE. 
 6. Use the *paymentHandleToken* returned in the response to process the Payment request.
 7. Once the Payment request is successfully completed, the funds are immediately transferred to the merchant's account.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 8: Play+ (Sightline) Payment

When the merchant wants to process a Play+ (Sightline) payment request, you would do the following:
 1. Create a Payment Handle with the *transactionType* parameter set to PAYMENT and the *paymentType* parameter set to SIGHTLINE.
 2. Since Sightline is supported only via a hosted page, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link that points to the Play+ hosted page URL
 3. You can either embed the hosted page within your own custom checkout solution or redirect the customer to the hosted page URL on a different tab.
 4. Interactions on the hosted page are handled by Paysafe and on successful payment, we will notify you on the *on_completed* parameter included with your request. 
 5. At this point, the status of the Payment Handle becomes PAYABLE. 
 6. Use the *paymentHandleToken* returned in the response to process the Payment request. 
 7. Once the Payment request is successfully completed, the funds are immediately transferred to the merchant's account.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 9: Skrill Payment

When the merchant wants to process a Skrill payment request, you would do the following:
 1. Create a Payment Handle with the *transactionType* parameter set to PAYMENT and the *paymentType* parameter set to SKRILL.
 2. Since the customer has to complete payment authentication by providing Skrill details, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link points to the Skrill redirect URL
 3. Redirect the customer to the Skrill redirect URL so they can provide the email address and password details to complete the money transfer.
 4. Upon successful customer authentication, the merchant gets notified at the URL specified in the *on_completed* parameter included with their request.
 5. At this point, the status of the Payment Handle becomes PAYABLE.
 6. Use the *paymentHandleToken* returned in the response to process the Payment request.
 7. Once the Payment request is successfully completed, the funds are immediately transferred to the merchant's account.
 
**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 10: Instant ACH Payment

When the merchant wants to process a Instant ACH payment request, you would do the following:
 1. Create a Payment Handle with the *transactionType* parameter set to PAYMENT and the *paymentType* parameter set to INSTANTACH.
 2. Since the customer has to complete payment authentication by providing bank credentials, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link points to the Instant ACH redirect URL
 3. Redirect the customer to the Instant ACH redirect URL so they can choose their bank account and provide credentials to complete the money transfer.
 <br/> **NOTE:** **Instant ACH is only available in the US. If the customer tries to access Instant ACH from an IP address outside of US, they will be denied access.**
 4. Upon successful customer authentication, the merchant gets notified at the URL specified in the *on_completed* parameter included with their request.
 5. At this point, the status of the Payment Handle becomes PAYABLE.
 6. Use the *paymentHandleToken* returned in the response to process the Payment request.
 7. Once the Payment request is successfully completed, the funds are immediately transferred to the merchant's account.
 
**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 11: Paypal Payment

When the merchant wants to process a Paypal payment request, you would do the following:
 1. Create a Payment Handle with the *transactionType* parameter set to PAYMENT and the *paymentType* parameter set to PAYPAL.
 2. Since the customer has to complete payment authentication by providing Paypal details, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link points to the Paypal redirect URL
 3. Redirect the customer to the Paypal redirect URL so they can provide the email address and password details to complete the money transfer.
 4. Upon successful customer authentication, the merchant gets notified at the URL specified in the *on_completed* parameter included with their request.
 5. At this point, the status of the Payment Handle becomes PAYABLE.
 6. Use the *paymentHandleToken* returned in the response to process the Payment request.
 7. Once the Payment request is successfully completed, the funds are immediately transferred to the merchant's account.
 
**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 12: ACH Payment

When the merchant wants to process an ACH payment request, you would do the following:
 1. Create a Payment Handle, which should immediately have the *status* of PAYABLE.
 2. Use the *paymentHandleToken* returned in the response to process the Payment request &ndash; 
> **Note:** For ACH Payment, the *settleWithAuth* parameter must be set to *true*. 

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 13: EFT Payment

When the merchant wants to process an EFT payment request, you would do the following:
 1. Create a Payment Handle, which should immediately have the *status* of PAYABLE.
 2. Use the *paymentHandleToken* returned in the response to process the Payment request &ndash; the *settleWithAuth* parameter must be set to *true* in this case.
> **Note:** For EFT Payment, the *settleWithAuth* parameter must be set to *true*. 

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

<a name="paymentscheckout" title="Payments Checkout"></a>
# Payments Checkout

Paysafe Payments Checkout is an SDK that allows merchants to 
- Take payment from credit cards and other alternate payment methods &ndash; like Skrill, Instant ACH etc. (or)
- Process credit (withdrawals) for customers via payment methods that support credit transactions 

Payments Checkout uses a secure overlay that requires the least demanding level of PCI compliance: SAQ-A. 
The entry and storage of payment information is handled by Paysafe and the checkout uses Paysafe's Payment APIs for payment and credit processing.

## How to Use the SDK

1. Include the Paysafe Checkout SDK in your HTML payment form.
2. Call the checkout setup function with your Public API key, [which you retrieve from the Business Portal](#publicapikey). 
The setup function creates an iframe overlay containing the secure payment/withdrawal form hosted on Paysafe's servers. 
You will need to pass a callback function as part of the setup to handle payment handle success and failure.
3. The callback should use AJAX to send the payment handle representing the customer's payment details to your merchant server to [make a payment](#paymentrequest) or [process a credit](#originalcreditrequest) using the Paysafe Payments API.

## Including the SDK 

The SDK is located here: `https://hosted.paysafe.com/checkout/v2/paysafe.checkout.min.js`

You need to include it in your HTML form by adding a `<script>` element in either the header or body.

<head>
    <script src="https://hosted.paysafe.com/checkout/v2/paysafe.checkout.min.js"></script>
</head>

## Example Payment Form

The following code sample shows a minimal Paysafe Checkout example that creates a payment overlay for the user.
The overlay contains a payment button that creates a payment handle for the data entered by the user and displays the payment handle token (if successful) in the browser console.

```html
<html>
    <head>
        <script src="https://hosted.paysafe.com/checkout/v2/paysafe.checkout.min.js"></script>
    </head>

 
    <body>
        <button onclick="checkout()"> Pay $25 </button>
    </body>

    <script>
        function checkout() {
            paysafe.checkout.setup("API Key", {
                "currency": "USD",
                "amount": 10000,
                "locale": "en_US",
                "customer": {
                    "firstName": "John",
                    "lastName": "Dee",
                    "email": "johndee@paysafe.com",
                    "phone": "1234567890",
                    "dateOfBirth": {
                        "day": 1,
                        "month": 7,
                        "year": 1990
                    }
                },
                "billingAddress": {
                    "nickName": "John Dee",
                    "street": "20735 Stevens Creek Blvd",
                    "street2": "Montessori",
                    "city": "Cupertino",
                    "zip": "95014",
                    "country": "US",
                    "state": "CA"
                },
                "environment": "TEST",
                "merchantRefNum": "1559900597607",
                "canEditAmount": true,
                "merchantDescriptor": {   
                    "dynamicDescriptor": "XYZ",
                    "phone": "1234567890"
                    },
                "displayPaymentMethods":["skrill","card"],
                "paymentMethodDetails": {
                    "paysafecard": {
                        "consumerId": "1232323"
                    },
                    "paysafecash": {
                        "consumerId": "123456"
                    },
                    "sightline": {
                        "consumerId": "123456",
                        "SSN": "123456789",
                        "last4ssn": "6789",
                        "accountId":"1009688222"
                    },
                    "vippreferred":{
                        "consumerId": "550726575",
                        "accountId":"1679688456"
                    }
                }
            }, function(instance, error, result) {
                if (result && result.paymentHandleToken) {
                    console.log(result.paymentHandleToken);
                    // make AJAX call to Payments API
                } else {
                    console.error(error);
                    // Handle the error
                }
            }, function(stage, expired) {
                switch(stage) {
                    case "PAYMENT_HANDLE_NOT_CREATED": // Handle the scenario
                    case "PAYMENT_HANDLE_CREATED": // Handle the scenario
                    case "PAYMENT_HANDLE_REDIRECT": // Handle the scenario
                    case "PAYMENT_HANDLE_PAYABLE": // Handle the scenario
                    default: // Handle the scenario
                }
            });
        }
    </script>
</html>
```

## Example Withdrawal Form

The following code sample shows a minimal Paysafe Checkout example that creates a payment overlay for the user.
The overlay contains a withdraw button that creates a payment handle for the data entered by the user and displays the payment handle token (if successful) in the browser console.
```html
<html>
    <head>
        <script src="https://hosted.paysafe.com/checkout/v2/paysafe.checkout.min.js"></script>
    </head>

 
    <body>
        <button onclick="checkout()"> Pay $25 </button>
    </body>

    <script>
        function checkout() {
            paysafe.checkout.setup("API Key", {
                "currency": "USD",
                "amount": 10000,
                "locale": "en_US",
                "customer": {
                    "firstName": "John",
                    "lastName": "Dee",
                    "email": "johndee@paysafe.com",
                    "phone": "1234567890",
                    "dateOfBirth": {
                        "day": 1,
                        "month": 7,
                        "year": 1990
                    }
                },
                "billingAddress": {
                    "nickName": "John Dee",
                    "street": "20735 Stevens Creek Blvd",
                    "street2": "Montessori",
                    "city": "Cupertino",
                    "zip": "95014",
                    "country": "US",
                    "state": "CA"
                },
                "environment": "TEST",
                "merchantRefNum": "1559900597607",
                "canEditAmount": true,
                "payout": true, 
                "payoutConfig":{
                    "maximumAmount": 100000
                    },
                "displayPaymentMethods":["skrill","card","instantach"],
                "paymentMethodDetails": {
                    "sightline": {
                        "consumerId": "123456"
                    },
                    "skrill": {
                        "consumerId": "john.doe@email.com",
                        "emailSubject": "Skrill Payout",
                        "emailMessage": "Your Skrill Payout request has been processed"
                    },
                    "instantach": {
                        "consumerId": "john.doe@email.com",
                        "paymentId": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
                        "emailSubject": "Instant ACH Payout",
                        "emailMessage": "Your Instant ACH Payout request has been processed"
                    },
                    "vippreferred":{
                        "consumerId": "550726575"
                    },
                    "paypal": {
                        "consumerId": "sb-cpfxo1472281@personal.example.com",
                        "consumerMessage": "Paysafe note to payer",
                         "recipientType": "PAYPAL_ID"
                    }
                }
            }, function(instance, error, result) {
                if (result && result.paymentHandleToken) {
                    console.log(result.paymentHandleToken);
                    // make AJAX call to Payments API
                } else {
                    console.error(error);
                    // Handle the error
                }
            }, function(stage, expired) {
                switch(stage) {
                    case "PAYMENT_HANDLE_NOT_CREATED": // Handle the scenario
                    case "PAYMENT_HANDLE_CREATED": // Handle the scenario
                    case "PAYMENT_HANDLE_REDIRECT": // Handle the scenario
                    case "PAYMENT_HANDLE_PAYABLE": // Handle the scenario
                    default: // Handle the scenario
                }
            });
        }
    </script>
</html>
```

## Setup Function

The setup function creates and initializes the Paysafe Checkout in an overlay. It has the following parameters:
+ The [Public API key](#publicapikey) provided in the Business Portal. Note that this key can only be used to generate payment handle tokens for use with payments or credits, and has no other API access rights, such as those required for taking payments. Consequently, this key can be exposed publicly in the user's browser.
+ An *options* object containing the environment to use (Test or Live), the payment amount, currency, and several parameters to show additional features in the payment form.
+ A *resultCallback* function you provide to receive the Paysafe checkout instance, handle successful payment handle (by sending the payment handle to your merchant server), or respond to any errors caused by a failed payment handle creation.
+ An optional *closeCallback* function you provide to handle the customer closing the payment overlay.

The function signature is as follows:
```
paysafe.checkout.setup(apiKey, options, resultCallback, closeCallback?)
```

### Setup Function and Objects

|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|apiKey|string|yes||This is your [Public API key](#publicapikey), available in the Business Portal.|
|[options](#options)|object|yes||This is the merchant's configuration for rendering the Checkout.|
|[resultCallback](#resultcallback)|function|yes||The function to be invoked when the payment handle needs to be passed to the merchant, who then uses it to make the payment.|
|[closeCallback](#closecallback)|function|no||This notifies the merchant script when the Checkout gets closed.|

<a name="options"></a>
**options**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|currency|string|yes|`length=3`<br/>`Regex:[A-Z]`|This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD.|
|merchantRefNum|string|yes|`length<=255`|A unique identifier provided by the merchant for every transaction from Checkout. |
|amount|number|no|`length=1-9`|Payment amount in minor units to process the transaction. Use the correct minor units amount for the *currency* passed to *options*. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139. The merchant can choose not to pass an amount when the Checkout is loaded. In that case, the *canEditAmount* parameter should be set to *true*. However, before clicking the Pay button, the user would have to enter the desired amount in the Checkout.|
|environment|string|no|Possible values: LIVE or TEST|The environment to be used for making the API calls and loading the Checkout. Default value is LIVE, if not specified. |
|locale|string|no|Possible values: en_US|Language locale for the checkout.|
|[billingAddress](#billingaddress)|object|conditional||This is the billing address of the customer that will be displayed to the customer at checkout. The merchant should include this object if this is a first-time customer with no customer profile. If the *customer* entity has been created with the Payments API, then address information from the *singleUseCustomerToken* will be used and the merchant does not have to include the *billingAddress* object.<br>**Note:** The address information from this object will be displayed in place of the address information from the *singleUseCustomerToken*, if both are included.|
|singleUseCustomerToken|string|no||This is the *singleUseCustomerToken* that the merchant generated using the [Create a Single-Use Customer Token request](#createcustomersut). Any saved addresses and/or payment details would be displayed in the Checkout.|
|canEditAmount|boolean|no||If *true*, the customer can edit the amount in the Checkout before clicking Pay. If false, the amount is not editable.|
|[customer](#customer)|object|no||In case the customer is a first-time user and has no customer profile, the merchant can choose to pass an existing customer profile in the call to create a payment handle.|
|displayPaymentMethods|Array |no | | This field serves 2 purposes. You can use it to restrict the payment methods that a customer can see. You can also use it to order the payment methods based on your preference. If this field is present, then a customer will only see those payment methods in the order specified, so ensure that you provide all payment methods if you are using it only for the purpose of payment method ordering. |
|[paymentMethodDetails](#paymentmethoddetails)|object|conditional||Required for Paysafecash, Paysafecard, Skrill, Instant ACH, Paypal, Play+ (Sightline) payment types.|
|payout |boolean |no | | If true, **Withdrawal** Checkout screen will be launched. If false, **Payment** Checkout will be launched.<br/> Defaults to false. |
|[payoutConfig](#payoutconfig) |object | conditional | | Required for withdrawal checkout only. This configuration is used to specify withdrawal limitations. |
|[merchantDescriptor](#merchantDescriptor)|object|no||This is a merchant descriptor.| 

<a name="billingaddress"></a>
**billingAddress**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|nickName|string|no|`length<=50`|An identifier to identify the type of address, e.g., Work or Home.|
|street|string|yes|`length<=50`|The first line of the address.|
|street2|string|no|`length<=50`|The second line of the address.|
|city|string|yes|`length<=40`|The city name in the address.|
|zip|string|yes|`length<=10`|The zip code of the address.|
|country|string|yes|`length=2`|The country of the address, e.g., US. See [Country Codes](#countrycodes).|
|state|string|yes|`length<=40`|The state of the address. See [State Codes](#statecodes).|

<a name="card"></a>
**card**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|accountID |string|Conditional|`length<=10`|Required when you have more than one account configured for the same payment method and currency.|

<a name="customer"></a>
**customer**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|firstName|string|yes|`length<=80`|The first name of the customer.|
|lastName|string|yes|`length<=80`|The last name of the customer.|
|[dateOfBirth](#dateofbirth)|object|yes||The date of birth of the customer.|
|email|string|yes|`length<=255`|The email address of the customer.|

<a name="dateofbirth"></a>
**dateOfBirth**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|year|number|yes|`length=4 min=1900`|This is the year of birth.|
|month|number|yes|`length=2 max=12`|This is the month of birth.|
|day|number|yes|`length=2 max=31`|This is the day of birth.|

<a name="merchantDescriptor"></a>
**merchantDescriptor**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|dynamicDescriptor|string|yes|`length<=20`|This is a merchant descriptor.|
|phone|string|yes|`length<=13`|This is the merchant’s phone number, which will be appended to the merchant descriptor.|

<a name="paymentmethoddetails"></a>
**paymentMethodDetails**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|[card](#card)|object|Conditional||Required if there are multiple card accounts for the same currency.|
|[paysafecard](#paysafecard)|object|Conditional||Required for Paysafecard payment/withdrawal.|
|[paysafecash](#paysafecash)|object|Conditional||Required for Paysafecash payment/withdrawal.|
|[skrill](#skrill)          |object|Conditional||Required for Skrill withdrawal only. |
|[instantach](#instantach)  |object|Conditional||Required for Instant ACH withdrawal only. |
|[paypal](#paypal)          |object|Conditional||Required for Paypal withdrawal only.|
|[sightline](#sightline)    |object|Conditional||Required for Play+|
|[vippreferred](#vippreferred)|object|Conditional||Required for VIP Preferred|

<a name="payoutconfig"></a>
**payoutConfig**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|maximumAmount|number|yes|`length=1-9`|This specifies the maximum amount that a user is allowed to withdraw from checkout in the current session.|

<a name="paysafecard"></a>
**paysafecard**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|consumerId|string|yes|`length<=50`|This is a consumer ID that the merchant has stored for Paysafecard payments.|
|accountID |string|Conditional|`length<=10`|Required when you have more than one account configured for the same payment method and currency.|

<a name="paysafecash"></a>
**paysafecash**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|consumerId|string|yes|`length<=50`|This is a consumer ID that the merchant has stored for Paysafecash payments.|
|accountID |string|Conditional|`length<=10`|Required when you have more than one account configured for the same payment method and currency.|

<a name="sightline"></a>
**sightline**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|consumerId|string|yes|`length<=50`|This is a consumer ID that the merchant has stored for Play+ (Sightline) payments. This will be used by Play+ for customer enrollment.|
|SSN|string|no|`length=9`|This is the customer's Social Security Number.If provided, then the last 4 SSN field will be prefilled and locked in enrollment as well as during Payment flow. If not provided, Customer has to enter their full SSN in the enrollment and the last 4 SSN in the Payment flow.|
|last4ssn|string|no|`length=4`|This the customer’s last 4 digits of Social Security Number. If the customer is already enrolled for Sightline, then instead of sending the full ‘SSN’ field, you can send the last 4 digits of SSN which will get prefilled during Payment flow. If not provided, then the system will check if ‘SSN’ field is present to prefill the last 4 digits. If both these fields are not provided, then the customer has to enter the last 4 digits of SSN to complete the payment.|
|accountID |string|Conditional|`length<=10`|Required when you have more than one account configured for the same payment method and currency.|

<a name="skrill"></a>
**skrill**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|consumerId              |string|yes|`length<=50` |This is the consumer's Skrill email ID to be paid. Required for withdrawal checkout. Merchant has to have this stored prior when consumer made a Skrill payment.|
|emailSubject            |string|yes|`length<=30` |This is the Subject line to use in the customer email.Required for withdrawal checkout.|
|emailMessage            |string|yes|`length<=50` |This is the message to use in the customer email.Required for withdrawal checkout.|
|recipientDescription    |string|no |`length<=30` |A description to be shown on the Skrill payment page in the logo area if there is no *logo\_url* parameter. If no value is submitted and there is no logo, the *pay\_to\_email* value is shown as the recipient of the payment.|
|language                |string|no |`length=2`   |The 2-character preferred language code for the consumer (e.g., EN, FR).|
|logoUrl                 |string|no |             |The URL of the logo which you would like to appear in the top right of the Skrill page. The logo must be accessible via HTTPS or it will not be shown. The logo will be resized to fit. To avoid scaling distortion, the minimum size should be as follows:<br>If the logo width > height - at least 107px wide.<br>If logo width > height - at least 65px high<br>Avoid large images (much greater than 256 by 256px) to minimize the page loading time.|
|detail1Description      |string|no |             |You can show additional details about the product in the More information section in the header of Quick Checkout.|
|detail1Text             |string|no |             |The detail1Text is shown next to the detail1Description in the More Information section in the header of the payment form with the other payment details. The detail1Description combined with the detail1Text is shown in the more information field of the merchant account history CSV file.|
|accountID |string|Conditional|`length<=10`|Required when you have more than one account configured for the same payment method and currency.|

<a name="instantach"></a>
**instantach**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|consumerId              |string|yes|`length<=50` |This is the consumer's email ID. Required for withdrawal checkout.|
|paymentId               |string|yes|`length<=36` |This is the ID returned in the response to a prior Payment that the customer made using Instant ACH. Required for withdrawal checkout.|
|emailSubject            |string|yes|`length<=30` |This is the Subject line to use in the customer email.Required for withdrawal checkout.|
|emailMessage            |string|yes|`length<=50` |This is the message to use in the customer email.Required for withdrawal checkout.|
|recipientDescription    |string|no |`length<=30` |A description to be shown on the Instant ACH payment page in the logo area if there is no *logo\_url* parameter. If no value is submitted and there is no logo, the *pay\_to\_email* value is shown as the recipient of the payment.|
|language                |string|no |`length=2`   |The 2-character preferred language code for the consumer (e.g., EN, FR).|
|logoUrl                 |string|no |             |The URL of the logo which you would like to appear in the top right of the Instant ACH page. The logo must be accessible via HTTPS or it will not be shown. The logo will be resized to fit. To avoid scaling distortion, the minimum size should be as follows:<br>If the logo width > height - at least 107px wide.<br>If logo width > height - at least 65px high<br>Avoid large images (much greater than 256 by 256px) to minimize the page loading time.|
|detail1Description      |string|no |             |You can show additional details about the product in the More information section in the header of Quick Checkout.|
|detail1Text             |string|no |             |The detail1Text is shown next to the detail1Description in the More Information section in the header of the payment form with the other payment details. The detail1Description combined with the detail1Text is shown in the more information field of the merchant account history CSV file.|
|accountID |string|Conditional|`length<=10`|Required when you have more than one account configured for the same payment method and currency.|

<a name="vippreferredobject" title="VIP Preferred"></a>
**vippreferred**
|Parameter          |Type|Required|Validations|Description|
|---                |---|---|---|---|
|consumerId         |string|yes|`length=9`|This is the customer's Social Security Number.|
|accountID |string|Conditional|`length<=10`|Required when you have more than one account configured for the same payment method and currency.|

<a name="paypal"></a>
**paypal**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|consumerId              |string|yes|`length<=50` |The source of funds for this payment, the email address of the consumer or payer.|
|recipientDescription    |string|no |`length<=127`|A label that overrides the business name in the merchant's PayPal account on the PayPal checkout pages.|
|language                |string|no |`length=2`   |The 2-character preferred language code for the consumer (e.g., AU, AT, BE, BR, CA, CH, CN, DE, ES, GB, FR, IT, NL, PL, PT, RU, or US.) or A five-character code is also valid for languages in these countries (e.g: da_DK, he_IL, id_ID, ja_JP, no_NO, pt_BR, ru_RU, sv_SE, th_TH, zh_CN, zh_HK, and zh_TW).|
|shippingPreference      |enum  |no |             |The shipping preference. The possible values are:<ul><li>NO_SHIPPING - Redacts the shipping address from the PayPal pages. Recommended for digital goods.</li><li>GET_FROM_FILE - Uses the customer-selected shipping address on PayPal pages.</li><li>SET_PROVIDED_ADDRESS. If available, uses the merchant-provided shipping address, which the customer cannot change on the PayPal pages. If the merchant does not provide an address, the customer can enter the address on PayPal pages.</li></ul>|
|consumerMessage         |string|no |             |Note to be displayed on the PayPal page.|
|orderDescription        |string|no |             |Order description to display on PayPal page. If merchant does not set this field it defaults to 'Payment for order'.|
|recipientType           |string|yes|             |Type of payout recipient. The only supported value is 'PAYPAL_ID'.|

The Paysafe Checkout is displayed when the configuration provided in *options* is correctly validated.

<a name="resultcallback"></a>
#### resultCallback

The result callback is invoked when the Payment Handle is successfully created and is in the PAYABLE state or when there is an error in the Checkout. It also passes in an instance of the Checkout object.

Using the functions provided in the *instance* object, the merchant can control the checkout experience.

The *resultCallback* contains the following elements.

|Parameter|Type|Required|Description|
|---------|-------|---------------|-----------|
|[instance](#instance)|object|yes|The Paysafe checkout instance.|
|[error](#error)|object|no|Object containing information for the error. This field is present if payment handle creation fails. The contents of this object are described below.|
|[result](#result)|object|yes|Result containing payment token. The contents of this object are described below.|
|{return}|undefined|false||

<a name="instance"></a>
**instance**
|Parameter|Type|Required|Description|
|---------|-------|---------------|-----------|
|isOpen|function|yes|Checks if the overlay is still open.|
|close|function|yes|Closes the overlay without displaying payment result.|
|showSuccessScreen|function|yes|Changes Checkout layout to success screen.|
|showFailureScreen|function|yes|Changes Checkout layout to failure screen.|

<a name="error"></a>
**error**
|Parameter|Type|Required|Description|
|---------|-------|---------------|-----------|
|message|string|yes|Provides an error message that can be displayed to users.|
|detailedMessage|string|yes|Provides a detailed error message that can be logged.|
|correlationId|string|yes|Unique ID that can be provided to the Paysafe Support team as a reference for investigation.|

<a name="result"></a>
**result**
|Parameter|Type|Required|Description|
|---------|-------|---------------|-----------|
|paymentHandleToken|string|yes|The Payment Handle token to be passed to the Payments API call.|
|paymentMethod|string|yes|The payment method used by the customer.|
|customerOperation|string|yes|The customer operation for the card. Values: ADD, EDIT or DELETE.|
|amount|number|yes|The amount used to create the Payment Handle. This is required because the user might change the amount in the Checkout.|

<a name="closecallback"></a>
#### closeCallback
This notifies the merchant script when the Checkout gets closed. The following actions invoke the closeCallback:
 1. When the customer closes the Checkout.
 2. When Merchant closes the Checkout using instance.close() method in the result callback after payments call.
     
The *closeCallback* contains the following elements.

|Parameter|Type|Required|Description|
|---------|-------|---------------|-----------|
|stage|string|yes|Stage during which the Checkout overlay is closed. Possible values are: *PAYMENT_HANDLE_NOT_CREATED*, *PAYMENT_HANDLE_CREATED*, *PAYMENT_HANDLE_REDIRECT*, *PAYMENT_HANDLE_PAYABLE* <ul><li>PAYMENT_HANDLE_NOT_CREATED: Checkout did not initiate a session with Paysafe or PSP.</li><li>PAYMENT_HANDLE_CREATED: Checkout initiated a session with Paysafe/PSP and obtained the details required to initiate a payment.</li><li>PAYMENT_HANDLE_REDIRECT:  Checkout successfully redirected the customer to the PSP hosted page and is waiting for the callback from the hosted page. This is applicable only for flows where the customer is redirected to a different page. Indicates the payment is in progress in the redirected page. </li><li>PAYMENT_HANDLE_PAYABLE: The customer completed the payment, and either customer closes the Checkout after seeing the success/failure screen (This can be initiated by merchant script in result callback using instance.showSuccessScreen()/instance.showFailureScreen() methods) or merchant script closes the Checkout after payments call from result callback by calling instance.close() method.</li>  </ul>|
|expired|boolean|yes|Indicates whether the *close* event was triggered after the Checkout expired.|
|{return}|undefined|false|


<a name="usingsavedcardscheckout" title="Using Saved Cards and Addresses in Checkout"></a>
## Using Saved Cards and Addresses in Checkout
You can use Payments Checkout to store your customer's credit card and address information, which they can then use for their future transactions. 
This involves two easy steps:
 1. Create a profile for your customer.
 2. Create a single-use customer token, using the *customerId* in the Payments Checkout response (or the *id*, if you use an API call).

When you use this single-use customer token as the *singleUseCustomerToken* parameter in the Payments Checkout, any 
card and address information associated with the customer will be displayed on the Checkout page.

> **Note:** The customer can save a card by clicking on 'save my card for future transactions'. However, this card will only be saved if the customer completes a Payment in the same session.  

### Creating a Customer Profile
To use this functionality, the merchant needs to first create a customer profile with Paysafe. There are two ways to create a customer profile:
 1. Create a profile in a Payment request
 2. Create a profile in a Customer creation request 

> **Note:** Paysafe recommends that you use the Payment request to create a customer profile if you are integrating with Paysafe Payments Checkout.

#### Create the Profile in a Payment Request

When you create a payment handle with the Payments Checkout, the *resultCallback* is returned, which contains the *customerOperation* parameter. 

If the customer selected the *saveCard* option in the Checkout while doing their payment, then the *customerOperation* parameter returned in the *resultCallback* will have the value set to *ADD*. 

>**Note:** The *saveCard* option is presented by default by Paysafe in the Checkout.

In the case where *customerOperation* has the value of ADD, then the merchant must include an additional parameter along with the rest of the request payload 
when [processing a Payment request](#paymentrequest) &ndash; either the *merchantCustomerId* parameter or the *customerId* parameter.
   
If the merchant has never [created a customer entity for this customer](#createcustomerrequest), they would include *merchantCustomerId* with a value the merchant has stored for that customer.

   ```json
   Request Body :
        {
            ...
            "merchantCustomerId": "user1"
        }
   ```
If the merchant has already [created a customer entity for this customer](#createcustomerrequest), they would include *customerId*, for which the value 
would be the unique *id* returned in the response to the customer creation request. 

   ```json
   Request Body :
        {
            ...
            "customerId": "ccb24e28-6e38-47ce-8815-94706c5b608c"
        }
   ```

In the case of a successful payment request with either of these added parameters, two new parameters are then returned in the response:
 - *customerId* &ndash; a customer profile
 - *multiUsePaymentHandleToken* &ndash; a multi-use payment handle
   
   ```json
   Response Body :
        {
            ...
            "customerId": "ccb24e28-6e38-47ce-8815-94706c5b608c",
            "multiUsePaymentHandleToken": "uyfiuewyrw273uw"
        }
   ```

If the merchant provided the *merchantCustomerId* parameter, then they need store 
the value for the *customerId* parameter in the response in order to use it as the *customer_id* value in customer-related
requests that require it, like [updating a customer](#updatecustomerrequest) or [adding an address to a customer](#createaddressrequest).

The *multiUsePaymentHandleToken* returned in the response to this payment request would be the equivalent of the *paymentHandleToken* returned in the response when you [create a payment handle for a customer](#createcustomerpaymenthandlerequest), 
and used for the same purposes.
   
#### Create the Profile in a Customer Creation Request
   
The second way to create a customer profile is by using the API request to [Create a Customer](#createcustomerrequest). 
The merchant should then store the unique ID provided in Paysafe's response for that particular user.
    ```json
    Response body: {
        "id": "ccb24e28-6e38-47ce-8815-94706c5b608c"
    }
    ```

Either of these methods allow you to create a customer profile for a user &ndash; just save the corresponding
customer ID in your database for that user.

### Creating a Single-Use Customer Token
The Checkout can display existing cards and addresses for a user. To use this functionality,
the merchant needs to make use of the *customerId* (to use as the value for *customer_id* in the endpoint URL) and make an API call to [create a single-use customer token](#createcustomersut). 
This single-use customer token in the response should then be provided as the value for *singleUseCustomerToken* in the [Checkout options](#options)
while invoking the Checkout. In this case, when the checkout is loaded, the user would be able to see their saved payment details. 

The following are the 2 steps are involved.

1. Create a Single-Use Customer Token

   Make an API call to [create a single-use customer token](#createcustomersut), using the *customerId* for that user.
   This generates a single-use customer token &ndash; the field *singleUseCustomerToken* in the response &ndash; which is valid for 15 minutes.
   ```json
   Response Body: {
        ...
        "singleUseCustomerToken": "SPFAB1cA5iwdu48H"
   }
   ```

2. Use the *singleUseCustomerToken* field from the response in step 1 above and provide this value for the *singleUseCustomerToken* parameter in the [Checkout options](#options).

```
<html>
    <head>
        <script src="https://hosted.test.paysafe.com/checkout/v2/paysafe.checkout.min.js"></script>
    </head>

 
    <body>
        <button onclick="checkout()"> Pay $25 </button>
    </body>

    <script>
        function checkout() {
            paysafe.checkout.setup("API Key", {
                "currency": "USD",
                "amount": 10000,
                "singleUseCustomerToken": "SPFAB1cA5iwdu48H",
                "locale": "en_US",
                "customer": {
                    "firstName": "John",
                    "lastName": "Dee",
                    "email": "johndee@paysafe.com",
                    "phone": "1234567890",
                    "dateOfBirth": {
                        "day": 1,
                        "month": 7,
                        "year": 1990
                    }
                },
                "billingAddress": {
                    "nickName": "John Dee",
                    "street": "20735 Stevens Creek Blvd",
                    "street2": "Montessori",
                    "city": "Cupertino",
                    "zip": "95014",
                    "country": "US",
                    "state": "CA"
                },
                "environment": "TEST",
                "merchantRefNum": "1559900597607",
                "canEditAmount": true,
                "paymentMethodDetails": {
                    "paysafecard": {
                        "consumerId": "1232323"
                    },
                    "paysafecash": {
                        "consumerId": "123456"
                    },
                    "sightline": {
                        "consumerId": "123456"
                    },
                    "vippreferred":{
                        "consumerId": "550726575"
                    }
                },
                "payout": true,
                "payoutConfig": {
                    "maximumAmount": 100000
                }
            }, function(instance, error, result) {
                if (result && result.paymentHandleToken) {
                    console.log(result.paymentHandleToken);
                    // make AJAX call to Payments API
                } else {
                    console.error(error);
                    // Handle the error
                }
            }, function(stage, expired) {
                switch(stage) {
                    case "PAYMENT_HANDLE_NOT_CREATED": // Handle the scenario
                    case "PAYMENT_HANDLE_CREATED": // Handle the scenario
                    case "PAYMENT_HANDLE_REDIRECT": // Handle the scenario
                    case "PAYMENT_HANDLE_PAYABLE": // Handle the scenario
                    default: // Handle the scenario
                }
            });
        }
    </script>
</html>
```

When the Checkout is loaded, the customer will be able to see their saved payment details.

### Save Cards for Play+ (Sightline) Deposits

Additional notes on Save Cards feature in Play+ Deposit:
+ The customer can save a card in Play+ deposit (load funds) flow by clicking on 'save my card for future transactions'. However, this card will only be saved if the customer completes a Payment using Play+ wallet balance after the deposit in the same session.
+ If the customer makes multiple deposits using multiple cards and then makes a payment, the last card used to make the deposit is the one that will be saved.
+ When a customer makes a Play+ deposit but uses a different payment method to complete the payment, the card used to make the deposit will not be saved.
+ The save card feature is available in Play+ Deposit and Card Payment. If the customer saves a card in Play+ deposit screen, it will be reflected in the Card Payment screen and vice-versa. 

<a name="paymentswebhooks" title="Payments Webhooks"></a>
# Using Webhooks

A webhook allows you to define an HTTP callback to which a request will be posted when an event occurs that you want to be notified about. 
To configure webhooks, you need to [open a service request](#support) with Paysafe in the Business Portal.

> **Note:** In order to receive webhooks from Paysafe, you must create a callback URL to receive the webhook that is triggered. 
You are responsible for ensuring its continued availability.

## Webhooks Events
You can trigger webhooks for the following events: 

|Event Type|Description|
|----------|-----------|
|PAYMENT_HANDLE_INITIATED | Our system has received the payment handle request and is waiting for the downstream processor’s response. |
|PAYMENT_HANDLE_PROCESSING | The payment handle request is waiting for the authentication. |
|PAYMENT_HANDLE_PAYABLE | The payment handle status is PAYABLE and can be used for the payment call. |
|PAYMENT_HANDLE_COMPLETED | Payments call associated with payment handle are initiated. |
|PAYMENT_HANDLE_FAILED | The payment handle request failed due to either an error or being declined. |
|REGISTRATION_COMPLETED | The payment method registration is completed. |
|REGISTRATION_FAILED | The payment method registration is failed. |
|REGISTRATION_DECLINED | The payment method registration is declined. |
|PAYMENT_PROCESSING | The payment request is being processed. |
|PAYMENT_RECEIVED | Our system has received the payment request and is waiting for the downstream processor’s response. |
|PAYMENT_COMPLETED | The payment request is completed. |
|PAYMENT_HELD | The payment request is placed on hold due to risk considerations. |
|PAYMENT_FAILED | The payment request failed due to either an error or being declined. |
|PAYMENT_CANCELLED | The payment request is fully voided (reversed). |
|SETTLEMENT_RECEIVED | Our system has received the settlement request and is waiting for the downstream processor’s response. |
|SETTLEMENT_PENDING | Our system has received the settlement request, but it has not yet batched. |
|SETTLEMENT_PROCESSING | The settlement batch has started. |
|SETTLEMENT_COMPLETED | The settlement request is completed. |
|SETTLEMENT_FAILED | The settlement request failed due to either an error or being declined. |
|SETTLEMENT_CANCELLED | The settlement request is cancelled. |
|REFUND_PROCESSING | The refund request is being processed. |
|REFUND_RECEIVED | Our system has received the refund request and is waiting for the downstream processor’s response. |
|REFUND_COMPLETED | The refund request is completed. |
|REFUND_PENDING | Our system has received the refund request, but it has not yet batched. |
|REFUND_FAILED | The refund request failed due to either an error or being declined. |
|REFUND_CANCELLED | The refund request is cancelled. |
|VOIDAUTH_RECEIVED | Our system has received the void authorization request and is waiting for the downstream processor’s response. |
|VOIDAUTH_COMPLETED | The void authorization request is completed. |
|VOIDAUTH_PENDING | Our system has received the void authorization request, but it has not yet batched. |
|VOIDAUTH_FAILED | The void authorization request failed due to either an error or being declined. |
|VOIDAUTH_CANCELLED | The void authorization request is cancelled. |
|ORIGINAL_CREDIT_PROCESSING | The credit request is being processed. |
|ORIGINAL_CREDIT_COMPLETED | The credit request is completed. |
|ORIGINAL_CREDIT_PENDING | The credit request is received but is yet to be processed. |
|ORIGINAL_CREDIT_FAILED | The credit request has failed due to either an error or being declined. |
|ORIGINAL_CREDIT_CANCELLED | The credit request is cancelled. |
|ORIGINAL_CREDIT_BATCH_COMPLETED | The batched credit request is completed. |
|ORIGINAL_CREDIT_BATCH_FAILED | The batched credit request is failed. |
|SA_CREDIT_PROCESSING | The credit request is being processed. |
|SA_CREDIT_RECEIVED | Our system has received the credit request and is waiting for the downstream processor’s response. |
|SA_CREDIT_COMPLETED | The credit request is completed. |
|SA_CREDIT_HELD | The credit request is placed on hold due to risk considerations. |
|SA_CREDIT_FAILED | The credit request failed due to either an error or being declined. |
|SA_CREDIT_CANCELLED | The credit request is cancelled. |
|SA_CREDIT_BATCH_FAILED | The batched credit request is failed. |
|SA_CREDIT_BATCH_COMPLETED | The batched credit request is completed. |


## Sample Webhooks Payload
This is an example of a typical webhooks payload you would receive from Paysafe.
In this case, the merchant is receiving a callback notifying them that a Payments call associated with a payment handle has been completed.

```
{
    "accountId": "1009688230",
    "id": "a49ba790-9cc5-4502-9f4a-dccc72460cf1",
    "merchantRefNum": "2e568da7c4643d567d60",
    "amount": 500,
    "usage": "SINGLE_USE",
    "executionMode": "SYNCHRONOUS",
    "currencyCode": "USD",
    "type": "PAYMENT_HANDLE",
    "status": "COMPLETED",
    "paymentType": "CARD"
}
```

## Webhooks Signature

The webhook notification contains a signature header calculated using the following algorithm:

```
digest = HMAC_SHA256 (hmacKey, UTF 8 string containing the JSON webhook request body)

signature = base 64 (digest)
```

The code receiving the webhook needs to repeat this algorithm and compare the value generated with the value received in the header.

Example Header:

```
Signature: UMaQ4h635wUc4hp60Z5ASBC/5UtqKybAldOkLv6ngc0=
```

>**Note:** You will receive the *hmackey* when you [open a webhooks service request](#support) in the Paysafe Business Portal.

## Some Notes on Webhooks

+ When the status of one of your transaction requests changes, Paysafe immediately sends a callback to your webhooks endpoint URL to inform you of the status change.
+ To acknowledge the receipt of a webhook, Paysafe expects to get an HTTP status of 200 from your endpoint. 
In case we receive any other HTTP status code, we will assume that you have not received the webhook and will attempt to resend it at a later time.
+ If the callback for that transaction request status change event fails (i.e., Paysafe does not get an acknowledgment of receipt with an HTTP Status Code of 200), 
Paysafe will make a maximum of 10 additional attempts to send a callback to that URL until successfully received – twice daily for 5 days.
+ Because Paysafe does not have a notification method to alert you when callbacks are not reaching your endpoint URL, you should make sure that there is sustained availability of your endpoint.
+ All endpoint URLs should use HTTPS/SSL to ensure security.

<a name="globalinvalidcharacters" title="Global Invalid Characters"></a>
# Global Invalid Characters

You must not include any of the characters in the following table as values in any of your request parameters. If you do, your request will result in an error.

|    Character    |    HEX    |    Description                     |
|-----------------|-----------|------------------------------------|
| "               | 22        | Double quotes (or speech marks)    |
| ;               | 3B        | Semicolon                          |
| ^               | 5E        | Caret, circumflex                  |
| *               | 2A        | Asterisk                           |
| <               | 3C        | Less than (or open angled bracket) |
| /               | 2F        | Slash or divide                    |
| [               | 5B        | Opening bracket                    |
| ]               | 5D        | Closing bracket                    |
| \               | 5C        | Backslash                          |

<a name="pagination" title="Pagination"></a>
# Pagination

In the case where an API GET request returns multiple results, Paysafe returns the first 10 records by default and uses HATEOAS links to provide page navigation. In addition to the default behavior, it is also possible to control the number of results and starting point by passing in query parameters as follows:

|    Name       | Description   |
|---            |---            |
| limit         | This is the total number of records to return. Max = 50. Default = 10. |
| offset        | This is the starting position, where 0 is the first record. Default = 0. |
| startDate     | This is the start date in UTC. Default = 30 days before the *endDate*.|
| endDate       | This is the end date in UTC. Default = current date and time. |

<a name="testinginstructions" title="Testing Instructions"></a>
# Testing Instructions

The Paysafe Test environment can be used to test websites or applications without running transactions through the Production (live) processing platform. 
Payment transactions processed in the Test environment (e.g., credit card payments) are not sent to the banking network, but through a simulator. 
Depending on the information provided with the transaction request, the simulator returns either a successful (approved) or failed (declined) response.

With the Paysafe Payments API you can test the following:
- Verify support for all the operation types that you require.
- Review all common errors as well as errors that may occur for each operation, and ensure your application can handle them.
- Verify the lengths and format for all attributes you send.

<a name="applytestaccount" title="Applying for a Test Account"></a>
## Applying for a Test Account
For access to Test accounts and credentials, please contact your business relationship manager or reach out to <integrations@paysafe.com>. 
Your Test account will provide you with access to a Test version of the Paysafe [Business Portal](https://merchant.test.paysafe.com/portal#/login), where you can view the status of your Test transactions. 

## Test Cards

You can use any of the following test card numbers to test the Paysafe Payments API.

 >**Note:** Do not use real card numbers or other payment instrument details in the Test environment as it is not compliant with Payment Card Industry Data Security Standards (PCI-DSS), 
 and does not protect cardholder/payee information. Any upload of real cardholder data is strictly prohibited, as described in the [Terms of Use](#legal).

| Card Type     |Card Number            |3D Secure Enabled      |Issuing Country    |
|---            |---                    |---                    |---                |
|Visa           |4530910000012345       |No                     |Canada             |
|Visa           |4510150000000321       |No                     |Canada             |
|Visa           |4500030000000004       |Yes                    |Canada             |
|Visa           |4003440000000007       |Yes                    |Canada             |
|Visa           |4515031000000005       |Yes                    |Canada             |
|Visa           |4538261230000003       |Yes                    |Canada             |
|Visa           |4037112233000001       |No                     |US                 |
|Visa           |4037111111000000       |Yes                    |US                 |
|Mastercard     |5191330000004415       |No                     |Canada             |
|Mastercard     |5457490000008763       |No                     |Canada             |
|Mastercard     |5258110000000005       |Yes                    |Canada             |
|Mastercard     |5192810000000009       |Yes                    |Canada             |
|Mastercard     |5100400000000000       |No                     |US                 |
|Mastercard     |5200400000000009       |Yes                    |US                 |

### Expiry Date
When using the test card numbers, you can use any date in the future for the expiry date (e.g., 11/22).

### CVV
You can use any 3-digit number for the CVV in the merchant Test environment. However, if you wish to generate a specific CVV match response, you will need to use the following values.

| CVV Value | CVV Response Code | Description      |
|-----------|-------------------|------------------|
| 111       | MATCH             | Match            |
| 222       | NOT_PROCESSED     | Not processed    |
| 555       | UKNOWN            | Unknown response |
| 666       | NO_MATCH          | No match         |

## Simulating Authorization Responses

You can simulate the response to a card authorization request by specifying different amounts under $1.00 in the request. 
For regular testing, do not use amounts less than $1.00 (100 in minor units) as this will trigger different decline or delay cases.

| Amount (Minor Units) | HTTP Status Code | Error Code | Response                                                                                                           |
|------------------|------------------|------------|--------------------------------------------------------------------------------------------------------------------|
| 1                | 200              |            | Approved                                                                                                           |
| 4                | 402              | 3015       | The bank has requested that you process the transaction manually by calling the card holder's credit card company. |
| 5                | 402              | 3009       | Your request has been declined by the issuing bank.                                                                |
| 6                | 500              | 1007       | Clearing house timeout (although the simulator returns immediately; if delay is desired, see amount 96).           |
| 11               | 402              | 3022       | The card has been declined due to insufficient funds.                                                              |
| 12               | 402              | 3023       | Your request has been declined by the issuing bank due to its proprietary card activity regulations.               |
| 13               | 402              | 3024       | Your request has been declined because the issuing bank does not permit the transaction for this card.             |
| 20               | 500              | 1007       | An internal error occurred.                                                                                        |
| 23               | 402              | 4002       | The transaction was declined by our Risk Management department.                                                    |
| 24               | 402              | 3007       | Your request has failed the AVS check.                                                                             |
| 25               | 402              | 4001       | The card number or email address associated with this transaction is in our negative database.                     |
| 90               | 200              |            | Approved with 5-second delay                                                                                       |
| 91               | 200              |            | Approved with 10-second delay                                                                                      |
| 92               | 200              |            | Approved with 15-second delay                                                                                      |
| 93               | 200              |            | Approved with 20-second delay                                                                                      |
| 94               | 200              |            | Approved with 25-second delay                                                                                      |
| 95               | 200              |            | Approved with 30-second delay                                                                                      |
| 96               | 500              | 1007       | Declined with 35-second delay. Transaction timed out after 30 seconds.                                             |
| 100              | 200              |            | Approved                                                                                                           |

## 3D Secure Results and Liability Shift

When 3D Secure is used in conjunction with an authorization request through the Payments API — requiring the customer to authenticate the card used in the transaction — a major advantage to the merchant is that 
with disputed payments the financial liability can shift from the merchant to the card issuer. 
Many factors affect whether this liability shift occurs, so merchants should contact their account manager for advice.

| PARes status code | Description                | Recommendation                                                  | Note                             |
|-------------------|----------------------------|-----------------------------------------------------------------|----------------------------------|
| Y                 | Authentication successful  | Proceed with authorization                                      | Cardholder passed authentication |
| A                 | Authentication attempted   | Proceed with authorization                                      | Liability shift in most cases    |
| N                 | Authentication failed      | Do not proceed with authorization                               | Cardholder failed authentication |
| U                 | Authentication unavailable | Decision to proceed with authorization at merchant's discretion | No liability shift               |
| E                 | Error                      | Do not proceed with authorization                               | No liability shift               |

<a name="goinglive" title="Going Live Payments API"></a>
# Going Live
## Test and Production Accounts
Test accounts enable you to process API transactions that mirror the functionality on the Production environment. 
Once you are satisfied with your integration to the Test environment, you will need to repeat any configuration changes made to your Test account on your Production account.

You can choose to enable any payment method/currency combination in your Production account by completing the onboarding application form, which you can get from your business relationship manager.

> **Note:** You will need to use [different API endpoints](#urls) and [authentication credentials](#apikey) to connect to each Paysafe environment &ndash; Test and Production.
You will not be able to use your Test credentials to process transaction requests in the Production environment, and vice versa.

<a name="isostandards" title="ISO Standards"></a>
# ISO Standards

<a name="currencycodes" title="Currency Codes"></a>
## Currency Codes

**Note**
 * The table below lists the currencies in which transaction requests are processed, but note that they may be settled in a different currency.
 * Not all currencies are supported by all banks. Contact your account manager for more information about which currencies are supported for your merchant account.

|Currency |Code |
|--- |--- |
|Argentine Peso |ARS |
|Australian Dollar  |AUD |
|Azerbaijanian Manat    |AZN |
|Bahraini Dinar |BHD  |
|Belarusian Ruble   |BYR  |
|Bolivian Boliviano |BOB  |
|Bosnia and Herzegovina Convertible Mark |BAM  |
|Brazilian Real |BRL  |
|Bulgarian Lev  |BGN  |
|Canadian Dollar    |CAD  |
|Chilean Peso   |CLP  |
|China Yuan Renminbi    |CNY  |
|Columbian Peso |COP  |
|Costa Rican Colon  |CRC  |
|Croatian Kuna  |HRK  |
|Czech Koruna   |CZK  |
|Danish Krone   |DKK  |
|Dominican Peso |DOP  |
|East Caribbean Dollar  |XCD  |
|Egyptian Pound |EGP  |
|Ethiopian Birr |ETB  |
|Euro   |EUR  |
|Fiji Dollar    |FJD  |
|Georgian Lari  |GEL  |
|Guatemala Quetzal  |GTQ  |
|Haiti Goude    |HTG  |
|Honduran Lempira   |HNL  |
|Hong Kong Dollar   |HKD  |
|Hungarian Forint   |HUF  |
|Iceland Krona  |ISK  |
|Indian Rupee   |INR  |
|Indonesia Rupiah   |IDR  |
|Iranian Rial   |IRR  |
|Jamaican Dollar    |JMD  |
|Japanese Yen   |JPY  |
|Jordanian Dinar    |JOD  |
|Kazakhstan Tenge   |KZT  |
|Kenyan Shilling    |KES  |
|Korean Won |KRW  |
|Kuwaiti Dinar  |KWD  |
|Latvian Lats   |LVL  |
|Lebanese Pound |LBP  |
|Libyan Dinars  |LYD  |
|Lithuanian Litas   |LTL  |
|Malawi Kwacha  |MWK  |
|Malaysian Ringgit  |MYR  |
|Mauritius Rupee    |MUR  |
|Mexican Peso   |MXN  |
|Moldovan Leu   |MDL  |
|Moroccan Dirham    |MAD  |
|New Israeli Shekel |ILS  |
|New Zealand Dollar |NZD  |
|Nigerian Naira |NGN  |
|Norwegian Krone    |NOK  |
|Omani Rial |OMR  |
|Pakistan Rupee |PKR  |
|Panamanian Balboa  |PAB  |
|Paraguayan Guarani |PYG  |
|Peruvian Sol   |PEN  |
|Philippine Peso    |PHP  |
|Polish Zloty   |PLN  |
|Pound Sterling |GBP  |
|Qatari Rial    |QAR  |
|Romanian New Leu   |RON  |
|Russian Ruble  |RUB  |
|Saudi Arabian Riyal    |SAR  |
|Serbian Dinar  |RSD  |
|Singapore Dollar   |SGD  |
|South African Rand |ZAR  |
|Sri Lanka Rupee    |LKR  |
|Swedish Krona  |SEK  |
|Swiss Franc    |CHF  |
|Syrian Pound   |SYP  |
|Taiwan New Dollar  |TWD  |
|Thai Baht  |THB  |
|Trinidad and Tobago Dollar |TTD  |
|Tunisian Dinar |TND  |
|Turkish Lira   |TRY  |
|Ukranian Hryunia   |UAH  |
|UAE Dirham |AED  |
|Uruguay Peso   |UYU  |
|US Dollar  |USD  |
|Venezuelan Bolivar |VEF  |
|Viet Nam Dong  |VND  |

<a name="provincecodes" title="Province Codes"></a>
## Province Codes

|Province               |Code   |
|---                    |---    |
|Alberta                |AB     |
|British Columbia       |BC     |
|Manitoba               |MB     |
|New Brunswick          |NB     |
|Newfoundland           |NL     |
|Nova Scotia            |NS     |
|Northwest Territories  |NT     |
|Nunavut                |NU     |
|Ontario                |ON     |
|Prince Edward Island   |PE     |
|Quebec                 |QC     |
|Saskatchewan           |SK     |
|Yukon                  |YT     |

<a name="statecodes" title="State Codes"></a>
## State Codes

|State                  |Code   |
|---                    |---    |
|Alabama                |AL     |
|Alaska                 |AK     |
|American Samoa         |AS     |
|Arizona                |AZ     |
|Arkansas               |AR     |
|Armed Forces Americas  |AA     |
|Armed Forces Europe    |AE     |
|Armed Forces Pacific   |AP     |
|California             |CA     |
|Colorado               |CO     |
|Connecticut            |CT     |
|Delaware               |DE     |
|District of Columbia   |DC     |
|Florida                |FL     |
|Georgia                |GA     |
|Guam                   |GU     |
|Hawaii                 |HI     |
|Idaho                  |ID     |
|Illinois               |IL     |
|Indiana                |IN     |
|International          |IT     |
|Iowa                   |IA     |
|Kansas                 |KS     |
|Kentucky               |KY     |
|Louisiana              |LA     |
|Maine                  |ME     |
|Maryland               |MD     |
|Massachusetts          |MA     |
|Michigan               |MI     |
|Minnesota              |MN     |
|Mississippi            |MS     |
|Missouri               |MO     |
|Montana                |MT     |
|Nebraska               |NE     |
|Nevada                 |NV     |
|New Hampshire          |NH     |
|New Jersey             |NJ     |
|New Mexico             |NM     |
|New York               |NY     |
|North Carolina         |NC     |
|North Dakota           |ND     |
|Northern Mariana Is.   |MP     |
|Ohio                   |OH     |
|Oklahoma               |OK     |
|Oregon                 |OR     |
|Palau                  |PW     |
|Pennsylvania           |PA     |
|Puerto Rico            |PR     |
|Rhode Island           |RI     |
|South Carolina         |SC     |
|South Dakota           |SD     |
|Tennessee              |TN     |
|Texas                  |TX     |
|U.S. Virgin Islands    |VI     |
|United States Federal  |US     |
|Utah                   |UT     |
|Vermont                |VT     |
|Virginia               |VA     |
|Washington             |WA     |
|West Virginia          |WV     |
|Wisconsin              |WI     |
|Wyoming                |WY     |


<a name="countrycodes" title="Country Codes"></a>
## Country Codes
| Country                       | Code |
|---                                |---       |
| Afghanistan                       | AF |
| Åland Islands                     | AX |
| Albania                           | AL |
| Algeria                           | DZ |
| American Samoa                    | AS |
| Andorra                           | AD |
| Angola                            | AO |
| Anguilla                          | AI |
| Antarctica                        | AQ |
| Antigua and Barbuda               | AG |
| Argentina                         | AR |
| Armenia                           | AM |
| Aruba                             | AW |
| Australia                         | AU |
| Austria                           | AT |
| Azerbaijan                        | AZ |
| Bahamas                           | BS |
| Bahrain                           | BH |
| Bangladesh                        | BD |
| Barbados                          | BB |
| Belarus                           | BY |
| Belgium                           | BE |
| Belize                            | BZ |
| Benin                             | BJ |
| Bermuda                           | BM |
| Bhutan                            | BT |
| Bolivia                           | BO |
| Bonaire, Sint Eustatius and Saba  | BQ |
| Bosnia and Herzegovina            | BA |
| Botswana                          | BW |
| Bouvet Island                     | BV |
| Brazil                            | BR |
| British Indian Ocean Territory    | IO |
| Brunei Darussalam                 | BN |
| Bulgaria                          | BG |
| Burkina Faso                      | BF |
| Burundi                           | BI |
| Cambodia                          | KH |
| Cameroon                          | CM |
| Canada                            | CA |
| Cape Verde                        | CV |
| Cayman Islands                    | KY |
| Central African Republic          | CF |
| Chad                              | TD |
| Chile                             | CL |
| China                             | CN |
| Christmas Island                  | CX |
| Cocos (Keeling) Islands           | CC |
| Colombia                          | CO |
| Comoros                           | KM |
| Congo                             | CG |
| Congo, Democratic Republic of     | CD |
| Cook Islands                      | CK |
| Costa Rica                        | CR |
| Côte D’Ivoire                     | CI |
| Croatia                           | HR |
| Cuba                              | CU |
| Curaçao                           | CW |
| Cyprus                            | CY |
| Czech Republic                    | CZ |
| Denmark                           | DK |
| Djibouti                          | DJ |
| Dominica                          | DM |
| Dominican Republic                | DO |
| Ecuador                           | EC |
| Egypt                             | EG |
| El Salvador                       | SV |
| Equatorial Guinea                 | GQ |
| Eritrea                           | ER |
| Estonia                           | EE |
| Ethiopia                          | ET |
| Falkland Islands                  | FK |
| Faroe Islands                     | FO |
| Fiji                              | FJ |
| Finland                           | FI |
| France                            | FR |
| French Guiana                     | GF |
| French Polynesia                  | PF |
| French Southern Territories       | TF |
| Gabon                             | GA |
| Gambia                            | GM |
| Georgia                           | GE |
| Germany                           | DE |
| Ghana                             | GH |
| Gibraltar                         | GI |
| Greece                            | GR |
| Greenland                         | GL |
| Grenada                           | GD |
| Guadeloupe                        | GP |
| Guam                              | GU |
| Guatemala                         | GT |
| Guernsey                          | GG |
| Guinea                            | GN |
| Guinea-Bissau                     | GW |
| Guyana                            | GY |
| Haiti                             | HT |
| Heard and McDonald Islands        | HM |
| Honduras                          | HN |
| Hong Kong                         | HK |
| Hungary                           | HU |
| Iceland                           | IS |
| India                             | IN |
| Indonesia                         | ID |
| Iran  (Islamic Republic of)       | IR |
| Iraq                              | IQ |
| Ireland                           | IE |
| Isle of Man                       | IM |
| Israel                            | IL |
| Italy                             | IT |
| Jamaica                           | JM |
| Japan                             | JP |
| Jersey                            | JE |
| Jordan                            | JO |
| Kazakhstan                        | KZ |
| Kenya                             | KE |
| Kiribati                          | KI |
| Korea, Democratic People’s Republic | KP |
| Korea, Republic of                | KR |
| Kuwait                            | KW |
| Kyrgyzstan                        | KG |
| Lao People’s Democratic Republic  | LA |
| Latvia                            | LV |
| Lebanon                           | LB |
| Lesotho                           | LS |
| Liberia                           | LR |
| Libyan Arab Jamahiriya            | LY |
| Liechtenstein                     | LI |
| Lithuania                         | LT |
| Luxembourg                        | LU |
| Macau                             | MO |
| Macedonia                         | MK |
| Madagascar                        | MG |
| Malawi                            | MW |
| Malaysia                          | MY |
| Maldives                          | MV |
| Mali                              | ML |
| Malta                             | MT |
| Marshall Islands                  | MH |
| Martinique                        | MQ |
| Mauritania                        | MR |
| Mauritius                         | MU |
| Mayotte                           | YT |
| Mexico                            | MX |
| Micronesia, Federated States of   | FM |
| Moldova, Republic of              | MD |
| Monaco                            | MC |
| Mongolia                          | MN |
| Montenegro                        | ME |
| Montserrat                        | MS |
| Morocco                           | MA |
| Mozambique                        | MZ |
| Myanmar                           | MM |
| Namibia                           | NA |
| Nauru                             | NR |
| Nepal                             | NP |
| New Caledonia                     | NC |
| New Zealand                       | NZ |
| Nicaragua                         | NI |
| Niger                             | NE |
| Nigeria                           | NG |
| Niue                              | NU |
| Norfolk Island                    | NF |
| Northern Mariana Islands          | MP |
| Norway                            | NO |
| Oman                              | OM |
| Pakistan                          | PK |
| Palau                             | PW |
| Palestinian Territory, Occupied   | PS |
| Panama                            | PA |
| Papua New Guinea                  | PG |
| Paraguay                          | PY |
| Peru                              | PE |
| Philippines                       | PH |
| Pitcairn                          | PN |
| Poland                            | PL |
| Portugal                          | PT |
| Puerto Rico                       | PR |
| Qatar                             | QA |
| Reunion                           | RE |
| Romania                           | RO |
| Russian Federation                | RU |
| Rwanda                            | RW |
| Saint Barthélemy                  | BL |
| Saint Helena                      | SH |
| Saint Kitts and Nevis             | KN |
| Saint Lucia                       | LC |
| Saint Martin                      | MF |
| Saint Vincent and the Grenadines  | VC |
| Samoa                             | WS |
| San Marino                        | SM |
| Sao Tome and Principe             | ST |
| Saudi Arabia                      | SA |
| Senegal                           | SN |
| Serbia                            | RS |
| Seychelles                        | SC |
| Sierra Leone                      | SL |
| Singapore                         | SG |
| Sint Maarten                      | SX |
| Slovakia (Slovak Republic)        | SK |
| Slovenia                          | SI |
| Solomon Islands                   | SB |
| Somalia                           | SO |
| South Africa                      | ZA |
| South Georgia and the South Sandwich Islands | GS |
| South Sudan                       | SS |
| Spain                             | ES |
| Sri Lanka                         | LK |
| St. Pierre and Miquelon           | PM |
| Sudan                             | SD |
| Suriname                          | SR |
| Svalbard and Jan Mayen Islands    | SJ |
| Swaziland                         | SZ |
| Sweden                            | SE |
| Switzerland                       | CH |
| Syrian Arab Republic              | SY |
| Taiwan                            | TW |
| Tajikistan                        | TJ |
| Tanzania, United Republic of      | TZ |
| Thailand                          | TH |
| The Netherlands                   | NL |
| Timor-Leste                       | TL |
| Togo                              | TG |
| Tokelau                           | TK |
| Tonga                             | TO |
| Trinidad and Tobago               | TT |
| Tunisia                           | TN |
| Turkey                            | TR |
| Turkmenistan                      | TM |
| Turks and Caicos Islands          | TC |
| Tuvalu                            | TV |
| Uganda                            | UG |
| Ukraine                           | UA |
| United Arab Emirates              | AE |
| United Kingdom                    | GB |
| United States                     | US |
| United States Minor Outlying Islands | UM |
| Uruguay                           | UY |
| Uzbekistan                        | UZ |
| Vanuatu                           | VU |
| Vatican City State (Holy See)     | VA |
| Venezuela                         | VE |
| Vietnam                           | VN |
| Virgin Islands (British)          | VG |
| Virgin Islands (U.S.)             | VI |
| Wallis and Futuna Islands         | WF |
| Western Sahara                    | EH |
| Yemen                             | YE |
| Zambia                            | ZM |
| Zimbabwe                          | ZW |

# Common Objects

<a name="accorddobject" title="AccordD Object"></a>
## accordD
|Element            |Type                       |Description                        |
|---                |---                        |---       |
|financingType      |enum                       |This is the type of financing offered.<ul><li>DEFERRED_PAYMENT &ndash; Deferred payment financing</li><li>EQUAL_PAYMENT &ndash; Equal payment financing</li></ul>|
|plan               |string<br/>`length<=3`     |This is the plan number for this financing transaction.|
|gracePeriod        |number<br/>`max=99`        |This is the grace period, in months, associated with deferred payment transactions.|
|term               |number<br/>`max=99`        |This is the number of payments, in months, for equal payment transactions.|

```apib
    {
    "accordD":{
        "financingType":"DEFERRED_PAYMENT",
        "plan":"123",
        "gracePeriod":"12"
    }
    }
```
<a name="achobject" title="ACH Object"></a>
## ach
|Element            |Type                       |Required |Description                        |
|---                |---                        |--- |---       |
|accountHolderName  |string <br/>`length<=22`   |Mandatory|This is the name of the customer or company. |
|payMethod          |enum                       |Read Only|This is the payment type. Possible values are:<ul><li>WEB (Personal bank accounts only)</li><li>TEL (Personal bank accounts only)</li><li>PPD (Personal bank accounts only)</li><li>CCD (Business bank accounts only)</li></ul>|
|accountType        |enum                       |Read Only|This is the bank account type. Possible values are:<ul><li>SAVINGS</li><li>CHECKING</li><li>LOAN</li></ul>|
|accountNumber      |string<br/>`length=4-17`   |Mandatory|This is the bank account number.|
|routingNumber      |string<br/>`length=9`      |Mandatory|For USD accounts, this is the 9-digit routing number of the bank.|
|lastDigits         |string<br/>`length=2`      |Read Only|This is returned in response. It contains only last 2 digits of bank account.|

```apib
            {
           "ach": {
             "accountHolderName": "XYZ Company",
             "payMethod": "WEB",
             "accountType": "CHECKING", 
             "accountNumber": "988772192", 
             "routingNumber": "211589828",
                }
            }
```

<a name="addressesobject" title="Addresses Object"></a>
## addresses
|Element            |Type                       |Required |Description    |
|---                |---                        |---|---       |
|id                 |string<br/>`length<=36`    |Read Only|This is the ID for the request.|
|nickName           |string<br/>`length<=50`    |Optional|This is an alias defined by the customer for this address (e.g., "home address").|
|street             |string<br/>`length<=50`    |Mandatory|This is the first line of the customer's street address.|
|street2            |string<br/>`length<=50`    |Optional|This is the second line of the customer's street address, if required (e.g., apartment number).|
|city               |string<br/>`length<=40`    |Mandatory|This is the city where the address is located.|
|country            |string<br/>`length=2`      |Mandatory|This is the country where the address is located. See [Country Codes](#countrycodes).|
|state              |string<br/>`length<=40`    |Optional|This is the state/province/region in which the customer lives.<br/>For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions. |
|zip                |string<br/>`length<=10`    |Mandatory|This is the zip, postal, or post code of the customer's address.|
|phone              |string<br/>`length<=40`    |Optional|This is the phone number to contact the recipient at this address, if it is different from the phone number in the customer.|
|status             |enum                       |Read Only|This is the status of the address. Possible values are:<ul><li>ACTIVE</li><LI>INITIAL</li></ul>|
|defaultShippingAddressIndicator|boolean        |Conditional|Flag to mark this address as the default shipping address.|

```apib
            {
              "nickName":"home",
              "street":"100 Queen Street West",
              "street2":"Unit 201",
              "city":"Toronto",
              "country":"CA",
              "state":"ON",
              "zip":"M5H 2N2",
              "phone":"647-788-3901",
              "defaultShippingAddressIndicator": true
            }
```

<a name="authenticationobject" title="Authentications Object"></a>
## authentication

|Element                |Type                           |Required|Description|
|---                    |---                            |---|---       |
|id                     |string<br/>`length<=36`        |Read Only|This is the ID returned in the response. |
|eci                    |number                         |Read Only|This is the E-Commerce Indicator (ECI). This value will be returned only on payer authentication transactions, or for enrollments where the issuer is non-participating and the card scheme supports it. This value must be appended to the authorization request, where it enables the interchange benefits granted to merchants processing payer Authentication transactions.<br/>**Visa**<br/><ul><li>5 &ndash; Identifies a successfully authenticated transaction.</li><li>6 &ndash; Identifies an attempts authenticated transaction.</li><li>7 &ndash; Identifies a non-authenticated transaction.</li></ul><br/>**Mastercard**<br/><br/><ul><li>1 &ndash; Identifies a non-authenticated transaction.</li><li>2 &ndash; Identifies a successfully authenticated transaction.</li></ul>|
|cavv                   |string<br/>`length<=80`        |Read Only|This is the Cardholder Authentication Verification Value, indicating that the transaction has been authenticated. This value should be appended to the authorization request signifying that the transaction has been successfully authenticated.|
|xid                    |string<br/>`length<=40`        |Read Only|This is the transaction identifier returned by the card issuer.|
|status                 |enum                           |Read Only|This is the status of the Enrollment Lookup request. Possible values are:<br/><ul><li>COMPLETED - The transaction has been completed.</li><li>FAILED - The authentication request failed. Check the error code for details.</li></ul>|
|merchantRefNum         |string<br/>`length<=255`       |Read Only|This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|threeDEnrollment       |enum                           |Read Only|This indicates whether or not the cardholder is enrolled in 3D Secure. Possible values are:<br/><ul><li>Y &ndash; Cardholder authentication available</li><li>N &ndash; Cardholder not enrolled in authentication</li><li>U &ndash; Cardholder authentication unavailable</li></ul>|
|threeDResult           |enum                           |Read Only|This indicates the outcome of the Authentication.<br/><ul><li>Y &ndash; The cardholder successfully authenticated with their card issuer.</li><li>A &ndash; The cardholder authentication was attempted.</li><li>N &ndash; The cardholder failed to successfully authenticate with their card issuer.</li><li>U &ndash; Authentication with the card issuer was unavailable.</li><li>E &ndash; An error occurred during authentication.</li></ul>|
|signatureStatus        |enum                           |Read Only|This is the 3D Secure signature verification result value.<br/><ul><li>Y &ndash; All transaction and signature checks satisfied.</li><li>N &ndash; At least one transaction or signature check failed.</li></ul>|
|error                  |[complex](#errorobject)        |Read Only|This is the error details of authentication. |

```apib
  {
  "authentication":{
    "eci":5,
    "cavv":"AAABCIEjYgAAAAAAlCNiENiWiV+=",
    "xid":"OU9rcTRCY1VJTFlDWTFESXFtTHU=",
    "threeDEnrollment":"Y",
    "threeDResult":"Y",
    "signatureStatus":"Y"
  }
  }
```


<a name="billingdetailsobject" title="Billing Details Object"></a>
## billingDetails

|Element            |Type                       |Required|Description                        |
|---                |---                        |---|---       |
|id                 |string<br/>`length<=36`    |Read Only|This is the ID of the billing address, returned in the response. |
|nickName           |string<br/>`length<=50`    |Optional|This is the nickname the merchant has for the billing address. |
|street             |string<br/>`length<=50`    |Mandatory|This is the first line of the customer's street address.|
|street2            |string<br/>`length<=50`    |Optional|This is the second line of the customer's street address, if required (e.g., apartment number).|
|city               |string<br/>`length<=40`    |Mandatory|This is the city where the address is located.|
|state              |string<br/>`length<=40`    |Optional|This is the state/province/region in which the customer lives.<br/>For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions.|
|zip                |string<br/>`length<=10`    |Mandatory|This is the zip, postal, or post code of the customer's address.|
|country            |string<br/>`length=2`      |Mandatory|This is the country where the address is located. See [Country Codes](#countrycodes).|

```apib
{
    "billingDetails": {
        "nickName": "home",
        "street": "100 Queen Street West",
        "street2": "Unit 201",
        "city": "Toronto",
        "state": "ON",
        "zip": "M5H 2N2",
        "country": "CA"
    }
}
```


<a name="cardobject" title="card Object"></a>
## card

|Element            |Type                       |Required|Description|
|---                |---                        |---|---                                |
|cardNum            |string <br/>`length=8-20`  |Mandatory|This is the card number used for the request. |
|lastDigits         |string<br/>`length=4`      |Read Only|This is the last four digits of the card used for the request, returned in the response.|
|cardExpiry         |[cardExpiry](#cardexpiryobject)|Mandatory|This is the card's expiry date.|
|cvv                |string<br/>`length=3-4`    |Conditional|This is the 3- or 4-digit security code that appears on the card following the card number.|
|holderName         |string<br/>`length<=160`   |Optional|This is the name of the card holder. |
|nickName           |string<br/>`length<=50`    |Optional|This is the nickname the merchant has for the card holder. |
|cardType           |enum                       |Read Only|This is the type of card used for the request, returned in the response. Possible values are:<br/><ul><li>AM &ndash; American Express</li><li>DI &ndash; Discover</li><li>JC &ndash; JCB</li><li>MC &ndash; Mastercard</li><li>MD &ndash; Maestro</li><li>SO &ndash; Solo</li><li>VI &ndash; Visa</li><li>VD &ndash; Visa Debit</li><li>VE &ndash; Visa Electron</li></ul>
|cardBin            |string<br/>`length=6`      |Read Only|This is the card BIN (typically the first 6 digits).|

```apib
    {
    "card": {
        "cardNum": "4111111111111111",
        "cardExpiry": {
            "month": 2,
            "year": 2019
        }
    }
    }
```


<a name="cardexpiryobject" title="cardExpiry Object"></a>
## cardExpiry

|Element                 |Type                   |Required|Description|
|---                     |---                    |----|---|
|month                   |number<br/>`length=2`  |Mandatory|This is the card expiry month. |
|year                    |number<br/>`length=4`  |Mandatory|This is the card expiry year.|

```apib
    {
    "cardExpiry":{
        "month": "12",
        "year": "2020"
    }
    }
```

<a name="customersobject" title="Customer Object"></a>
## customer
|Element            |Type                               |Required|Description    |
|---                |---                                |---|---            |
|id                 |string <br/>`length<=36`           |Read Only|This is the ID returned in the response.|
|status             |enum                               |Read Only|This is the status of the customer. Possible values are:<br/><ul><li>INITIAL</li><li>ACTIVE</li></ul><br/>By default the system automatically sets the customer status to an ACTIVE state. If you want to prevent the customer from being used for payments, you can set the status to an INITIAL state (e.g., in cases where you first want to validate the customer).|
|merchantCustomerId |string <br/>`length<=100`          |Mandatory|This is a customer ID that the merchant provides with the request for their own internal customer identification. This value must be unique for each customer belonging to a merchant.|
|locale             |enum                               |Mandatory|This indicates the language of the customer. Possible values are:<ul><li>en_US</li><li>fr_CA</li><li>en_GB</li></ul>
|firstName          |string <br/>`length<=80`           |Optional|This is the customer’s first name. |
|middleName         |string <br/>`length<=80`           |Optional|This is the customer’s middle name. |
|lastName           |string <br/>`length<=80`           |Optional|This is the customer’s last name. |
|dateOfBirth        |[dateOfBirth](#dateofbirthobject)  |Optional|This is the customer's date of birth.|
|ip                 |string<br/>`length<=46`            |Optional|This is the customer’s IP address.|
|gender             |enum                               |Optional|This is the customer’s gender. Possible values are:<ul><li>M (male)</li><li>F (female)</li></ul>
|nationality        |string<br/>`length<=30`            |Optional|This is the customer’s nationality.|
|email              |string<br/>`length<=255`           |Optional|This is the customer's email address.|
|phone              |string<br/>`length<=40`            |Optional|This is the customer's phone number.|
|cellPhone          |string<br/>`length<=40`            |Optional|This is the customer's cell phone number.|
|addresses          |[addresses](#addressesobject)      |Optional|These are the addresses associated with this customer.|
|paymentHandles     |[paymentHandles](#paymenthandleobject) |Optional|These are the payment handles associated with this customer.|

```apib
            {
              "merchantCustomerId":"mycustomer1",
              "locale" : "en_US",
              "firstName" : "John",
              "lastName" : "Smith",
              "email" : "john.smith@somedomain.com",
              "phone" : "713-444-5555"
             }
```

<a name="dateofbirthobject" title="Date of Birth Object"></a>
## dateOfBirth
|Element            |Type                           |Required|Description    |
|---                |---                            |---|---            |
|year               |number<br/>`length=4 min=1900` |Mandatory|This is the year of birth.|
|month              |number<br/>`length=2 max=12`   |Mandatory|This is the month of birth.|
|day                |number<br/>`length=2 max=31`   |Mandatory|This is the day of birth.|

```apib
            { 
               "dateOfBirth": {
                  "year": 1980,
                  "month": 12,
                  "day": 25
                }
            }
```
<a name="eftobject" title="EFT Object"></a>
## eft
|Element            |Type                       |Required|Description                        |
|---                |---                        |---|---       |
|accountHolderName  |string <br/>`length<=30`   |Mandatory|This is the name of the customer or company. |
|accountNumber      |string<br/>`length=4-12`   |Mandatory|This is the bank account number.|
|transitNumber      |string<br/>`length=5`      |Mandatory|This is the 5-digit transit number of the customer's bank branch.|
|institutionId      |string<br/>`length=3`      |Optional|This is the 3-digit institution ID of the customer’s bank branch. |
|lastDigits         |string<br/>`length=2`      |Read Only|This is returned in response. It contains only last 2 digits of bank account.|

```apib
            {
             "eft": {
                "accountHolderName": "XYZ Company",
                "accountNumber": "336612",
                "transitNumber": "22446",
                "institutionId": "001",
                    }
            }
```


<a name="errorobject" title="error Object"></a>
## error
|Element            |Type       |Required|Description                        |
|---                |---        |---|---                                |
|code               |string     |Read Only|The error code. Also shown in the X-Application-Status-Code response header.            |
|message            |string     |Read Only|A description of the error.                 |
|details            |array      |Read Only|Details of any parameter value errors.       |
|fieldErrors        |array      |Read Only|If applicable, this is a list of fields that have issues.|

```apib
   {
   "error":{  
      "code":"5270",
      "message":"The credentials provided with the request do not have permission to access the data requested.",
      "details":[  
         "access to {stpAccount:1001076700} denied"
      ],
      "fieldErrors":[  
         {  
            "field":"street",
            "error":"Unexpected characters"
         }
      ]
   }
   }
```

<a name="fieldErrorobject" title= "Field Error Object"></a>
## fieldError

| Element            | Type   |Required| Description                 |
|--------------------|--------|--------|-----------------------------|
|field             |string  |Read Only|Identifies the JSON request field.|
|error            |string  |Read Only|The problem associated with field.|

```apib
        {
            "field": "transaction.accountProfile.email",
            "error": "Required field"
        }
```

<a name="gatewayresponseobject" title= "Gateway Response Object"></a>
## gatewayResponse

This is a read-only raw response returned by an acquirer. 

| Element            | Type   |Required| Description                                                                                         |
|--------------------|--------|---------|-----------------------------------------------------------------------------------------------------|
| code               | string |Read Only| This is acquirer identification code, such as DJN, CRX, etc.                                        |
| responseCode       | string |Read Only| This is the raw response returned by the acquirer.                                                  |
| avsResponse        | enum   |Read Only| This is the AVS response returned from the card issuer. Possible values are:<ul><li>MATCH</li><li>MATCH_ADDRESS_ONLY</li><li>MATCH_ZIP_ONLY</li><li>NO_MATCH</li><li>NOT_PROCESSED</li><li>UNKNOWN</li></ul> |
| avsCode            | string |Read Only| This is the raw AVS code returned by the acquirer.                                                  |
| balanceResponse    | string |Read Only| This is the balance remaining on a gift card, if a gift card was used for the original transaction. |
| mid                | string |Read Only| This is the acquirer MID that was sent to the clearing house.                                       |
| terminalId         | string |Read Only| This is the merchant's terminal ID.                                                                 |
| batchNumber        | string |Read Only| This is the batch number.                                                                           |
| seqNumber          | string |Read Only| This is the merchant's sequence number.                                                             |
| effectiveDate      | string |Read Only| This is the date of the bank deposit associated with the transaction.                               |
| financingType      | string |Read Only| This is the type of financing offered.                                                              |
| plan               | string |Read Only| This is the plan number for this financing transaction.                                             |
| gracePeriod        | string |Read Only| This is the grace period, in months, associated with deferred payment transactions.                 |
| term               | string |Read Only| This is the number of payments, in months, for equal payment transactions.                          |
| responseId         | string |Read Only| This is the response ID assigned by Credorax.                                                       |
| requestId          | string |Read Only| This is the request ID assigned by Paysafe.                                                         |
| description        | string |Read Only| This is a description of the response.                                                              |
| authCode           | string |Read Only| This is the authorization code.                                                                     |
| txnDateTime        | string |Read Only| This is the transaction date and time.                                                              |
| referenceNbr       | string |Read Only| This is the Bank net transaction ID/Merch Tran Ref                                                  |
| responseReasonCode | string |Read Only| This is the raw response reason code returned by Credorax.                                          |
| cvvVerification    | enum   |Read Only| This is the response to the cvv submitted with the transaction request. Possible values are:<ul><li>MATCH</li><li>NO_MATCH</li><li>NO_MATCH</li><li>NOT_PROCESSED</li><li>UNKNOWN</li></ul> |
| cvv2Result         | string |Read Only| This is the raw cvv2 result code.                                                                   |
| orderId            | string |Read Only| Unique NETELLER reference for the order. `ie: ORD_7915d463-ccc8-4305-9d33-9e5c9310f12e, SUB_c46645ea-b7b0-4a91-87f7-88c00ec0dea1`|

<a name="instantachobject" title="Instant ACH Object"></a>
## instantach

|Element                 |Type                   |Required|Description|
|---                     |---                    |---|---|
|consumerId              |string<br>`length<=50` |Mandatory|This is the email address of the customer who is making the payment.If provided by merchant, this will be populated in redirected screen for customer to see. |
|paymentId               |string<br>`length<=36` |Mandatory|This is the ID returned in the response to a prior Payment that the customer made using Instant ACH. Required for withdrawal checkout.|
|emailSubject            |string<br>`length<=30` |Mandatory|This is the Subject line to use in the customer email. |
|emailMessage            |string<br>`length<=50` |Mandatory|This is the message to use in the customer email. |
|recipientDescription    |string<br>`length<=30` |Optional|This is a description to be shown on the instantach payment page in the logo area if there is no *logo\_url* parameter. If no value is submitted and there is no logo, the *pay\_to\_email* value is shown as the recipient of the payment.|
|language                |string<br>`length=2`   |Optional|This is the 2-character preferred language code for the consumer (e.g., EN, FR).|
|logoUrl                 |string                 |Optional|This is the URL of the logo that you would like to appear in the top right of the instantach page. The logo must be accessible via HTTPS or it will not be shown. The logo will be resized to fit. To avoid scaling distortion, the minimum size should be as follows:<br>If the logo width > height - at least 107px wide.<br>If logo width > height - at least 65px high<br>Avoid large images (much greater than 256 by 256px) to minimize the page loading time.|
|detail1Description      |string                 |Optional|You can show additional details about the product in the More information section in the header of Quick Checkout.|
|detail1Text             |string                 |Optional|The detail1Text is shown next to the detail1Description in the More Information section in the header of the payment form with the other payment details. The detail1Description combined with the detail1Text is shown in the more information field of the merchant account history CSV file.|
|descriptor              |string<br>`length<=30` |Optional|This is the merchant descriptor that will be displayed on the consumer's bank statement.|

```
     {
         "consumerId": "john.doe@email.com",
         "paymentId": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
         "emailSubject": "InstantACH Payment",
         "emailMessage": "Your Instant ACH Payment request has been processed",
         "recipientDescription": "logo_url_alt_text",
         "language": "EN",
         "logoUrl": "http://www.paysafe.com/icon.jpg",
         "detail1Description": "Details 1 description",
         "detail1Text": "Details 1 text",
         "descriptor": "My company name"
     }
```
<a name="level2level3object" title="level2level3 Object"></a>
## level2level3

Level 2 and Level 3 (L2/L3) credit card processing refers to certain B2B card transactions for which the merchant might be eligible for lower credit card interchange rates. The lower rates may be available for 
merchants who provide more detailed information when processing card-not-present transactions. In order to be eligible for L2/L3 transactions:
 * Your merchant account must be properly configured by Paysafe.
 * The BIN of the credit card used for the transaction must be eligible – typically, these are government-issued credit cards.


|Element                |Type                               | Description|
|---                    |---                                |---            |
| exemptLocalTax        |boolean                            | This indicates whether or not local tax is exempted for the request. If set to true, then the localTaxAmount parameter will be ignored.<br/>**Note:** This value defaults to *false*. |
| localTaxAmount        |integer<br/>`length<=99999999999`  | This is the local sales tax applied to the purchase.|
| nationalTaxAmount     |number<br/>`length<=99999999999`   | This is the national tax included in the transaction amount. |
| freightAmount         |number<br/>`length<=99999999999`   | This is the freight or shipping portion of the total transaction amount. |
| dutyAmount            |number<br/>`length<=99999999999`   | This is the duty associated with the import of the purchased goods. |
| destinationZip        |number<br/>`length<=10`            | This is the postal/zip code of the address to which the purchased goods will be delivered. This field can be identical to the shipFromZip if the customer is present and takes immediate possession of the goods. |
| destinationCountry    |number<br/>`length=2`              | This is the country to which the goods are being shipped. See [Country Codes](#countrycodes). |
| shipFromZip           |number<br/>`length<=10`            | This is the postal/zip code of the address from which the purchased goods are being shipped. |
| lineItems             |[lineItems](#lineitemsobject)      | This is more detailed information about the items that are being purchased.| 

```apib
    {
    "level2Level3": {
        "localTaxAmount": 15000,
        "nationalTaxAmount": 0,
        "freightAmount": 0,
        "dutyAmount": 0,
        "destinationZip": "90210",
        "destinationCountry": "US",
        "shipFromZip": "90210",
        "lineItems": [
            {
                "description": "Disney Cruise Line - Adult",
                "productCode": "DCL-A",
                "quantity": 2,
                "unitAmount": 120000,
                "taxRate": 5,
                "taxAmount": 12000,
                "totalAmount": 252000
            },
            {
                "description": "Disney Cruise Line - Kids",
                "productCode": "DCL-K",
                "quantity": 1,
                "unitAmount": 60000,
                "taxRate": 5,
                "taxAmount": 3000,
                "totalAmount": 63000
            }
        ]
    }
    }
```

<a name="lineitemsobject" title="lineItems Object"></a>
##lineItems

|Element                |Type                               | Description|
|---                    |---                                |---            |
|description            |string<br/>`length<=50`            |This is a description of the item(s) being purchased.|
|productCode            |string<br/>`length<=12`            |This is a merchant-defined description code of the item being purchased.|
|quantity               |number<br/>`length<=99999999999`<br/>`max 4 decimals` |This is the quantity of the item.|
|unitAmount             |number<br/>`length<=99999999999`   |This is the unit price of the item being purchased, in minor units. The currency will be based on the account setting.|
|taxRate                |number<br/>`length<=100`<br/>`max 2 decimals`    |This is the tax rate used to calculate the tax amount. For example, if the tax rate is 10.5%, this value should be 10.5.|
|taxAmount              |number<br/>`length<=99999999999`   |This is the amount of any value-added taxes that can be associated with the purchased item, in minor units. The currency will be based on the account setting. **Note:** Our system will not validate the accuracy of this value. The merchant's application must calculate this value correctly.|
|totalAmount            |number<br/>`length<=99999999999`   |This is the total amount of the line item, typically calculated as price multiplied by quantity, in minor units. The currency will be based on the account setting. **Note:** Our system will not validate the accuracy of this value. The merchant's application must calculate this value correctly.|

```apib
    {
    "lineItems": {
        "description": "Disney Cruise Line",
        "productCode": "DCL",
        "quantity": 4,
        "unitAmount": 120000,
        "taxRate": 5,
        "taxAmount": 24000,
        "totalAmount": 504000
    }
    }
```
<a name="linksobject" title="links Object"></a>
## links

|Element    |Type           |Description|
|---        |---            |---|
|rel        |enum           |This is the link type that allows different endpoints to be targeted depending on the end state of the transaction. Possible values are:<ul><li>redirect_payment</li><li>default</li><li>first</li><li>prev</li><li>next</li><li>last</li></ul>|
|href       |string         |This is the URI of the resource.|
|method     |string         |This is the HTTP method. |

```apib
{
    "links": [{
            "rel": "on_completed",
            "href": "https://US_commerce_site/payment/return/success",
        },
        {
            "rel": "on_failed",
            "href": "https://US_commerce_site/payment/return/failed",
        }
    ]
}
```


<a name="merchantdescriptorobject" title="merchantDescriptor Object"></a>
## merchantDescriptor
|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|dynamicDescriptor  |string <br/>`length<=20`   |This is a merchant descriptor that will be displayed on a customer’s card statement.|
|phone              |string <br/>`length<=13`   |This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s card statement.|

```apib
    {
    "merchantDescriptor":{
        "dynamicDescriptor":"OnlineStore",
        "phone":"12345678"
  }
  }
```

<a name="metaobject" title="meta Object"></a>
## meta

|Element    |Type           |Required|Description|
|---        |---            |---|---|
|numberOfRecords|number|Read Only|This is the number of records returned in the lookup.|
|limit |number         |Read Only|This is the number of records returned per page.|
|page  |number         |Read Only|This is the page of records on which the lookup starts.|

```apib
{
    "meta": {
               "numberOfRecords": 1,
               "limit": 10,
               "page": 1
            }
}
```


<a name="metadataobject" title="metadata Object"></a>
## metadata

|Element            |Type                       |Required|Description                        |
|---                |---                        |---|---                            |
|key                |string <br/>`length<=50`   |Read Only| This is a description of the data being added to the order.|
|value              |string <br/>`length<=100`  |Read Only| This is the value for the key/value pair.|

<a name="originalcreditsobject" title="originalcredits Object"></a>
## originalcredits

|Element            |Type                                   |Required|Description                        |
|---                |---                                    |---|---                                |
|id                 |string <br/>`length<=36`               |Read Only|This is the ID returned in the response. This ID can be used for future associated requests.|
|amount             |number<br/>`max=99999999999`           |Mandatory|This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. <br/>**Note:** The *amount* specified in the Original Credit request must match the *amount* specified in the Payment Handle request from which the *paymentHandleToken* is taken.|
|merchantRefNum     |string <br/>`length<=255`              |Mandatory|This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|paymentHandleToken |string<br/>`length<=36`                |Mandatory|This is the payment token generated by Paysafe that will be used by merchants for Original Credit requests.|
|currencyCode       |string<br/>`length=3`                  |Mandatory|This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes). <br/>**Note:** The *currencyCode* specified in the Credit request must match the *currencyCode* specified in the Payment Handle request from which the *paymentHandleToken* is taken.|
|card               |[card](#cardobject)                    |Optional|These are the details of the card used.|
|billingDetails     |[billingDetails](#billingdetailsobject)|Mandatory|These are the billing details for the request.|
|customerIp         |string<br/>`length<=39`                |Mandatory|This is the customer's IP address.|
|description        |string<br/>`length<=255`               |Optional|This is a description of the transaction, provided by the merchant.|

```apib
{
  "merchantRefNum":"merchant ABC-444",
  "amount":10098,
  "paymentHandleToken": "SC9mbfZSITB5OwDJ",
  "currencyCode": "GBP",
  "customerIp":"204.91.0.12",
  "description":"Winning payment from Loto"
}    
```

<a name="partialauthobject" title="partialAuth Object"></a>
## partialAuth

This is an authorization that is approved for an amount lower than the requested amount. The remainder of the amount could be paid by other means.|

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|requested          |boolean                    |This specifies whether or not a partial authorization was requested. |
|amountDue          |number<br/>`max=99999999999` |This is the amount of the full authorization that is not covered by the Payment request. |
|originalAmount     |number<br/>`max=99999999999` |This is the actual amount of the full authorization. |

```apib
{
    "partialAuth": {
        "requested": true,
        "amountDue": "1000",
        "originalAmount": "2000"
    }
}
```
<a name="paymenthandleobject" title="Payment Handle Object"></a>
## Payment Handle

|Element                |Type                       |Required|Description                        |
|---                    |---                        |---  |---     |
|id                     |string<br/>`length<=32`    |Read Only|This is the ID returned in the response. This ID can be used to retrieve the Payment Handle.|
|accountId              |string<br/>`length<=10`    |Conditional|This is the merchant account number used for the request. Include this parameter if you have more than one merchant account for the currency/payment type combination you are specifying. |
|paymentHandleTokenFrom |string<br/>`length<=36`    |Optional|This is an existing Payment Handle Token, from which the payment instrument and profile details are retrieved. |
|merchantRefNum         |string<br/>`length<=255`   |Mandatory|This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request. |
|transactionType        |enum                       |Mandatory|This specifies the transaction type for which the Payment Handle is created. Possible values are: <ul><li>PAYMENT</li><li> STANDALONE_CREDIT</li><li>ORIGINAL_CREDIT</li><li>VERIFICATION</li></ul>|
|status                 |enum                       |Read Only|This is the status of the request. Possible values are:<ul><li>INITIATED &ndash; The request was initiated with the downstream provider.</li><li>PAYABLE &ndash; The merchant can use the Payment Handle for a Payment request.</li><li>PROCESSING &ndash; The Payment Handle was authorized by customer, awaiting PSP response.</li><li>FAILED &ndash; The transaction failed due to either an error or being declined.</li><li>EXPIRED &ndash; The Payment Handle expired because the merchant did not proceed with the Payment transaction.</li><li>COMPLETED &ndash; The Payment request was initiated successfully using the Payment Handle.</li></ul>      |
|usage                  |enum                       |Read Only|This specifies how the Payment Handle will be used for Payments. Possible values are:<ul><li>SINGLE_USE &ndash; The Payment Handle can be used for one transaction only and expires if not used.</li><li>MULTI_USE &ndash; The Payment Handle can be used multiple times.</li></ul>|
|paymentType            |enum                       |Mandatory|This is the payment type associated with this Payment Handle. Possible values are:<ul><li>CARD</li><li>PAYSAFECASH</li><li>PAYSAFECARD</li><li>VIP PREFERRED</li><li>SIGHTLINE</li><li>SKRILL</li><li>INSTANT ACH</li><li>PAYPAL</li><li>ACH</li><li>EFT</li></ul>|
|action                 |enum                       |Read Only|This specifies the next step of the user journey once they proceed to the Payment. Possible values are:<ul><li>NONE &ndash; No action is required, e.g., for a standard credit card payment.</li><li>REDIRECT &ndash; The user must be redirected in order to complete a Payment, e.g., when an alternate payment method like Paysafecard is used.</li></ul>|
|executionMode          |enum                       |Read Only|This specifies the action of the merchant server in order to complete the Payment. Possible values are:<ul><li>SYNCHRONOUS &ndash; The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.</li><li>ASYNCHRONOUS &ndash; The Payment request is not completed immediately and the merchant [must rely on webhooks](#paymentswebhooks) to retrieve the status of the Payment request.</li></ul>|
|amount                 |number<br/>`max=99999999999` |Mandatory|This is the amount of the request, in minor units.<br/>**Note:** This field is mandatory if *transactionType* is included. <br/>The *amount* specified in the Payment Handle request must match the *amount* specified in the Payments API request the *paymentHandleToken* is used for. |
|currencyCode           |string<br/>`length=3`      |Mandatory|This is the currency of the merchant account, e.g., USD or CAD. See [Currency Codes](#currencycodes). <br/>The *currencyCode* specified in the Payment Handle request must match the *currencyCode* specified in the Payments API request the *paymentHandleToken* is used for.|
|paymentHandleToken     |string                     |Read Only|This is the payment token generated by Paysafe that will be used by merchants for Payment API requests.|
|card \| paysafecard \| paysafecash \| sightline \| vippreferred \| skrill \| instant ACH \| paypal \| ACH \|EFT |Mandatory| [card](#cardobject) \| [paysafecard](#paysafecardobject)\| [paysafecash](#paysafecashobject) \|[sightline](#sightlineobject) \| [vippreferred](#vippreferredobject) \| [skrill](#skrillobject) \| [instant ACH](#instantachobject)  \| [paypal](#paypalobject) \| [ACH](#achobject)    \| [EFT](#eftobject)  |These are details of the payment instrument used in the request. |
|billingDetails         |[billingDetails](#billingdetailsobject)        |Conditional |These are billing details for the request.<br/>**Note:** For single-use Payment Handles, this address information will be ignored if the *paymentHandleTokenFrom* parameter is included and there is already address information associated with that customer.|
|profile                |[profile](#profileobject)  |Optional|This is the customer's profile. |
|merchantDescriptor     |[merchantDescriptor](#merchantdescriptorobject) |Optional|This is the merchant descriptor that will be displayed on the customer's card or bank statement.<br/>**Note:** Not all processing gateways support this parameter. Contact your account manager for more information.|
|returnLinks            |[returnLinks](#returnlinksobject)         |Conditional|These are links to which to redirect the customer, where applicable. Mandatory for the following Payment Methods: Cards, Skrill, Paypal, Paysafecash, Paysafecard, Sightline, Vip Preferred. |
|customerIp             |string<br/>`length<=39`    |Optional|This is the customer's IP address. |
|timeToLiveSeconds      |number<br/>`length<=899`   |Read Only|This is the period of time, in seconds, the *paymentHandleToken* is valid before expiration.|
|links            |[links](#linksobject)         |Read Only|These are links to which to redirect the customer, where applicable. |
|txnTime                |UTC formatted date              |Read Only |This is the date and time the request was processed. For example:<br/>2019-01-26T10:32:28Z|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject)|Read Only| This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|
|updatedTime|datetime|Read Only|ISO 8601 format (UTC) This is the date and time the resource was last updated, e.g., `2014-01-26T10:32:28Z`|
|statusTime|datetime|Read Only|ISO 8601 format (UTC) This is the date and time the resource was last updated, e.g., `2014-01-26T10:32:28Z`|
|meta|[meta](#metaobject)|Read Only| This is the information of the response.|    

```apib
{
    "merchantRefNum": "merchantRefNum-101",
    "transactionType": "PAYMENT",
    "card": {
        "cardNum": "5191330000004415",
        "cardExpiry": {
            "month": 10,
            "year": 2021
        },
        "cvv": "111",
        "holderName": "Chad"
    },
    "paymentType": "CARD",
    "amount": 190,
    "currencyCode": "GBP",
    "customerIp": "172.0.0.1",
    "billingDetails": {
        "nickName": "Home",
        "street": "100 Queen",
        "street2": "Unit 201",
        "city": "Toronto",
        "zip": "M5H 2N2",
        "country": "CA"
    },
    "returnLinks": [{
            "rel": "on_completed",
            "href": "https://US_commerce_site/payment/return/success",
            "method": "GET"
        },
        {
            "rel": "on_failed",
            "href": "https://US_commerce_site/payment/return/failed",
            "method": "GET"
        }
    ]
}
```

<a name="paymentsobject" title="Payments Object"></a>
## Payment

|Element            |Type                                   |Required|Description                        |
|---                |---                                    |---|---                                |
|id                 |string <br/>`length<=36`               |Read Only|This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |Mandatory|This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |Mandatory|This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. <br/>**Note:** The *amount* specified in the Payment request must match the *amount* specified in the Payment Handle request from which the *paymentHandleToken* is taken.|
|dupCheck           |boolean                                |Optional|This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|settleWithAuth     |boolean                                |Optional|This indicates whether the request is an Authorization only (no Settlement), or a Purchase (Authorization and Settlement).<br/><ul><li>false &ndash; The request is not settled</li><li>true &ndash; The request is settled</li></ul><br/>**Note:** Defaults to *true*.|
|preAuth            |boolean                                |Optional|This indicates whether the Authorization request should be sent as a Pre-Authorization.<br/>**Note:** You should use the *preAuth* element in cases where you are not sure that you can fully settle the Authorization within 4 days. Contact your account manager for more information.|
|partialAuth        |[partialAuth](#partialauthobject)      |Optional|This is an authorization that is approved for an amount lower than the requested amount. The remainder of the amount could be paid by other means.|
|paymentHandleToken |string<br/>`length<=36`                |Mandatory|This is the Payment Handle token that represents the payment instrument to be used in the Payment request. |
|availableToSettle  |number                                 |Read Only|This is the amount of the Authorization remaining to settle, in minor units.|
|childAccountNum    |string<br/>`length<=10`                |Optional|This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|customerIp         |string<br/>`length<=39`                |Optional|This is the customer's IP address.|
|description        |string<br/>`length<=255`               |Optional|This is a description of the transaction, provided by the merchant.|
|txnTime            |UTC formatted date                     |Read Only|This is the date and time the request was processed. For example:<br/>2019-01-26T10:32:28Z|
|status             |enum                                   |Read Only|This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>HELD &ndash; The transaction has been placed on hold due to risk considerations.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li><li>PENDING &ndash; The request is pending.</li></ul>|
|currencyCode       |string<br/>`length=3`                  |Mandatory|This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes). <br/>**Note:** The *currencyCode* specified in the Payment request must match the *currencyCode* specified in the Payment Handle request from which the *paymentHandleToken* is taken.|
|level2level3       |[level2level3](#level2level3object)    |Optional|This allows merchants who are enabled to provide additional L2/L3 transaction data.<br/>**Note:** Not all processing gateways support this parameter. Contact your account manager for more information.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) |Read Only| This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|
|accordD            |[accordD](#accorddobject)              |Optional|These are parameters for financing plans supported for certain merchant configurations.<br/>Include this element **only when** instructed to do so by your account manager.|
|recipient          |[recipient](#recipientobject)          |Optional|In certain cases, this allows additional data to be included with a Payment request. |
|riskReasonCode     |array                                  |Read Only|An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|splitpay           |[splitpay](#splitpayobject)            |Optional|This enables you to use the Split Payouts functionality when authorizing with a Settlement.|
|storedCredentialDetails |[storedCredentialDetails](#storedcredentialobject) || This object is used to identify requests that use stored credentials that the merchant has on file for the consumer, in order to improve authorization rates and reduce fraud. |
|settlements        |array                                  |Read Only|This is a read-only list of all Settlements. This will be returned only if *settleWithAuth* = *true* in the request. |
|error              |[error](#errorobject)                  |Read Only| Details of the error.    |
|statusReason       |string<br/>`length<=255`               |Read Only|This is reason for the status. This is present in the case where *status* is ERROR, FAILURE, or HELD. |
|authentication     |[authentication](#authenticationobject)|Read Only|These are 3D Secure details.|
|paymentType            |enum                       |Optional|This is the payment type associated with this Payment Handle. Possible values are:<ul><li>CARD</li><li>PAYSAFECASH</li><li>PAYSAFECARD</li><li>VIP PREFERRED</li><li>SIGHTLINE</li><li>SKRILL</li><li>INSTANT ACH</li><li>PAYPAL</li><li>ACH</li><li>EFT</li></ul>|
|gatewayReconciliationId |string                 |Optional|Transaction identifier that can be used to reconcile this transaction with the provider gateway.<br/><i>Read Only</i>|
|updatedTime             |datetime               |Optional|ISO 8601 format (UTC) </b>This is the date and time the resource was last updated, e.g., `2014-01-26T10:32:28Z`<br/><i>Read Only</i>|
|statusTime              |datetime               |Optional|ISO 8601 format (UTC) </b>This is the date and time the resource status was last updated, e.g., `2014-01-26T10:32:28Z`<br/><i>Read Only</i>|
|availableToRefund  |number<br/>`max=99999999999`|Optional|This is the amount of this Settlement that is available to Refund, in minor units. For example, US $10.99 would be 1099.|
|links            |[links](#linksobject)         |Optional|These are links to which to redirect the customer, where applicable. |

```apib
{
    "merchantRefNum": "merchantRefNum-108",
    "amount": 190,
    "currencyCode": "GBP",
    "dupCheck": true,
    "settleWithAuth": false,
    "paymentHandleToken": "SCZJg09GWSv36NLB",
    "customerIp": "10.10.12.64",
    "description": "Gaming Request"
}
```

<a name="paypalobject" title="paypal Object"></a>
## paypal

|Element                 |Type                   |Required|Description|
|---                     |---                    |---|---|
|consumerId              |string<br>`length<=50` |Mandatory|The source of funds for this payment, the email address of the consumer or payer.|
|recipientDescription    |string<br>`length<=127`|Optional|A label that overrides the business name in the merchant's PayPal account on the PayPal checkout pages.|
|language                |string<br>`length=2`   |Optional|The 2-character preferred language code for the consumer (e.g., AU, AT, BE, BR, CA, CH, CN, DE, ES, GB, FR, IT, NL, PL, PT, RU, or US.) or A five-character code is also valid for languages in these countries (e.g: da_DK, he_IL, id_ID, ja_JP, no_NO, pt_BR, ru_RU, sv_SE, th_TH, zh_CN, zh_HK, and zh_TW).|
|shippingPreference      |enum <br>              |Optional|The shipping preference. The possible values are:<ul><li>NO_SHIPPING - Redacts the shipping address from the PayPal pages. Recommended for digital goods.</li><li>GET_FROM_FILE - Uses the customer-selected shipping address on PayPal pages.</li><li>SET_PROVIDED_ADDRESS. If available, uses the merchant-provided shipping address, which the customer cannot change on the PayPal pages. If the merchant does not provide an address, the customer can enter the address on PayPal pages.</li></ul>|
|consumerMessage         |string<br>             |Optional|Note to be displayed on the PayPal page.|
|orderDescription        |string<br>             |Optional|Order description to display on PayPal page. If merchant does not set this field it defaults to 'Payment for order'.|
|recipientType           |string<br>             |Mandatory|Type of payout recipient. The only supported value is 'PAYPAL_ID'.|

```
     {
        "paypal": {
        "consumerId": "groll75@gmail.com",
        "recipientDescription": "My store description",
        "language": "US",
        "shippingPreference": "NO_SHIPPING",
        "consumerMessage": "My note to payer",
        "orderDescription": "My order description",
        "recipientType": "PAYPAL_ID"
        }
     }
```

<a name="paysafecardobject" title="paysafecard Object"></a>
## paysafecard

|Element                        |Type                   |Required|Description|
|---                            |---                    |---|---|
|consumerId                     |string                 |Mandatory|This is the merchant's unique identifier of the customer. For security purposes, if any personal data is used (e.g., customer's user name, email address, etc.), it has to be encrypted or hashed.|
|ageRestriction                 |number                 |Optional|This is the minimum age restriction for the transaction.|
|kycLevelRestriction            |string                 |Optional|This is the KYC level that will be required for the transaction. Options:<ul><li>FULL</li><li>SIMPLE</li></ul>|
|countryRestriction             |string<br>`length=2`   |Optional|This is the ISO 3166-1 alpha-2 code of the country to which the transaction will be restricted.|

```
"paysafecard": {
    "consumerId": "merchantclientid",
    "minAgeRestriction": 18,
    "kycLevelRestriction": "SIMPLE",
    "countryRestriction": "DE"
}
```

<a name="paysafecashobject" title="paysafecash Object"></a>
## paysafecash

|Element                        |Type                   |Required|Description|
|---                            |---                    |---|---|
|consumerId                     |string                 |Mandatory|This is the merchant's unique identifier of the customer. For security purposes, if any personal data is used (e.g., customer's user name, email address, etc.), it has to be encrypted or hashed.|
|ageRestriction                 |number                 |Optional|This is the minimum age restriction for the transaction.|
|kycLevelRestriction            |string                 |Optional|This is the KYC level that will be required for the transaction. Options:<ul><li>FULL</li><li>SIMPLE</li></ul>|
|countryRestriction             |string<br>`length=2`   |Optional|This is the ISO 3166-1 alpha-2 code of the country to which the transaction will be restricted.|

```
"paysafecash": {
    "consumerId": "merchantclientid",
    "minAgeRestriction": 18,
    "kycLevelRestriction": "SIMPLE",
    "countryRestriction": "DE"
}
```

<a name="profileobject" title="Profile Object"></a>
## profile

|Element            |Type                               |Description    |
|---                |---                                |---            |
|locale             |enum                               |This indicates the language of the profile. Possible values are:<ul><li>en_US</li><li>fr_CA</li><li>en_GB</li></ul>|
|firstName          |string <br/>`length<=80`           |This is the customer’s first name. |
|lastName           |string <br/>`length<=80`           |This is the customer’s last name. |
|email              |string<br/>`length<=255`           |This is the customer's email address.|
|phone              |string<br/>`length<=40`            |This is the customer's phone number.|
|dateOfBirth        |[dateOfBirth](#dateofbirthobject)  |These are the addresses associated with saved payment instruments for the customer. |

```apib
            {
              "locale" : "en_US",
              "firstName" : "John",
              "lastName" : "Smith",
              "email" : "john.smith@somedomain.com",
              "phone" : "713-444-5555"
             }
```

<a name="recipientobject" title="recipient Object"></a>
## recipient 

The recipient is deemed to be the person or party who has the contractual relationship with the merchant/financial institution. This may be different from the cardholder, e.g., in the case of a parent topping up a child's savings account. Therefore, the fields should not be collected on the same page as cardholder information, but instead be passed in the background from the merchant’s records.

**Note:** You can include *recipient* elements in your [authorization request](#authrequest) **only if** your Merchant Category Code is **6012** and your registered trading address is in the United Kingdom. All fields are optional. However, scheme fines may apply if data is consistently not supplied and chargebacks persist. If you have any questions, contact your account manager.
If you are using a payment token for an Authorization request and there is already recipient data for the consumer profile associated with the payment token, then if you include the *recipient* object in the Authorization, this data will override the recipient data already in the profile.

If you [look up an authorization request](#getauth)  that used the *visaAdditionalAuthData* parameter (now deprecated), the response will contain the relevant data in both the *recipient* and the *visaAdditionalAuthData* objects.

|Element                    |Type                       |Description                        |
|---                        |---                        |---                                |
|dateOfBirth                |[dateOfBirth](#dateofbirthobject) |This is the recipient's date of birth. |
|zip                        |string<br/>`length<=10`    |This is the recipient's postcode.<br/>**Note:** The last 3 characters are not sent to the banking network.|
|lastName                   |string<br/>`length<=255`   |This is the recipient's last name.<br/>**Note:** Only the first 6 characters are sent to the banking network.|
|accountNumber              |string<br/>`length<=25`    |This is the recipient's account number, e.g., a loan agreement number or customer ID. In the case where the recipient account is a prepaid card, the card number may be sent in full.<br/>**Note:** Only the first 6 and last 4 characters are sent to the banking network and will be masked accordingly within the back office and any other reports, to comply with PCI regulations.|

```apib
    {
    "recipient": {
        "dateOfBirth": {
            "day": 29,
            "month": 1,
            "year": 2001
        },
        "zip": "CB24 9AD",
        "lastName": "Smith",
        "accountNumber": "ABC1234567890"
    }
    }
```

<a name="refundsobject" title="refunds Object"></a>
## refunds
|Element            |Type                                   |Required|Description                        |
|---                |---                                    |---|---                                |
|id                 |string <br/>`length<=36`               |Read Only|This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |Mandatory|This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br>`max=99999999999`            |Optional|This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099.|
|dupCheck           |boolean                                |Optional|This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|childAccountNum    |string<br/>`length<=10`                |Optional|This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|txnTime            |UTC formatted date                     |Read Only|This is the date and time the request was processed. For example:<br/>2014-01-26T10:32:28Z|
|status             |enum                                   |Read Only|This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>PENDING &ndash; Our system has received the request but it has not yet been batched.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li></ul>|
|error              |[error](#errorobject)                  |Read Only|Details of the error.  |
|splitpay           |[splitpay](#splitpayobject)            |Optional|This enables you to use the Split Payouts functionality when processing a Refund.|
|riskReasonCode     |array                                  |Read Only|An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) |Read Only| This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|

```apib
{
    "merchantRefNum":"refund_id:1231",
    "amount":10098
}
```

<a name="returnlinksobject" title="returnLinks Object"></a>
## returnLinks

|Element    |Type           |Required|Description|
|---        |---            |---|---|
|rel        |enum           |Mandatory|This is the link type that allows different endpoints to be targeted depending on the end state of the transaction. Possible values are:<ul><li>default - The default return URL that will be used if specific status return URL is not defined.</li><li>on_completed - Will be returned to this URL if the payment is completed.</li><li>on_failed - Will be returned to this URL if the payment fails.</li></ul>|
|href       |string         |Mandatory|This is the URI of the resource.|
|method     |string         |Mandatory|This is the HTTP method. |

```apib
{
    "returnLinks": [{
            "rel": "on_completed",
            "href": "https://US_commerce_site/payment/return/success",
            "method": "GET"
        },
        {
            "rel": "on_failed",
            "href": "https://US_commerce_site/payment/return/failed",
            "method": "GET"
        }
    ]
}
```

<a name="settlementsobject" title="settlements Object"></a>
## settlement
|Element            |Type                                   |Required|Description                        |
|---                |---                                    |---|---                                |
|id                 |string <br/>`length<=36`               |Read Only|This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |Mandatory|This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |Optional|This is the amount of the request, in minor units.For example, to process US $10.99, this value should be 1099. |
|dupCheck           |boolean                                |Optional|This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|availableToRefund  |number<br/>`max=99999999999`           |Read Only|This is the amount of this Settlement that is available to Refund, in minor units. For example, US $10.99 would be 1099.|
|childAccountNum    |string<br/>`length<=10`                |Read Only|This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|txnTime            |UTC formatted date                     |Read Only|This is the date and time the request was processed. For example:<br/>2014-01-26T10:32:28Z|
|status             |enum                                   |Read Only|This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>PENDING &ndash; Our system has received the request but it has not yet been batched.</li><li>PROCESSING &ndash; The Settlement batch has started.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The transaction request has been cancelled.</li></ul>|
|error              |[error](#errorobject)                  |Read Only|Details of the error.   |
|splitpay           |[splitpay](#splitpayobject)            |Optional|This enables you to use the Split Payouts functionality when settleing an Authorization.|
|riskReasonCode     |array                                  |Read Only|An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) |Read Only| This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|


```apib
{
    "merchantRefNum":"merchantRef_2019_04_11_05",
    "amount":100
}
```

<a name="sightlineobject" title="sightline Object"></a>
## sightline

|Element                        |Type                   |Required|Description|
|---                            |---                    |---|---|
|consumerId                     |string                 |Mandatory|This is the Loyalty Membership Number unique to the customer to be enrolled with Play+ (Sightline). This is to be provided by the merchant. |
|paymentHandleToken             |string                 |Optional|This is the payment handle token for a card. This will be present if registration is occurring as part of the salvage flow or for a funding the Play+ (Sightline) card flow.|
|balance                        |big decimal            |Optional|This is the balance on the Play+ (Sightline) prepaid card.|
|SSN                            |string                 |Optional|This the customer's Social Security Number.|
|last4ssn                       |string                 |Optional|This the customer’s last 4 digits of Social Security Number. If the customer is already enrolled for Sightline, then instead of sending the full ‘SSN’ field, you can send the last 4 digits of SSN which will get prefilled during Payment flow. If not provided, then the system will check if ‘SSN’ field is present to prefill the last 4 digits. If both these fields are not provided, then the customer has to enter the last 4 digits of SSN to complete the payment.|
|card                           |[card](#cardobject)    |Optional|This is the card object. This will be present if registration is occurring as part of the salvage flow or for a funding the Play+ (Sightline) card flow.|

```
     {
         "consumerId": "12312313",
         "paymentHandleToken": "SCO3wKcIyLoQbQvw",
         "balance": "20000",
         "SSN": "123456789",
         "last4ssn": "6789",
         "card": {
             "cardNum": "12345678912",
             "cvv": "123",
             "cardExpiry": {
                 "month": 12,
                 "year": 2022
             }
         }
     }
```
<a name="skrillobject" title="skrill Object"></a>
## skrill

|Element                 |Type                   |Required|Description|
|---                     |---                    |---|---|
|consumerId              |string<br>`length<=50` |Mandatory|This is the email address of the customer who is making or receiving the payment.This is to be provided by merchant while making a payout. |
|emailSubject            |string<br>`length<=30` |Mandatory|This is the Subject line to use in the customer email. This is to be provided by merchant while making a payout. |
|emailMessage            |string<br>`length<=50` |Mandatory|This is the message to use in the customer email.This is to be provided by merchant while making a payout. |
|recipientDescription    |string<br>`length<=30` |Optional|This is a description to be shown on the Skrill payment page in the logo area if there is no *logo\_url* parameter. If no value is submitted and there is no logo, the *pay\_to\_email* value is shown as the recipient of the payment.|
|language                |string<br>`length=2`   |Optional|This is the 2-character preferred language code for the consumer (e.g., EN, FR).|
|logoUrl                 |string                 |Optional|This is the URL of the logo that you would like to appear in the top right of the Skrill page. The logo must be accessible via HTTPS or it will not be shown. The logo will be resized to fit. To avoid scaling distortion, the minimum size should be as follows:<br>If the logo width > height - at least 107px wide.<br>If logo width > height - at least 65px high<br>Avoid large images (much greater than 256 by 256px) to minimize the page loading time.|
|detail1Description      |string                 |Optional|You can show additional details about the product in the More information section in the header of Quick Checkout.|
|detail1Text             |string                 |Optional|The detail1Text is shown next to the detail1Description in the More Information section in the header of the payment form with the other payment details. The detail1Description combined with the detail1Text is shown in the more information field of the merchant account history CSV file.|
|descriptor              |string<br>`length<=30` |Optional|This is the merchant descriptor that will be displayed on the consumer's bank statement.|

```
     {
         "consumerId": "john.doe@email.com",
         "emailSubject": "Skrill Payout",
         "emailMessage": "Your Skrill Payout request has been processed",
         "recipientDescription": "logo_url_alt_text",
         "language": "EN",
         "logoUrl": "http://www.paysafe.com/icon.jpg",
         "detail1Description": "Details 1 description",
         "detail1Text": "Details 1 text",
         "descriptor": "My company name"
     }
```


<a name="splitpayobject" title="splitpay Object"></a>
## splitpay

|Element            |Type    |Description |
|---                |---     |---        |
|linkedAccount      |string  |This is the ID of the linked account.
|amount             |number  |This is the amount to transfer to the linked account in minor currency units. The total amount to all linked accounts cannot exceed the transaction total. Either this or percent must be specified.|
|percent            |number  |This is the percentage of the total transaction amount to transfer to the linked account, to two decimal places. The total percentage to all linked accounts cannot exceed 100%. Either this or amount must be specified.|

```apib
  {
  "splitpay": [
    {
    "linkedAccount": "123124124",
    "percent": 5
    },
    {
    "linkedAccount": "767862873",
    "amount": 500
    }]
  }
```

<a name="standalonecreditsobject" title="standalonecredits Object"></a>
## standalonecredits

|Element            |Type                                   |Required|Description                        |
|---                |---                                    |---|---                                |
|id                 |string <br/>`length<=36`               |Read Only|This is the ID returned in the response. This ID can be used for future associated requests.|
|amount             |number<br/>`max=99999999999`           |Mandatory|This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. <br/>**Note:** The *amount* specified in the Credit request must match the *amount* specified in the Payment Handle request from which the *paymentHandleToken* is taken.|
|merchantRefNum     |string <br/>`length<=255`              |Mandatory|This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|paymentHandleToken |string                                 |Mandatory|This is the payment token generated by Paysafe that will be used by merchants for Standalone Credit requests.|
|currencyCode       |string<br/>`length=3`                  |Mandatory|This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes). <br/>**Note:** The *currencyCode* specified in the Credit request must match the *currencyCode* specified in the Payment Handle request from which the *paymentHandleToken* is taken.|
|card \| paysafecard \| paysafecash \| sightline \| vippreferred \| skrill \| instant ACH \| paypal \| ACH \|EFT |[card](#cardobject) \| [paysafecard](#paysafecardobject)\| [paysafecash](#paysafecashobject) \|[sightline](#sightlineobject) \| [vippreferred](#vippreferredobject) \| [skrill](#skrillobject) \| [instant ACH](#instantachobject)  \| [paypal](#paypalobject) \| [ACH](#achobject)    \| [EFT](#eftobject)  |Read Only|These are the details of the payment method used.|
|billingDetails     |[billingDetails](#billingdetailsobject)|Optional|These are the billing details for the request.|
|customerIp         |string<br/>`length<=39`                |Optional|This is the customer's IP address.|
|description        |string<br/>`length<=255`               |Optional|This is a description of the transaction, provided by the merchant.|

```apib
{
  "merchantRefNum":"merchant ABC-444",
  "amount":10098,
  "paymentHandleToken": "SC9mbfZSITB5OwDJ",
  "currencyCode": "GBP",
  "customerIp":"204.91.0.12",
  "description":"Winning payment from Loto"
}    
```

<a name="storedcredentialobject" title="storedCredential Object"></a>
## storedCredential

The *storedCredential* object is used to identify [authorization requests](#authrequest) that use stored credentials for a consumer, in order to improve authorization rates and reduce fraud. Stored credentials can be used in two cases: 
 - Using a payment token &ndash; An authorization request that uses a *paymentToken* from the [Customer Vault API](https://developer.paysafe.com/en/vault/api/)
 - Using a card number &ndash; An authorization request that uses a credit card number stored by the merchant 

**Notes:** 
 - If you use a *paymentToken* in the authorization request but do not include the *storedCredential* object, Paysafe will provide default information taken from Customer Vault data.
 - You cannot include both the *storedCredential* object and the *recurring* parameter in the same authorization request. Paysafe recommends using the *storedCredential* object.
 - The *cvv* parameter of the [card object](#cardobject) is required when the *occurrence* parameter is set to *INITIAL*. However, *cvv* is not required when the *occurrence* parameter is set to *SUBSEQUENT*.
 - The *storedCredential* object cannot be used for Apple Pay or Google Pay transactions.

|Element                 |Type                   |Description|
|---                     |---                    |---|
|type                    |enum                   |This specifies the type of request being made. Possible values are: <ul><li>ADHOC &ndash; Ad hoc consumer-initiated request</li><li>TOPUP &ndash; Unscheduled merchant-iniitated request when a consumer balance is below a set limit </li><li>RECURRING &ndash; Scheduled, merchant-initiated recurring request</li></ul><br/>**Note:** This value defaults to *ADHOC*.|
|occurrence              |enum                   |This specifies whether this stored credential request is initial or recurring. Possible values are: <ul><li>INITIAL &ndash; Used when this is the first time the consumer uses this credit card</li><li>SUBSEQUENT &ndash; Used when the consumer uses this credit card for subsquent requests </li></ul><br/>**Note:** This value defaults to *INITIAL*.|

```apib
{
    "storedCredential": {
        "type": "RECURRING",
        "occurrence": "SUBSEQUENT"
    }
}
```

<a name="voidauthsobject" title="Void Authorizations Object"></a>
## Void Authorizations

|Element            |Type                                   |Required|Description                        |
|---                |---                                    |---|---                                |
|id                 |string <br/>`length<=36`               |Read Only|This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |Mandatory|This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |Mandatory|This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099.|
|txnTime            |UTC formatted date                     |Read Only|This is the date and time the request was processed. For example:<br/>2019-01-26T10:32:28Z|
|status             |enum                                   |Read Only|This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>HELD &ndash; The transaction has been placed on hold due to risk considerations.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li><li>PENDING &ndash; The request is pending.</li></ul>|


# Error Summary

## Common Errors
|HTTP Status Code|Error Code|Description|
|---------|---------|---------------|
|500|1000|An internal error occurred.|
|502|1001|An error occurred with the external processing gateway.|
|500|1002|An internal error occurred.|
|500|1003|An internal error occurred.|
|500|1007|An internal error occurred.|
|500|1008|An internal error occurred.|
|429|1200|The API call has been denied as it has exceeded the permissible call rate limit.|
|401|5000|Your merchant account authentication failed. Either your store ID/password are invalid or the IP address from which you are sending the transaction has not been authorized.|
|400|5001|The submitted currency code is invalid or your account does not support this currency.|
|400|5003|You submitted an invalid amount with your request.|
|400|5004|You submitted an invalid account type with your request.|
|400|5005|You submitted an invalid operation type with your request.|
|400|5010|The submitted country code is invalid.|
|400|5016|The merchant account you provided cannot be found.|
|400|5017|The merchant account you provided is disabled.|
|402|5021|Your transaction request has been declined.|
|400|5023|The request is not parseable.|
|409|5031|The transaction you have submitted has already been processed.|
|401|5040|Your merchant account is not configured for the transaction you attempted.|
|400|5042|The merchant reference number is missing or invalid or it exceeds the maximum permissible length.|
|400|5068|Either you submitted a request that is missing a mandatory field or the value of a field does not match the format expected.|
|404|5269|The ID(s) specified in the URL do not correspond to the values in the system.|
|403|5270|The credentials provided with the request do not have permission to access the requested data.|
|406|5271|You requested a response in the 'Accept' header that is in an unsupported format.|
|406|5272|The 'Content-Type' you specified in request header was submitted in an unsupported format.|
|404|5273|Your client reached our application but we were unable to service your request due to an invalid URL.|
|401|5275|The authentication credentials provided with the request have expired.|
|401|5276|The authentication credentials provided with the request provided have been disabled.|
|401|5277|The authentication credentials provided with the request have been locked due to multiple authentication failures.|
|401|5278|The authentication credentials provided with the request were not accepted for an unknown reason.|
|401|5279|The authentication credentials are invalid.|
|401|5280|The required authentication credentials were not provided.|
|405|5281|The request uses an action (e.g., GET, POST, or PUT) that is not supported by the resource.|
|400|5283|The requested operation can only be executed on a Payment Handle with the status of *PAYABLE*.|
|400|5501|The profile does not have an active credit card.|
|400|5502|Either the payment token is invalid or the corresponding profile or bank account is not active.|

## Payment Errors
|HTTP Status Code|Error Code|Description|
|---------|---------|---------------|
|400|PAYMENTHUB-1 |The submitted payment type and currency code combination is not supported. |
|400|3002|You submitted an invalid card number or brand or combination of card number and brand with your request.|
|400|3004|The zip/postal code must be provided for an AVS check request.|
|400|3005|You submitted an incorrect CVV value with your request.|
|400|3006|You submitted an expired credit card number with your request.|
|402|3007|Your request has failed the AVS check. Note that the amount has still been reserved on the customer's card and will be released in 3–5 business days. Please ensure the billing address is accurate before retrying the transaction.|
|400|3008|You submitted a card type for which the merchant account is not configured.|
|402|3009|Your request has been declined by the issuing bank.|
|402|3011|Your request has been declined by the issuing bank because the card used is a restricted card. Contact the cardholder's credit card company for further investigation.|
|402|3012|Your request has been declined by the issuing bank because the credit card expiry date submitted is invalid.|
|402|3013|Your request has been declined by the issuing bank due to problems with the credit card account.|
|402|3014|Your request has been declined - the issuing bank has returned an unknown response. Contact the card holder's credit card company for further investigation.|
|402|3015|The bank has requested that you process the transaction manually by calling the cardholder's credit card company.|
|402|3016|The bank has requested that you retrieve the card from the cardholder – it may be a lost or stolen card.|
|402|3017|You submitted an invalid credit card number with your request.|
|402|3018|The bank has requested that you retry the transaction.|
|402|3019|Your request has failed the CVV check. Please note that the amount may still have been reserved on the customer's card, in which case it will be released in 3–5 business days.|
|402|3020|The bank has requested that you retry the transaction.|
|404|3021|The confirmation number included in this request could not be found.|
|402|3022|The card has been declined due to insufficient funds.|
|402|3023|Your request has been declined by the issuing bank due to its proprietary card activity regulations.|
|402|3024|Your request has been declined because the issuing bank does not permit the transaction for this card.|
|400|3025|The external processing gateway has reported invalid data.|
|400|3026|The external processing gateway has reported the account type is invalid.|
|402|3027|The external processing gateway has reported a limit has been exceeded.|
|502|3028|The external processing gateway has reported a system error.|
|402|3029|The external processing gateway has rejected the transaction.|
|402|3030|The external processing gateway has reported the transaction is unauthorized.|
|400|3031|The confirmation number you submitted with your request references a transaction that is not on hold.|
|402|3032|Your request has been declined by the issuing bank or external gateway because the card is probably in one of their negative databases.|
|402|3035|Your request has been declined due to exceeded PIN attempts.|
|402|3036|Your request has been declined due to an invalid issuer.|
|402|3037|Your request has been declined because it is invalid.|
|402|3038|Your request has been declined due to customer cancellation.|
|402|3039|Your request has been declined due to an invalid authentication value.|
|402|3040|Your request has been declined because the request type is not permitted on the card.|
|402|3041|Your request has been declined due to a timeout.|
|402|3042|Your request has been declined due to a cryptographic error.|
|402|3044|You have submitted a duplicate request.|
|402|3045|You submitted an invalid date format for this request.|
|402|3046|The transaction was declined because the amount was set to zero.|
|402|3047|The transaction was declined because the amount exceeds the floor limit.|
|402|3048|The transaction was declined because the amount is less than the floor limit.|
|402|3049|The bank has requested that you retrieve the card from the cardholder – the credit card has expired.|
|402|3050|The bank has requested that you retrieve the card from the cardholder – fraudulent activity is suspected.|
|402|3051|The bank has requested that you retrieve the card from the cardholder – contact the acquirer for more information.|
|402|3052|The bank has requested that you retrieve the card from the cardholder – the credit card is restricted.|
|402|3053|The bank has requested that you retrieve the card from the cardholder – please call the acquirer.|
|402|3054|The transaction was declined due to suspected fraud.|
|402|3055|This type of transaction is not supported.|
|402|3056|The original transaction type does not match.|
|402|3057|Please tell cardholder to call the issuer – do not retry transaction.|
|409|5284|An entity with the specified identifier(s) already exists.|
|400|5286|Card with the specified identifier(s) does not exist. |
|404|5288|Card does not belong to consumer. |
|400|5303|Payment instrument already exists.|
|400|5304|Expired card. |
|403|5309|The maximum amount of money allowed for the requested operation is exceeded.|

## Void Authorization Errors
|HTTP Status Code|Error Code|Description|
|---------|---------|---------------|
|400|3500|The confirmation number included in this request could not be found.|
|402|3501|The requested void (Authorization Reversal) amount exceeds the remaining Authorization amount.|
|402|3502|You cannot process a void (Authorization Reversal) transaction against an Authorization that has been settled.|
|402|3503|The void (Authorization Reversal) transaction is not supported for the card type used for the Authorization you are attempting to void.|
|402|3504|The external processing gateway for which your merchant account is configured does not support partial voids (Authorization Reversals).|
|500|3505|The void (Authorization Reversal) could not be completed.|
|402|3506|The void (Authorization Reversal) amount exceeds the remaining amount of the Authorization.|

## Settlement Errors
|HTTP Status Code|Error Code|Description|
|---------|---------|---------------|
|400|3200|You have submitted an invalidly formatted Authorization ID for this Settlement.|
|404|3201|The Authorization ID included in this Settlement request could not be found.|
|402|3202|You have exceeded the maximum number of Settlements allowed.|
|402|3203|The Authorization is either fully settled or cancelled.|
|402|3204|The requested Settlement amount exceeds the remaining Authorization amount.|
|402|3205|The Authorization you are attempting to settle has expired.|
|402|3206|The external processing gateway has rejected the transaction.|
|402|3207|Due to issuer policies, this type of transaction is not allowed.|

## Refund Errors
|HTTP Status Code|Error Code|Description|
|---------|---------|---------------|
|402|3402|The requested Refund amount exceeds the remaining Settlement amount.|
|402|3403|You have already processed the maximum number of refunds allowed for this Settlement.|
|402|3404|The Settlement has already been fully refunded.|
|402|3405|The Settlement you are attempting to Refund has expired.|
|402|3406|The Settlement you are attempting to Refund has not been batched yet. There are no settled funds available to Refund.|
|400|3407|The Settlement referred to by the transaction response ID you provided cannot be found.|
|400|3408|You have submitted an invalidly formatted response ID for the original Purchase or Settlement.|
|402|3412|The Refund transaction you attempted was not permitted because your merchant account is in overdraft.|
|402|3413|The requested Refund amount exceeds the permissible Visa credit ratio.|
|400|3414|The Refund referred to by the transaction response ID you provided cannot be found.|
|402|3415|You cannot cancel this transaction as it is no longer in a pending state.|
|402|3416|The external processing gateway for which your merchant account is configured does not support partial Settlements.|
|402|3417|There is already another request being processed on the transaction referenced for this request.|
|402|3418|The external processing gateway for which your merchant account is configured does not support partial Credits.|
|402|3419|This type of transaction cannot be refunded.|

## Customer Vault Errors
|HTTP Status Code       |Error Code |Description|
|---                    |---        |---|
|409                    |7503       |The card number you are trying to add to this profile is already used by this profile.|
|409                    |7504       |This card has been used for the maximum number of profiles allowed. Please use a different card.|
|409                    |7505       |The *merchantCustomerId* provided for this profile has already been used for another profile.|
|409                    |7506       |The bank account you are trying to add to this profile is already in use.|
|409                    |7507       |The mandate reference you are trying to add to this profile is already in use.|
|400                    |7508       |You submitted an invalid card number or brand or combination of card number and brand with your request.|
|409                    |7509       |The bank account has one or more existing mandates so associated banking information cannot be updated.|
|400                    |7510       |You submitted invalid bank account information for your banking scheme.|
|404                    |7511       |The address ID provided in your request could not be found.|
|400                    |7512       |The merchant's Apple Pay configuration could not be found.|
|400                    |7513       |The Apple Pay token is invalid.|
|404                    |7514       |The payment token has expired.|
|409                    |7515       |The card cannot be added to this profile because the profile has reached the maximum number of cards allowed.|
|400                    |7516       |You need to provide at least one search parameter.|
|400                    |7517       |You need to provide dates with the format YYYY-MM-DDTHH24:MI:SSZ.|
|400                    |7518       |The days between the dates specified exceeds the maximum.|
|400                    |7519       |The pagination limit exceeds the maximum.|
|409                    |7520       |The bank account cannot be added to this profile because the profile has reached the maximum number of bank accounts allowed.|

## Alternate Payments Errors
|HTTP Status   |Error Code                    |Message                                 |Details|
|---           |---                           |---                                     |---|
|402           |ALTERNATE-PAYMENTS-GATEWAY-1  |Transaction cancelled at the gateway    |The transaction was cancelled at the gateway.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-4  |Transaction declined by the gateway     |The transaction declined by the gateway. |
|402           |ALTERNATE-PAYMENTS-GATEWAY-5  |Incomplete transaction                  |The requested operation can only be executed on a completed transaction.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-6  |Over refund                             |The total refund amount cannot exceed the original payment amount.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-7  |Payment expired                         |The payment has expired.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-8  |Over settlement                         |The total Settlement amount cannot exceed the authorized (payment) amount.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-9  |Risk gateway error                      |A risk issue was reported by the gateway.|
|502           |ALTERNATE-PAYMENTS-GATEWAY-10 |Payment type temporarily unavailable    |The gateway is temporarily unavailable due to system maintenance activities.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-11 |Over voidauth                           |The void authorization cannot exceed the amount remaining to settle for the corresponding payment.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-12 |Payment already settled                 |The payment is already partially/fully settled.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-13 |Transaction not refundable yet          |The transaction is not refundable yet.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-14 |Partial settlements not possible        |Partial Settlements are not possible with the selected payment method.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-16 |The requested amount exceeds the allowed maximum for the specified payment type. |The requested amount exceeds the allowed maximum for the specified payment type.|
|504           |ALTERNATE-PAYMENTS-GATEWAY-17 |Your request timed out before it could be completed. |Your request timed out before it could be completed.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-19 |The payment instrument does not have sufficient funds. |The payment instrument does not have sufficient funds.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-20 |The third-party account has not been activated. |The third-party account has not been activated.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-21 |The requested amount is under the allowed minimum amount for the specified payment type. |The requested amount is under the allowed minimum amount for the specified payment type.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-22 |The provided identity details do not match the identity details already present. |The provided identity details do not match the identity details already present.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-23 |The KYC documents provided could not be verified. |The KYC documents provided could not be verified.|
|402           |ALTERNATE-PAYMENTS-GATEWAY-24 |There is an already existing third-party account with the details provided. |There is an already existing third-party account with the details provided.|

<a name="directdebiterrors" title="Direct Debit Errors"></a>
## Direct Debit Errors
|HTTP Status Code   |Error Code     |Description|
|---                |---            |---|
|400                |2004           |The Direct Debit transaction cannot be found.  |
|400                |2011           |You have submitted a mandate reference that does not exist.|
|400                |2012           |You have submitted a mandate reference that is not active yet.|
|400                |2013           |The mandate reference does not have a valid status.|
|400                |2014           |The mandate reference is already in use for the specified bank account information.|
|400                |2017           |The payment token bank scheme does not match the merchant account bank scheme.|
|402                |4002           |The transaction was declined by our Risk Management department.|
  
<a name="directdebitreturncodes" title="Direct Debit Return Codes"></a>
## Direct Debit Return Codes

Occasionally, a Direct Debit API request will be successful, but can fail at the banking network level, e.g., due to insufficient funds or bank account closure. In such cases, the bank scheme provides a Return Code as an explanation. Because Direct Debit requests can take up to 7 days to clear, you cannot be notified of errors such as these via the API response. 
However, you can use the [Paysafe Merchant Back Office](https://developer.paysafe.com/en/rest-apis/reference-information/managing-payments/paysafe-merchant-back-office/) to run reports to view Return Codes in the case where a Direct Debit request has failed.

| Code         | Description                                                                                                                                                      | Bank Scheme |
|--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------|
| RT not found |                                                                                                                                                                  | ACH         |
| CONFIG       | Client configuration problem                                                                                                                                     | ACH         |
| LIMIT        | The maximum amount per check was exceeded.                                                                                                                       | ACH         |
| INVACCT      | Invalid account type.                                                                                                                                            | ACH         |
| INVDIR       | Invalid direction.                                                                                                                                               | ACH         |
| NOPOP        | Merchant not configured or not allowed to run POP transactions - Electronic Check Conversion.                                                                    | ACH         |
| PAPER        | Paper draft and can't send paper.                                                                                                                                | ACH         |
| PARSE        | Parsing problem                                                                                                                                                  | ACH         |
| THOMSON      | Reject due to Thomson database.                                                                                                                                  | ACH         |
| UNKMER       | Unknown merchant.                                                                                                                                                | ACH         |
| DEMO         | Demonstration transaction/ or merchant.                                                                                                                          | ACH         |
| R90          | Invalid MOD digit                                                                                                                                                | ACH         |
| R91          | Invalid ABA. Not nine (9) characters or numeric                                                                                                                  | ACH         |
| R92          | ABA not active                                                                                                                                                   | ACH         |
| R93          | Invalid Tran Code SEC combo                                                                                                                                      | ACH         |
| R94          | Invalid amount for pre-note Tran Code                                                                                                                            | ACH         |
| R95          | Amount is zero (0)                                                                                                                                               | ACH         |
| R96          | Not a valid Tran code                                                                                                                                            | ACH         |
| R97          | Not a valid SEC code                                                                                                                                             | ACH         |
| R98          | Account decryption error                                                                                                                                         | ACH         |
| R99          | OFAC possible match                                                                                                                                              | ACH         |
| R37          | Source Document Presented for Payment                                                                                                                            | ACH         |
| R38          | Stop  Payment on Source Document                                                                                                                                 | ACH         |
| R39          | Improper Source Document                                                                                                                                         | ACH         |
| R53          | Item and ACH Entry Presented for Payment                                                                                                                         | ACH         |
| R75          | Original Return not a Duplicate                                                                                                                                  | ACH         |
| R76          | No Errors Found                                                                                                                                                  | ACH         |
| R83          | Foreign Receiving DFI Unable to Settle                                                                                                                           | ACH         |
| R84          | Entry Not Processed by OGO                                                                                                                                       | ACH         |
| R01          | Insufficient funds                                                                                                                                               | ACH         |
| R02          | Account closed                                                                                                                                                   | ACH         |
| R03          | No account/unable to locate                                                                                                                                      | ACH         |
| R04          | Invalid account number                                                                                                                                           | ACH         |
| R05          | Reserved                                                                                                                                                         | ACH         |
| R06          | Return requested by ODFI                                                                                                                                         | ACH         |
| R07          | Authorization revoked Note 2                                                                                                                                     | ACH         |
| R08          | Stop payment                                                                                                                                                     | ACH         |
| R09          | Uncollected funds                                                                                                                                                | ACH         |
| R10          | Not authorizedNote 2                                                                                                                                             | ACH         |
| R11          | Check truncation entry return                                                                                                                                    | ACH         |
| R12          | Branch sold to another DFI                                                                                                                                       | ACH         |
| R13          | RDFI not qualified to participate/or invalid route                                                                                                               | ACH         |
| R14          | Payee deceased                                                                                                                                                   | ACH         |
| R15          | Beneficiary deceased                                                                                                                                             | ACH         |
| R16          | Account frozen                                                                                                                                                   | ACH         |
| R17          | File record edit criteria                                                                                                                                        | ACH         |
| R18          | Improper effective entry date                                                                                                                                    | ACH         |
| R19          | Amount field error                                                                                                                                               | ACH         |
| R20          | Non transaction account                                                                                                                                          | ACH         |
| R21          | Invalid company ident.                                                                                                                                           | ACH         |
| R22          | Invalid individual ID number                                                                                                                                     | ACH         |
| R23          | Credit entry refused by receiver                                                                                                                                 | ACH         |
| R24          | Duplicate entry                                                                                                                                                  | ACH         |
| R25          | Addenda error                                                                                                                                                    | ACH         |
| R26          | Mandatory field error                                                                                                                                            | ACH         |
| R27          | Trace number error                                                                                                                                               | ACH         |
| R28          | Routing # check digit error                                                                                                                                      | ACH         |
| R29          | Corp cust. adviser not auth.                                                                                                                                     | ACH         |
| R30          | RDFI non-part truncation prob                                                                                                                                    | ACH         |
| R31          | Permissible return entry                                                                                                                                         | ACH         |
| R32          | RDFI non-settlement                                                                                                                                              | ACH         |
| R33          | Return of XCK entry                                                                                                                                              | ACH         |
| R34          | Limited participation DFI                                                                                                                                        | ACH         |
| R35          | Return of improper debit entry                                                                                                                                   | ACH         |
| R36          | Return of improper credit entry                                                                                                                                  | ACH         |
| R40          | Return of ENR entry by Fed. Gov.                                                                                                                                 | ACH         |
| R41          | Invalid transaction code                                                                                                                                         | ACH         |
| R42          | Routing #/check digit error                                                                                                                                      | ACH         |
| R43          | Inv. DFI acct. number                                                                                                                                            | ACH         |
| R44          | Inv. Individual ED number                                                                                                                                        | ACH         |
| R45          | Inv. individual name/company name                                                                                                                                | ACH         |
| R46          | Inv. rep. payee indicator                                                                                                                                        | ACH         |
| R47          | Duplicate enrollment                                                                                                                                             | ACH         |
| R50          | State Law affecting RCK acceptance                                                                                                                               | ACH         |
| R51          | Item is ineligible (RCK)                                                                                                                                         | ACH         |
| R52          | Stop payment on item (RCK)                                                                                                                                       | ACH         |
| R61          | Dishonor                                                                                                                                                         | ACH         |
| R62          | Dishonor                                                                                                                                                         | ACH         |
| R63          | Dishonor                                                                                                                                                         | ACH         |
| R64          | Dishonor                                                                                                                                                         | ACH         |
| R65          | Dishonor                                                                                                                                                         | ACH         |
| R66          | Dishonor                                                                                                                                                         | ACH         |
| R67          | Dishonor                                                                                                                                                         | ACH         |
| R68          | Dishonor                                                                                                                                                         | ACH         |
| R69          | Dishonor                                                                                                                                                         | ACH         |
| R70          | Dishonor                                                                                                                                                         | ACH         |
| R71          | ContestedNote 4                                                                                                                                                  | ACH         |
| R72          | ContestedNote 4                                                                                                                                                  | ACH         |
| R73          | ContestedNote 4                                                                                                                                                  | ACH         |
| R74          | ContestedNote 4                                                                                                                                                  | ACH         |
| R80          | Cross- border payment coding error                                                                                                                               | ACH         |
| R81          | Non-participant in cross-border pgm.                                                                                                                             | ACH         |
| R82          | Invalid foreign RDFI ID                                                                                                                                          | ACH         |
| 900          | Validation Rejection                                                                                                                                             | EFT         |
| 901          | Not sufficient funds (debits only)                                                                                                                               | EFT         |
| 902          | Cannot trace                                                                                                                                                     | EFT         |
| 903          | Payment stopped/recalled                                                                                                                                         | EFT         |
| 904          | Post dated/stale dated                                                                                                                                           | EFT         |
| 905          | Account closed                                                                                                                                                   | EFT         |
| 906          | Account transferred                                                                                                                                              | EFT         |
| 907          | No chequing privileges                                                                                                                                           | EFT         |
| 908          | Funds not cleared                                                                                                                                                | EFT         |
| 909          | Currency/Account Mismatch                                                                                                                                        | EFT         |
| 910          | Payor/payee deceased                                                                                                                                             | EFT         |
| 911          | Account frozen                                                                                                                                                   | EFT         |
| 912          | Invalid/incorrect account number                                                                                                                                 | EFT         |
| 914          | Incorrect payor/payee name                                                                                                                                       | EFT         |
| 915          | Refused by payor/payee                                                                                                                                           | EFT         |
| 916          | Not in accordance with Agreement - Personal                                                                                                                      | EFT         |
| 917          | Agreement Revoked - Personal                                                                                                                                     | EFT         |
| 918          | No Pre-Notification - Personal                                                                                                                                   | EFT         |
| 919          | Not in accordance with Agreement - Business                                                                                                                      | EFT         |
| 920          | Agreement Revoked - Business                                                                                                                                     | EFT         |
| 921          | No Pre-Notification - Business                                                                                                                                   | EFT         |
| 922          | Customer Initiated Return Credit Only                                                                                                                            | EFT         |
| 990          | Institution in Default                                                                                                                                           | EFT         |
| 998          | No Return Agreement                                                                                                                                              | EFT         |
| 4            | TRANSACTION TYPE is invalid or blank. See Appendix 3 for a list of CPA Transaction Types.                                                                        | EFT         |
| 5            | AMOUNT is blank, or not greater than zero.                                                                                                                       | EFT         |
| 6            | DUE DATE is invalid or blank.                                                                                                                                    | EFT         |
| 7            | INSTITUTION (route and/or transit) is not in the correct format, does not exist or is blank.                                                                     | EFT         |
| 8            | ACCOUNT NUMBER is not a valid format for the specified INSTITUTION.                                                                                              | EFT         |
| 9            | ITEM TRACE NO. is invalid.                                                                                                                                       | EFT         |
| 10           | STORED TRANSACTION TYPE is invalid or blank.                                                                                                                     | EFT         |
| 11           | ORIGINATOR SHORT NAME is blank.                                                                                                                                  | EFT         |
| 12           | PAYOR/PAYEE NAME is blank.                                                                                                                                       | EFT         |
| 13           | ORIGINATOR LONG NAME is blank.                                                                                                                                   | EFT         |
| 14           | Originating Direct Clearer ID is invalid or blank.                                                                                                               | EFT         |
| 15           | CROSS REFERENCE is blank.                                                                                                                                        | EFT         |
| 16           | INSTITUTION FOR RETURNS (route and/or transit) is invalid or blank. It should specify your credit union.                                                         | EFT         |
| 19           | Original item trace number is invalid or blank.                                                                                                                  | EFT         |
| 21           | DATA ELEMENT ID is invalid or blank.                                                                                                                             | EFT         |
| E            | Accepted but errors were noted                                                                                                                                   | EFT         |
| M            | Rejected, message authentication code (MAC) failed                                                                                                               | EFT         |
| P            | Partially accepted, at least one transaction set was rejected                                                                                                    | EFT         |
| R            | Rejected                                                                                                                                                         | EFT         |
| W            | Rejected, assurance failed validity tests                                                                                                                        | EFT         |
| X            | Rejected, content after decryption could not be analyzed                                                                                                         | EFT         |
| TR           | Rejected by 824                                                                                                                                                  | EFT         |


<a name="support" title="Help and Support"></a>
# Help and Support

## Existing Merchants

If you are an existing merchant with access to the Paysafe [Business Portal](https://merchant.paysafe.com/portal), 
you can use the portal to open a service request for all your technical and integration-related queries.
For example, the following steps show you how to open a service request to set up webhooks.

**To raise a service request:**
 1. Sign in to the Paysafe Business Portal.
 2. Navigate to **Support** in the left menu.
 ![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/Help1.png)
 3. Click on **New Request**.
 ![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/Help2.png)
 4. Select **Integrations** from the **Category** drop-down list and enter *Webhooks Setup* in the **Subject** field.  
 ![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/Help3.png)
 5. In the **Message** section, enter your callback URL and the list of events about which you want to be notified. See [Using Webhooks](#paymentswebhooks) for details.
 6. Enter your company name in the **Company Name** field and click **Create New Request**.
![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/Help4.png) 


## New Merchants

If you are new to the Paysafe Payments API and want to integrate or if you have a sales enquiry, please contact your sales manager, if you already have one.
You can also reach out to us at <integrations@paysafe.com>.

 >**Note:** Merchants who have previously integrated to either the Paysafe Card Payments API or the Alternate Payments API are still considered new to the Paysafe Payments API.

# Using the Example API Calls (Console Window)

To configure and test the API examples, first click on one of the API calls in the API Reference section and then click **Switch to Console** in the right-hand pane. 
Using the Console window you can update the headers, the request body, and parts of the API endpoint. For example, for many lookup requests you must update the endpoint to include your request ID (e.g., payment_id), which you do by selecting **URI Parameters** and then updating the respective *id* value. 

![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/ApiaryConsole.png)

You must also update the Header to include your API Key by selecting **Headers** and then updating the **Authorization** value using the Base64 version of your API key.
To get your Base64 encoded API key, sign in to the Business Portal and go to **Integrate>API Keys**.
![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/API_authorization.png)

When you are ready to test your example, you can choose between the Production and Mock server environment:

- Production server – This calls the resource on Paysafe's Test system.
- Mock server – This environment simply returns the dummy values in the example response irrespective of the parameters you supply. You do not need to use your account ID or Test API key for this request.

To call the API resource, click **Call Resource**. The response is displayed in the Console window.

<a name="legal" title="Legal and Community"></a>
# Legal and Community
<ul>
<li><a href="https://www.paysafe.com/paysafegroup/privacy-policy/" target="_blank">Privacy Policy</a></li>
<li><a href="https://developer.paysafe.com/en/resources-and-support/terms-of-use/" target="_blank">Terms of Use</a></li>
<li><a href="https://www.paysafe.com/paysafegroup/regulatory-disclosures/" target="_blank">Regulatory Disclosures</a></li>
</ul>

# Release Notes

| Version   | Date           | Details |
|---        |---             |---      |
| v1        | February 2019  | Document release |

# Verify That the Service Is Accessible [GET /v1/monitor]
<a name="verifyservice" title="Verify Service"></a>

This call returns a status of READY if the API is available.

+ Response 200 (application/json)

  + Body
    
            {
                "status" : "READY"
            }

# Group Payment Methods

## Look Up Available Payment Methods [/v1/paymentmethods]

### Look Up Payment Methods [GET /v1/paymentmethods?currencyCode={currencyCode}]
<a name="getpaymentmethods" title="Look Up Payment Methods"></a>


Click on **Look Up Payment Methods** above to see how to look up the payment methods that are enabled for each of your merchant accounts, by currency.

+ Parameters

    + `currencyCode`:`USD`

+ Request Look Up Payment Methods (application/json)
    
    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
+ Response 200 (application/json)

    + Body

            {
                "paymentMethods": [{
                        "paymentMethod": "CARD",
                        "currencyCode": "USD",
                        "accountId": 1009355920
                    },
                    {
                        "paymentMethod": "PAYSAFECARD",
                        "currencyCode": "USD",
                        "accountId": 1009355921
                    },
                    {
                        "paymentMethod": "PAYSAFECASH",
                        "currencyCode": "USD",
                        "accountId": 1009355923
                    }
                ]
            }
            

# Group Payment Handles

## Payment Handle [/v1/paymenthandles]

A Payment Handle is basically a token that represents a payment method that you set up for a customer. Once the Payment Handle is created, you then include the *paymentHandleToken* returned in the Payment Handle request response in a new [payment request](#paymentrequest).  
<br>
> **Note:** A Payment Handle can be used in a [Payment request](#paymentrequest) only if it has the status of **PAYABLE**. 

### Create a Payment Handle [POST]
<a name="paymenthandlerequest" title="Create a Payment Handle"></a>

Click on **Create a Payment Handle** above to see six examples of how to create a Payment Handle object:

* A Payment Handle for a standard credit card authorization
* A Payment Handle for a credit card that is registered for 3D Secure - the response for this request will contain a redirect to present to the customer so they can validate their 3D Secure credentials
* A Payment Handle for a Paysafecard payment
* A Payment Handle for a Paysafecash payment
* A Payment Handle for a Play+ payment
* A Payment Handle for a Skrill payment
* A Payment Handle for an Instant ACH payment
* A Payment Handle for a Paypal payment
* A Payment Handle for an ACH payment
* A Payment Handle for an EFT payment
* A Payment Handle for a VIP Preferred payment
* A Payment Handle for a credit card Standalone Credit
* A Payment Handle for a credit card Verification

 > **Note:** The status of Payment Handles that require the customer to be redirected to a *redirect_payment* URL will have the *status* of INITIATED until the customer verifies the payment instrument. 
 This is the case, for example, for alternate payment methods like Paysafecash and Paysafecard, and for credit cards that must be authenticated for 3D Secure, where the request amount is more than the maximum configured in the Business Portal.


+ Attributes 
    + Include PaymentHandleRequest

+ Request Create Payment Handle for Card without 3D Secure Enabled (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
                "merchantRefNum": "merchantRefNum-101",
                "transactionType": "PAYMENT",
                "card": {
                    "cardNum": "5191330000004415",
                    "cardExpiry": {
                        "month": 10,
                        "year": 2020
                    },
                    "cvv": "111",
                    "holderName": "poorna"
                },
                "paymentType": "CARD",
                "amount": 190,
                "currencyCode": "GBP",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "26359efd-7cfb-4014-a13d-1724e3ff17fa",
              "amount": 190,
              "merchantRefNum": "merchantRefNum-101",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCO3wKcIyLoQbQvw",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ],
              "timeToLiveSeconds": 899,
              "transactionType": "PAYMENT"
            }

+ Request Create Payment Handle for Card with 3D Secure Enabled (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-124",
                "transactionType": "PAYMENT",
                "card": {
                    "cardNum": "4538261230000003",
                    "cardExpiry": {
                        "month": 10,
                        "year": 2020
                    },
                    "cvv": "111",
                    "holderName": "poorna"
                },
                "paymentType": "CARD",
                "amount": 3000,
                "currencyCode": "GBP",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "372b5ee7-6360-4403-b444-164f8f1d2709",
                "amount": 3000,
                "merchantRefNum": "merchantRefNum-124",
                "action": "REDIRECT",
                "currencyCode": "GBP",
                "usage": "SINGLE_USE",
                "status": "INITIATED",
                "paymentType": "CARD",
                "executionMode": "SYNCHRONOUS",
                "customerIp": "172.0.0.1",
                "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "country": "CA",
                    "zip": "M5H 2N2"
                },
                "card": {
                    "cardExpiry": {
                        "month": "10",
                        "year": "2020"
                    },
                    "holderName": "poorna",
                    "cardType": "VI",
                    "cardBin": "453826",
                    "lastDigits": "0003"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ],
                "links": [{
                    "rel": "redirect_payment",
                    "href": "http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709",
                    "method": "GET"
                }],
                "timeToLiveSeconds": 899,
                "transactionType": "PAYMENT"
            }


+ Request Create Payment Handle for Paysafecard (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-201",
                "transactionType": "PAYMENT",
                "paysafecard": {
                    "consumerId": "consumerid001",
                    "minAgeRestriction": 18,
                    "kycLevelRestriction": "SIMPLE",
                    "countryRestriction": "DE"
                },
                "paymentType": "PAYSAFECARD",
                "amount": 500,
                "currencyCode": "USD",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggambling.com/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggambling.com/payment/return/failed",
                        "method": "GET"
                    },
                    {
                        "rel": "default",
                        "href": "https://usgaminggambling.com/payment/",
                        "method": "GET"
                    }
                ]
            }


+ Response 200 (application/json)

    + Body

            {
                "id": "82d57742-e2db-48ea-a726-a60e6f8265a3",
                "paymentType": "PAYSAFECARD",
                "paymentHandleToken": "PHQhlWpTRKzBXubN",
                "merchantRefNum": "5493aaf1a1d6dd13d2b53412f0ec",
                "currencyCode": "USD",
                "dupCheck": true,
                "status": "INITIATED",
                "liveMode": true,
                "usage": "SINGLE_USE",
                "action": "REDIRECT",
                "executionMode": "SYNCHRONOUS",
                "amount": 500,
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "billingDetails": {
                    "street2": "Unit 201",
                    "zip": "M5H 2N2",
                    "city": "Toronto",
                    "country": "CA"
                },
                "customerIp": "172.0.0.1",
                "timeToLiveSeconds": 899,
                "gatewayResponse": {
                    "id": "11822017-3701-41df-aab5-2d24a28ac5e0",
                    "processor": "PAYSAFECARD"
                },
                "paysafecard": {
                    "consumerId": "merchantclientid",
                    "minAgeRestriction": 18,
                    "kycLevelRestriction": "SIMPLE",
                    "countryRestriction": "DE"
                },
                "returnLinks": [{
                        "rel": "default",
                        "href": "https://usgaminggambling.com/payment/"
                    },
                    {
                        "rel": "on_completed",
                        "href": "https://usgaminggambling.com/payment/return/success"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggambling.com/payment/return/failed"
                    }
                ],
                "txnTime": "2019-01-24T10:39:50Z",
                "updatedTime": "2019-01-24T10:39:50Z",
                "statusTime": "2019-01-24T10:39:50Z",
                "links": [{
                    "rel": "redirect_payment",
                    "href": "https://customer.at.paysafecard.com/rest/payment/panel?mid=1090001806&mtid=pay_1090001806_00LwEhZ8WtIy8PmIhRCUi3JScUti6jKi_EUR&amount=0.01&currency=EUR&customerHash=741e624cf6ae4fbca4338cb5597fe531"
                }]
            }

+ Request Create Payment Handle for Paysafecash (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-201",
                "transactionType": "PAYMENT",
                "paysafecash": {
                    "consumerId": "consumerid001",
                    "minAgeRestriction": 18,
                    "kycLevelRestriction": "SIMPLE",
                    "countryRestriction": "DE"
                },
                "paymentType": "PAYSAFECASH",
                "amount": 500,
                "currencyCode": "USD",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggambling.com/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggambling.com/payment/return/failed",
                        "method": "GET"
                    },
                    {
                        "rel": "default",
                        "href": "https://usgaminggambling.com/payment/",
                        "method": "GET"
                    }
                ]
            }


+ Response 200 (application/json)

    + Body

            {
                "id": "82d57742-e2db-48ea-a726-a60e6f8265a3",
                "paymentType": "PAYSAFECARD",
                "paymentHandleToken": "PHQhlWpTRKzBXubN",
                "merchantRefNum": "5493aaf1a1d6dd13d2b53412f0ec",
                "currencyCode": "USD",
                "dupCheck": true,
                "status": "INITIATED",
                "liveMode": true,
                "usage": "SINGLE_USE",
                "action": "REDIRECT",
                "executionMode": "SYNCHRONOUS",
                "amount": 500,
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "billingDetails": {
                    "street2": "Unit 201",
                    "zip": "M5H 2N2",
                    "city": "Toronto",
                    "country": "CA"
                },
                "customerIp": "172.0.0.1",
                "timeToLiveSeconds": 345599,
                "gatewayResponse": {
                    "id": "11822017-3701-41df-aab5-2d24a28ac5e0",
                    "processor": "PAYSAFECARD"
                },
                "paysafecard": {
                    "consumerId": "merchantclientid",
                    "minAgeRestriction": 18,
                    "kycLevelRestriction": "SIMPLE",
                    "countryRestriction": "DE"
                },
                "returnLinks": [{
                        "rel": "default",
                        "href": "https://usgaminggambling.com/payment/"
                    },
                    {
                        "rel": "on_completed",
                        "href": "https://usgaminggambling.com/payment/return/success"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggambling.com/payment/return/failed"
                    }
                ],
                "txnTime": "2019-01-24T10:39:50Z",
                "updatedTime": "2019-01-24T10:39:50Z",
                "statusTime": "2019-01-24T10:39:50Z",
                "links": [{
                    "rel": "redirect_payment",
                    "href": "https://customer.at.paysafecard.com/rest/payment/panel?mid=1090001806&mtid=pay_1090001806_00LwEhZ8WtIy8PmIhRCUi3JScUti6jKi_EUR&amount=0.01&currency=EUR&customerHash=741e624cf6ae4fbca4338cb5597fe531"
                }]
            }

+ Request Create Payment Handle for Play+ (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-124",
                "transactionType": "PAYMENT",
                "sightline": {
                    "consumerId": "123123123"
                },
                "profile": {
                    "firstName": "Poorna",
                    "lastName": "Chand"
                },
                "paymentType": "SIGHTLINE",
                "amount": 3000,
                "currencyCode": "USD",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggamblig/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggamblig/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }


+ Response 200 (application/json)

    + Body

            {
                "id": "11fab6fc-de08-4feb-868b-b4e900ad21c9",
                "merchantRefNum": "merchantRefNum-124",
                "transactionType": "PAYMENT",
                "status": "INITIATED",
                "paymentHandleToken": "qwretewqert",
                "usage": "SINGLE_USE",
                "action": "REDIRECT",
                "executionMode": "SYNCHRONOUS",
                "sightline": {
                    "consumerId": "123123123"
                },
                "profile": {
                    "firstName": "Poorna",
                    "lastName": "Chand"
                },
                "paymentType": "SIGHTLINE",
                "amount": 3000,
                "currencyCode": "USD",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggamblig/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggamblig/payment/return/failed",
                        "method": "GET"
                    }
                ],
                "links": [{
                    "rel": "payment_redirect",
                    "href": "https://api.paysafe.com/alternatepayments/v1/sightline?sessionId=11fab6fc-de08-4feb-868b-b4e900ad11c1",
                    "method": "GET"
                }],
                "timeToLiveSeconds": 899
            }

+ Request Create Payment Handle for Skrill (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-321",
                "transactionType": "PAYMENT",
                "paymentType": "SKRILL",
                "amount": 100,
                "currencyCode": "USD",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggamblig/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggamblig/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }



+ Response 200 (application/json)

    + Body

            {
                "id": "64b614b8-753d-4404-b491-2dd8b817c40b",
                "paymentType": "SKRILL",
                "paymentHandleToken": "PHsLl14Tfi4l22gs",
                "merchantRefNum": " merchantRefNum-321",
                "currencyCode": "USD",
                "dupCheck": true,
                "txnTime": "2019-06-24T14:18:33.000+0000",
                "billingDetails": {
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "customerIp": "172.0.0.1",
                "status": "INITIATED",
                "links": [{
                    "rel": "redirect_payment",
                    "href": "https://api.qa.paysafe.com/alternatepayments/v1/redirect?accountId=1010608990&paymentHandleId=64b614b8-753d-4404-b491-2dd8b817c40b&token=eyJhbGciOiJIUzI1NiJ9.eyJhY2QiOiIxMDEwNjA4OTkwIiwicHlkIjoiNjRiNjE0YjgtNzUzZC00NDA0LWI0OTEtMmRkOGI4MTdjNDBiIiwiZXhwIjoxNTYxMzg3NzEzfQ.LGZ8K3yYqR0_J7iNicVCfcmZFIo8xkiX0hg4WpnHm_c"
                }],
                "liveMode": true,
                "usage": "SINGLE_USE",
                "action": "REDIRECT",
                "executionMode": "SYNCHRONOUS",
                "amount": 100,
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "timeToLiveSeconds": 899,
                "gatewayResponse": {
                    "sid": "9e55a0ac44474c2d9f3813d7f65b07c4",
                    "processor": "SKRILL_QCO"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggamblig/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggamblig/payment/return/failed",
                        "method": "GET"
                    }
                ],
                "transactionType": "PAYMENT",
                "updatedTime": "2019-06-24T14:18:33Z",
                "statusTime": "2019-06-24T14:18:33Z"
            }

+ Request Create Payment Handle for InstantACH (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-321",
                "transactionType": "PAYMENT",
                "paymentType": "INSTANTACH",
                "amount": 100,
                "currencyCode": "USD",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggamblig/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggamblig/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }



+ Response 200 (application/json)

    + Body

            {
                "id": "64b614b8-753d-4404-b491-2dd8b817c40b",
                "paymentType": "INSTANTACH",
                "paymentHandleToken": "PHsLl14Tfi4l22gs",
                "merchantRefNum": " merchantRefNum-321",
                "currencyCode": "USD",
                "dupCheck": true,
                "txnTime": "2019-06-24T14:18:33.000+0000",
                "billingDetails": {
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "customerIp": "172.0.0.1",
                "status": "INITIATED",
                "links": [{
                    "rel": "redirect_payment",
                    "href": "https://api.qa.paysafe.com/alternatepayments/v1/redirect?accountId=1010608990&paymentHandleId=64b614b8-753d-4404-b491-2dd8b817c40b&token=eyJhbGciOiJIUzI1NiJ9.eyJhY2QiOiIxMDEwNjA4OTkwIiwicHlkIjoiNjRiNjE0YjgtNzUzZC00NDA0LWI0OTEtMmRkOGI4MTdjNDBiIiwiZXhwIjoxNTYxMzg3NzEzfQ.LGZ8K3yYqR0_J7iNicVCfcmZFIo8xkiX0hg4WpnHm_c"
                }],
                "liveMode": true,
                "usage": "SINGLE_USE",
                "action": "REDIRECT",
                "executionMode": "SYNCHRONOUS",
                "amount": 100,
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "timeToLiveSeconds": 899,
                "gatewayResponse": {
                    "sid": "9e55a0ac44474c2d9f3813d7f65b07c4",
                    "processor": "SKRILL_QCO"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggamblig/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggamblig/payment/return/failed",
                        "method": "GET"
                    }
                ],
                "transactionType": "PAYMENT",
                "updatedTime": "2019-06-24T14:18:33Z",
                "statusTime": "2019-06-24T14:18:33Z"
            }

+ Request Create Payment Handle for Paypal (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
                "merchantRefNum": "{{$guid}}",
                "transactionType": "PAYMENT",
                "paymentType": "PAYPAL",
                "amount": 500,
                "currencyCode": "USD",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "profile": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "email": "john.doe@paysafe.com"
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "returnLinks": [
                    {
                        "rel": "default",
                        "href": "https://usgaminggamblig.com/payment/return/success"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggamblig.com/payment/return/failed"
                    },
                    {
                        "rel": "on_cancelled",
                        "href": "https://usgaminggamblig.com/payment/return/cancelled"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "9b6f3d64-0588-4b3b-84dd-22f659019455",
                "paymentType": "PAYPAL",
                "paymentHandleToken": "PHqdsODRptrUwddD",
                "merchantRefNum": "3096c389-3562-4eeb-bcd5-aa83a2c1b0dc",
                "currencyCode": "USD",
                "txnTime": "2020-05-07T12:53:25.000+0000",
                "billingDetails": {
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "customerIp": "172.0.0.1",
                "status": "INITIATED",
                "links": [
                    {
                        "rel": "redirect_payment",
                        "href": "https://api.qa.paysafe.com/alternatepayments/v1/redirect?accountId=1013718110&paymentHandleId=9b6f3d64-0588-4b3b-84dd-22f659019455&token=eyJhbGciOiJIUzI1NiJ9.eyJhY2QiOiIxMDEzNzE4MTEwIiwicHlkIjoiOWI2ZjNkNjQtMDU4OC00YjNiLTg0ZGQtMjJmNjU5MDE5NDU1IiwiZXhwIjoxNTg4ODU3ODA1fQ.Q6Bvq5BgZG4SV_LRRR3pbNVS394f4PGlfiuQ7KO0xSg"
                    }
                ],
                "liveMode": false,
                "usage": "SINGLE_USE",
                "action": "REDIRECT",
                "executionMode": "SYNCHRONOUS",
                "amount": 500,
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "timeToLiveSeconds": 899,
                "gatewayResponse": {
                    "id": "PAY-CWEKYH7VBDP4YH38LMROPBIK",
                    "processor": "PAYPAL"
                },
                "returnLinks": [
                    {
                        "rel": "on_cancelled",
                        "href": "https://usgaminggamblig.com/payment/return/cancelled"
                    },
                    {
                        "rel": "default",
                        "href": "https://usgaminggamblig.com/payment/return/success"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggamblig.com/payment/return/failed"
                    }
                ],
                "transactionType": "PAYMENT",
                "updatedTime": "2020-05-07T12:53:25Z",
                "statusTime": "2020-05-07T12:53:25Z",
                "paypal": {
                    "consumerId": "sb-cpfxo1472281@personal.example.com",
                    "consumerMessage": "Paysafe note to payer",
                    "recipientType": "PAYPAL_ID"
                },
                "profile": {
                    "firstName": "John",
                    "lastName": "Doe",
                    "email": "john.doe@paysafe.com"
                }
            }

+ Request Create Payment Handle for VIP Preferred (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-124",
                "transactionType": "PAYMENT",
                "paymentType": "VIPPREFERRED",
                "amount": 3000,
                "currencyCode": "USD",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "vippreferred":{
                    "consumerId": "550726575"
                },
               "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggamblig/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggamblig/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "11fab6fc-de08-4feb-868b-b4e900ad21c9",
                "merchantRefNum": "merchantRefNum-124",
                "transactionType": "PAYMENT",
                "status": "INITIATED",
                "action": "REDIRECT",
                "paymentHandleToken": "qwretewqert",
                "usage": "SINGLE_USE",
                "executionMode": "SYNCHRONOUS",
                "paymentType": "VIPPREFERRED",
                "amount": 3000,
                "currencyCode": "USD",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggamblig/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggamblig/payment/return/failed",
                        "method": "GET"
                    }
                ],
                "links": [{
                    "rel": "payment_redirect",
                    "href": "https://api.paysafe.com/alternatepayments/v1/vippreffered?sessionId=11fab6fc-de08-4feb-868b-b4e900ad11c1",
                    "method": "GET"
                }],
                "timeToLiveSeconds": 899
            }

+ Request Create Payment Handle for ACH (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
              {
              "merchantRefNum": "02058ac9-926b-468e-b3c7-be99e059ba57",
              "transactionType": "PAYMENT",
              "merchantDescriptor": {
                "dynamicDescriptor": "OnlineStore",
                "phone": "12345678"
              },
              "ach": {
                "accountHolderName": "ACH HAR AcctHName",
                "accountType": "SAVINGS",
                "payMethod": "WEB",
                "routingNumber": "998772192",
                "accountNumber": "211589828"
              },
              "paymentType": "ACH",
              "amount": 3000,
              "currencyCode": "USD",
              "customerIp": "204.91.0.11",
              "billingDetails": {
                "nickName": "Joe",
                "street": "123 Street1",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }
            }

+ Response 200 (application/json)

    + Body

             {
              {
              "id": "02058ac9-926b-468e-b3c7-be99e059bw34",
              "merchantRefNum": "02058ac9-926b-468e-b3c7-be99e059ba57",
              "transactionType": "PAYMENT",
              "action": "NONE",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "executionMode": "SYNCHRONOUS",
              "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
              "merchantDescriptor": {
                "dynamicDescriptor": "OnlineStore",
                "phone": "12345678"
              },
              "ach": {
                "lastDigits": "92",
                "accountHolderName": "ACH HAR AcctHName",
                "accountType": "SAVINGS",
                "payMethod": "WEB",
                "routingNumber": "211589828"
              },
              "paymentType": "ACH",
              "amount": 3000,
              "currencyCode": "USD",
              "customerIp": "204.91.0.11",
              "billingDetails": {
                "nickName": "Joe",
                "street": "123 Street1",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }
            }

+ Request Create Payment Handle for EFT (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
             {
                "merchantRefNum": "1cb53843-1a0d-496f-8265-27e7344d71d5",
                "transactionType": "PAYMENT",
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "eft": {
                            "accountHolderName": "First Company",
                            "accountNumber": "998772192",
                            "transitNumber": "22446",
                             "institutionId": "001"
                },
                "paymentType": "EFT",
                "amount": 3000,
                "currencyCode": "CAD",
                "customerIp": "204.91.0.11",
                "billingDetails": {
                    "nickName": "Joe",
                    "street": "123 Street1",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                }
            }
            }

+ Response 200 (application/json)

    + Body

            {
               {
                "id" : "02058ac9-926b-468e-b3c7-be99e059bw35",
                "merchantRefNum": "1cb53843-1a0d-496f-8265-27e7344d71d5",
                "transactionType": "PAYMENT",
                 "action": "NONE",
                "usage": "SINGLE_USE",
                "status": "PAYABLE",
                "executionMode": "SYNCHRONOUS",
                "paymentHandleToken": "SCyGZDlUuZ9zxjye",
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
               "eft": {
                            "accountHolderName": "First Company",
                            "lastDigits": "92",
                            "transitNumber": "22446",
                             "institutionId": "001"
                        },
                "paymentType": "EFT",
                "amount": 3000,
                "currencyCode": "CAD",
                "customerIp": "204.91.0.11",
                "billingDetails": {
                    "nickName": "Joe",
                    "street": "123 Street1",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                }
            }
            }


+ Request Create Payment Handle for Card for Standalone Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-190",
              "transactionType": "STANDALONE_CREDIT",
              "card": {
                "cardNum": "4538261230000003",
                "cardExpiry": {
                  "month": 10,
                  "year": 2020
                },
                "cvv": "111",
                "holderName": "poorna"
              },
              "paymentType": "CARD",
              "amount": 3000,
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "372b5ee7-6360-4403-b444-164f8f1d2709",
              "amount": 3000,
              "merchantRefNum": "merchantRefNum-190",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "VI",
                "cardBin": "453826",
                "lastDigits": "0003"
              },
              "timeToLiveSeconds": 899,
              "transactionType": "STANDALONE_CREDIT"
            }
            
+ Request Create Payment Handle for Card for Verification (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-196",
              "transactionType": "VERIFICATION",
              "card": {
                "cardNum": "4107857757053670",
                "cardExpiry": {
                  "month": 12,
                  "year": 2034
                },
                "cvv": "222"
              },
              "paymentType": "CARD",
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "16113177-3d68-4c91-8f69-ce41903f1446",
              "merchantRefNum": "merchantRefNum-196",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "timeToLiveSeconds": 899,
              "transactionType": "VERIFICATION",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCfZX0QEvEvSszKy",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "cardType": "VI",
                "cardBin": "410785",
                "lastDigits": "3670"
              }
            }




### Get Payment Handle [GET /v1/paymenthandles/{paymenthandle_id}]
<a name="getpaymenthandle" title="Look Up a Payment Handle"></a>

Click on **Get Payment Handle** above to see how to look up a Payment Handle using the ID returned in the response to the original request.

+ Parameters

    + paymenthandle_id : `26359efd-7cfb-4014-a13d-1724e3ff17fa` - This is the Payment Handle ID returned in the response to the [Payment Handle creation request](#paymenthandlerequest).

+ Request Look Up Payment Handle (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

    + Body

            {
              "id": "26359efd-7cfb-4014-a13d-1724e3ff17fa",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-115",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "EXPIRED",
              "timeToLiveSeconds": 0,
              "transactionType": "PAYMENT",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SC0YsGIIgFksiOsQ",
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success"
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed"
                        "method": "GET"
                    }
                ]
            }

### Get Payment Handle Using Merchant Reference Number [GET /v1/paymenthandles?merchantRefNum={merchant_ref_num}]
<a name="getpaymenthandlemerchantrefnum" title="Look Up a Payment Handle Using a Merchant Reference Number"></a>

Click on **Get Payment Handle Using Merchant Reference Number** above to see how to look up a Payment Handle using the merchant reference number used in the original request.

+ Parameter

    + merchant_ref_num : `13995817730005389` - This is the *merchantRefNum* used in the original Payment Handle creation request.
         _Mandatory_
    + limit : `32` (number) - This is the total number of records to return. Default = 10.
        _Optional_ _Max=50_
    + offset: `0` (number) - This is the starting position, where 0 is the first record. Default = 0.
        _Optional_ 
    + startDate : `2019-01-26` (UTC Date) - This is the start date in UTC. Default = 30 days before the *endDate*.
        _Optional_
    + endDate : `2019-03-26` (UTC Date) - This is the end date in UTC. Default = current date and time.
        _Optional_

+ Request Look Up Payment Handle Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

     + Attributes
        + Include paymenthandles

    + Body

            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "paymentHandles": [{
                    "id": "cc719995-59ed-4146-a936-b54db72bcaa8",
                    "amount": 1900,
                    "merchantRefNum": "merchantRefNum-130",
                    "action": "NONE",
                    "currencyCode": "GBP",
                    "usage": "SINGLE_USE",
                    "status": "EXPIRED",
                    "timeToLiveSeconds": 0,
                    "transactionType": "PAYMENT",
                    "paymentType": "CARD",
                    "executionMode": "SYNCHRONOUS",
                    "customerIp": "172.0.0.1",
                    "paymentHandleToken": "SC0YsGIIgFksiOsQ",
                    "billingDetails": {
                        "street": "100 Queen",
                        "street2": "Unit 201",
                        "city": "Toronto",
                        "country": "CA",
                        "zip": "M5H 2N2"
                    },
                    "card": {
                        "cardExpiry": {
                            "month": "12",
                            "year": "2034"
                        },
                        "holderName": "poorna",
                        "cardType": "MC",
                        "cardBin": "519133",
                        "lastDigits": "4415"
                    },
                    "returnLinks": [{
                            "rel": "on_completed",
                            "href": "https://US_commerce_site/payment/return/success",
                            "method": "GET"
                        },
                        {
                            "rel": "on_failed",
                            "href": "https://US_commerce_site/payment/return/failed",
                            "method": "GET"
                        }
                    ]
                }]
            }

# Group Verifications 

Verification allows merchants to validate a credit card without charging any amount on the card. 

## Verification [/v1/verifications]

### Verification [POST]
<a name="verificationrequest" title="Verify a Credit Card"></a>

Click on **Verification** above to see how to submit a Verification request using Payment Handle Token.

+ Attributes (VerificationResponse)

+ Request Verify a Credit Card (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

    + Body

            {
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "dupCheck": false,
              "description": "Verify card for payment request"
            }
     
+ Response 200 (application/json)

    + Body

            {
                "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
                "paymentHandleToken": "SCUgzJL5jlRIKCiX",
                "merchantRefNum": "20095817730019123",
                "customerIp": "10.10.12.64",
                "currencyCode": "USD",
                "paymentType": "CARD",
                "description": "Verify card for payment request",
                "txnTime": "2018-12-11T16:33:49Z",
                "gatewayResponse": {
                    "authCode": "XXXXXX",
                    "avsResponse": "MATCH",
                    "cvvVerification": "NOT_PROCESSED"
                },
                "status": "COMPLETED"
            }

### Get Verification [GET /v1/verifications/{verification_id}]
<a name="getverification" title="Look Up a Verification"></a>

Click on **Get Verification** above to see how to look up a Verification request using the ID returned in the response to the original request.

+ Parameter

   + verification_id : `0c62a67c-e12e-4876-aa1a-20f9ec1f0352` - This is the ID returned in the response to the Verification request.


+ Response 200 (application/json)

    + Body

            {
                "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
                "paymentHandleToken": "SCUgzJL5jlRIKCiX",
                "merchantRefNum": "20095817730019123",
                "customerIp": "10.10.12.64",
                "currencyCode": "USD",
                "paymentType": "CARD",
                "description": "Verify card for payment request",
                "txnTime": "2018-12-11T16:33:49Z",
                "gatewayResponse": {
                    "authCode": "XXXXXX",
                    "avsResponse": "MATCH",
                    "cvvVerification": "NOT_PROCESSED"
                },
                "status": "COMPLETED"
            }
            
### Get Verification Using Merchant Reference Number [GET /v1/verifications?merchantRefNum={merchant_ref_num}]
<a name="getverificationmerchantrefnum" title="Look Up a Verification Using a Merchant Reference Number"></a>

Click on **Get Verification Using Merchant Reference Number** above to see how to look up a Verification request using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : 20095817730019123 - This is the merchant reference number created by the merchant and submitted as part of the request. 
        _Mandatory_
    + limit : `32` (number) - This is the total number of records to return. Default = 10.
        _Optional_ _Max=50_
    + offset: `0` (number) - This is the starting position, where 0 is the first record. Default = 0.
        _Optional_ 
    + startDate : `2019-01-26` (UTC Date) - This is the start date in UTC. Default = 30 days before the *endDate*.
        _Optional_
    + endDate : `2019-03-26` (UTC Date) - This is the end date in UTC. Default = current date and time.
        _Optional_

+ Response 200 (application/json)

     + Attributes
        + Include verifications
  
   + Body

            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "verifications": [{
                    "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
                    "paymentHandleToken": "SCUgzJL5jlRIKCiX",
                    "merchantRefNum": "20095817730019123",
                    "customerIp": "10.10.12.64",
                    "currencyCode": "USD",
                    "paymentType": "CARD",
                    "description": "Verify card for payment request",
                    "txnTime": "2018-12-11T16:33:49Z",
                    "gatewayResponse": {
                        "authCode": "XXXXXX",
                        "avsResponse": "MATCH",
                        "cvvVerification": "NOT_PROCESSED"
                    },
                    "status": "COMPLETED"
                }]
            }

# Group Payments

## Payments [/v1/payments]

Payment requests allow you to process a payment using the *paymentHandleToken* that you have [previously created for the payment instrument you want to use](#paymenthandlerequest). The examples below include a *paymentHandleToken* created for a credit card.

### Process Payment [POST]
<a name="paymentrequest" title="Post Payment Using Payment Handle Token"></a>

Click on **Process Payment** above to see two examples of how to create a Payment request using a Payment Handle token:

* A Payment request that will have to be settled later
* A Payment request that authorizes and settles the Payment in a single request by setting the *settleWithAuth* parameter to *true*


+ Attributes 
    + Include PaymentsRequest

+ Request Process a Card Payment Using a Payment Handle Token (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-108",
              "amount": 1900,
              "currencyCode": "GBP",
              "dupCheck": true,
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "customerIp": "10.10.12.64",
              "description": "Magazine subscription"
            }
            
+ Response 200 (application/json)

    + Body

            {
                "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
                "amount": 1900,
                "merchantRefNum": "merchantRefNum-108",
                "settleWithAuth": false,
                "paymentHandleToken": "SCZJg09GWSv36NLB",
                "txnTime": "2018-12-14T15:12:18Z",
                "customerIp": "10.10.12.64",
                "dupCheck": true,
                "description": "Magazine subscription",
                "currencyCode": "GBP",
                "paymentType": "CARD",
                "status": "COMPLETED",
                "availableToSettle": 1900,
                "gatewayResponse": {
                    "authCode": "135880",
                    "avsResponse": "MATCH",
                    "cvvVerification": "MATCH"
                }
            }

+ Request Process a Card Payment Including Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-108",
              "amount": 1900,
              "currencyCode": "GBP",
              "dupCheck": true,
              "settleWithAuth": true,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "customerIp": "10.10.12.64",
              "description": "Magazine subscription"
            }
            
+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": true,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-14T15:12:18Z",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "paymentType": "CARD",
              "status": "COMPLETED",
              "availableToSettle": 0,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              }
            }

### Get Payments [GET /v1/payments/{payment_id}]
<a name="getpayment" title="Look Up a Payment"></a>

Click on **Get Payments** above to see how to look up a Payment using the ID returned in the response to the original request.

+ Parameter

   + payment_id : `3aeb9c63-6386-46a3-9f8e-f452e722228a` - This is the ID returned in the response to the Payments request.

+ Request Look Up Payment (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-14T15:12:18Z",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "paymentType": "CARD",
              "status": "COMPLETED",
              "availableToSettle": 1900,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              }
            }
            
### Get Payments Using Merchant Reference number [GET /v1/payments?merchantRefNum={merchant_ref_num}]
<a name="getpaymentmerchantrefnum" title="Look Up a Payment Using a Merchant Reference Number"></a>

Click on **Get Payment Using Merchant Reference Number** above to see how to look up a Payment using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-145` - This is the merchant reference number created by the merchant and submitted as part of the Payments request.
    _Mandatory_
    + limit : `32` (number) - This is the total number of records to return. Default = 10.
        _Optional_ _Max=50_
    + offset: `0` (number) - This is the starting position, where 0 is the first record. Default = 0.
        _Optional_ 
    + startDate : `2019-01-26` (UTC Date) - This is the start date in UTC. Default = 30 days before the *endDate*.
        _Optional_
    + endDate : `2019-03-26` (UTC Date) - This is the end date in UTC. Default = current date and time.
        _Optional_

+ Request Look Up Payment Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

     + Attributes
        + Include payments

    + Body

            {
              "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
              "payments": [
                {
                  "id": "8190c675-6d68-4cd7-a29c-55b406addaeb",
                  "amount": 1900,
                  "merchantRefNum": "merchantRefNum-145",
                  "settleWithAuth": false,
                  "paymentHandleToken": "SChfCGCURe5NiLIv",
                  "authCode": "107212",
                  "txnTime": "2018-12-14T15:12:18Z",
                  "customerIp": "10.10.12.64",
                  "description": "Magazine subscription",
                  "currencyCode": "GBP",
                  "paymentType": "CARD",
                  "status": "COMPLETED",
                  "avsResponse": "MATCH",
                  "cvvVerification": "MATCH",
                  "availableToSettle": 40
                }
              ]
            }
            
# Group Void Authorizations 

A Void Authorization request allows you to void (or cancel) an authorization request, provided the authorization has not yet been settled. An authorization is part of a [payment request](#paymentrequest). If *settleWithAuth* is set to *true* in the payment request, then 
the authorization and settlement are completed in the same request, in which case you would not be able to process a Void Authorization.

## Void Authorizations [/v1/voidauths]

### Void Authorization [POST /v1/payments/{payment_id}/voidauths]
<a name="voidauthrequest" title="Void Authorization"></a>

Click on **Void Authorization** above to see how to submit a Void Authorization request. You can void an Authorization **only if** it has not yet been settled.

+ Parameter

    + payment_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Payment request.
    
+ Attributes (voidAuthResponse)

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
              "amount": 900,
              "merchantRefNum": "13915817720025003"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "50175d73-be3d-4594-b570-9095a17121de",
              "merchantRefNum": "13915817720025003",
              "amount": 900,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "COMPLETED"
            }

### Get Void Authorization [GET /v1/voidauths/{void_auth_id}]
<a name="getvoidauth" title="Look Up a Void Authorization"></a>

Click on **Get Void Authorization** above to see how to look up a Void Authorization using the ID returned in the response to the original request.

+ Parameter

   + void_auth_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Void Authorization request.


+ Request Look Up Void Authorization (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

    + Body

            {
              "id": "65bb2b2e-be2f-4ae8-9a2a-f24239309c7d",
              "merchantRefNum": "1391581772002515624",
              "amount": 900,
              "txnTime": "2018-12-10T11:17:23Z",
              "status": "COMPLETED"
            }
            
### Get Void Authorization Using Merchant Reference Number [GET /v1/voidauths?merchantRefNum={merchant_ref_num}]
<a name="getvoidauthmerchantrefnum" title="Look Up a Void Authorization Using a Merchant Reference Number"></a>

Click on **Get Void Authorization Using Merchant Reference Number** above to see how to look up a Void Authorization using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : 1391581772002515624 - This is the merchant reference number created by the merchant and submitted as part of the request. 
        _Mandatory_
    + limit : `32` (number) - This is the total number of records to return. Default = 10.
        _Optional_ _Max=50_
    + offset: `0` (number) - This is the starting position, where 0 is the first record. Default = 0.
        _Optional_ 
    + startDate : `2019-01-26` (UTC Date) - This is the start date in UTC. Default = 30 days before the *endDate*.
        _Optional_
    + endDate : `2019-03-26` (UTC Date) - This is the end date in UTC. Default = current date and time.
        _Optional_

+ Request Look Up Void Authorization Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

     + Attributes
        + Include voidAuths
  
   + Body

            {
              "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
              "voidAuths": [
                {
                  "id": "65bb2b2e-be2f-4ae8-9a2a-f24239309c7d",
                  "merchantRefNum": "1391581772002515624",
                  "amount": 900,
                  "txnTime": "2018-12-10T11:17:23Z",
                  "status": "COMPLETED"
                }
              ]
            }



# Group Settlements 

## Settlements [/v1/payments/{payment_id}/settlements]

A Settlement request allows you to settle a previous authorization that was not settled in the original Purchase request (i.e., where *settleWithAuth* was set to *false*). 

+ Parameter

    + payment_id : `c64ecbf2-a942-4f7c-b412-70217a0eb16e` - This is the ID returned in the response to the Payments request.

### Process Settlement [POST]
<a name="settlementrequest" title="Process Settlement"></a>

Click on **Process Settlement** above to see two examples of how to process a Settlement request:

* A regular Settlement, where the initial request was an Authorization that now has to be settled
* A Settlement that is split into multiple merchant accounts, for merchant accounts that are configured to do so

+ Attributes
    + Include Settlements

+ Request Process a Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-117",
              "dupCheck":true,
              "amount": 190
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "merchantRefNum": "merchantRefNum-117",
              "dupCheck":true,
              "amount": 190,
              "id": "a07b0597-f106-4790-9661-f0d452619f5d",
              "availableToRefund": 190,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "PENDING"
            }
            
+ Request Process a Settlement with Split Payouts (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"

    + Body

            {
                "merchantRefNum": "merchantRef_2016_04_11_05",
                "dupCheck": true,
                "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "d1fb46ee-2736-4ef5-a724-f263ace75373",
                "merchantRefNum": "merchantRef_2016_04_11_05",
                "amount": 5500,
                "availableToRefund": 5500,
                "dupCheck": true,
                "txnTime": "2017-02-14T15:12:18Z",
                "status": "COMPLETED",
                "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }

### Cancel Settlement [PUT /v1/settlements/{settlement_id}]
<a name="cancelsettlement" title="Cancel a Settlement"></a>

Click on **Cancel Settlement** above to see how to cancel a Settlement. You must include the *status* parameter set to *CANCELLED*.

> **Note:** You can cancel a Settlement only if the payment type is CARD and the status is PENDING.

+ Parameter

    + settlement_id : `d9bcfd85-8aa6-469d-80a3-e2ca196544da` - This is the ID returned in the response to the Settlement request. 

+ Request Cancel a Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
              "status": "CANCELLED"
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "CANCELLED"
            }
            

### Get Settlements [GET /v1/settlements/{settlement_id}]
<a name="getsettlement" title="Look Up a Settlement"></a>

Click on **Get Settlements** above to see how to look up a Settlement using the ID returned in the response to the original request.

+ Parameter

   + settlement_id : `ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85` - This is the ID returned in the response to the Settlement request.

+ Request Look Up Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

    + Body

            {
              "merchantRefNum": "merchantRefNum-144",
              "amount": 40,
              "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
              "availableToRefund": 40,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "PENDING"
            }
            
### Get Settlements Using Merchant Reference Number [GET /v1/settlements?merchantRefNum={merchant_ref_num}]
<a name="getsettlementmerchantrefnum" title="Look Up a Settlement Using a Merchant Reference Number"></a>

Click on **Get Settlements Using Merchant Reference Number** above to see how to look up a Settlement using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-144` - This is the merchant reference number created by the merchant and submitted as part of the request.
        _Mandatory_
   + limit : `32` (number) - This is the total number of records to return. Default = 10.
        _Optional_ _Max=50_
   + offset: `0` (number) - This is the starting position, where 0 is the first record. Default = 0.
         _Optional_ 
   + startDate : `2019-01-26` (UTC Date) - This is the start date in UTC. Default = 30 days before the *endDate*.
        _Optional_
   + endDate : `2019-03-26` (UTC Date) - This is the end date in UTC. Default = current date and time.
        _Optional_

+ Request Look Up Settlement Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)
    
     + Attributes
        + Include settlementsArray

    + Body

            {
              "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
              "settlements": [
                {
                  "merchantRefNum": "merchantRefNum-144",
                  "amount": 40,
                  "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
                  "availableToRefund": 40,
                  "txnTime": "2018-12-11T16:33:49Z",
                  "status": "PENDING"
                }
              ]
            }

# Group Refunds

## Refunds [/v1/settlements/{settlement_id}/refunds]

+ Parameter

    + settlement_id : `d9bcfd85-8aa6-469d-80a3-e2ca196544da` - This is the ID returned in the response to the Settlement request or to the Payment request where the authorization was settled in the same request.

### Process Refund [POST]
<a name="refundrequest" title="Process Refund"></a>

Click on **Process Refund** above to see two examples of how to process a Refund request:

* A regular Refund
* A Refund that is split into multiple merchant accounts, for merchant accounts that are configured to do so

+ Attributes
    + Include Refunds

+ Request Process a Refund (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "dupCheck": true
            }
                        
+ Response 200 (application/json)

    + Body

            {
                "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                "merchantRefNum": "merchantRefNum-118",
                "amount": 190,
                "txnTime": "2018-12-11T16:33:49Z",
                "status": "PENDING"
            }
            
+ Request Process a Refund with Split Payouts (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "dupCheck": true,
              "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }
                        
+ Response 200 (application/json)

    + Body

            {
                "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                "merchantRefNum": "merchantRefNum-118",
                "amount": 190,
                "txnTime": "2018-12-11T16:33:49Z",
                "status": "PENDING",
                "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }

### Cancel Refund [PUT /v1/refunds/{refund_id}]
<a name="cancelrefund" title="Cancel a Refund"></a>

Click on **Cancel Refund** above to see how to cancel a Refund. You must include the *status* parameter set to *CANCELLED*.

> **Note:** You can cancel a Refund only if the payment type is CARD and the status is PENDING. 

+ Parameter

    + refund_id : `c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725` - This is the ID returned in the response to the Refund request
    
+ Request Cancel a Refund (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
              "status": "CANCELLED"
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "txnTime": "2018-12-10T11:19:51Z",
              "status": "CANCELLED"
            }
            
### Get Refund [GET /v1/refunds/{refund_id}]
<a name="getrefund" title="Look Up a Refund"></a>

Click on **Get Refund** above to see how to look up a Refund using the ID returned in the response to the original request.

+ Parameter

    + refund_id : `c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725` - This is the ID returned in the response to the Refund request

+ Request Look Up Refund (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

    + Body

            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "PENDING"
            }
            
### Get Refunds Using Merchant Reference Number [GET /v1/refunds?merchantRefNum={merchant_ref_num}]
<a name="getrefundmerchantrefnum" title="Look Up a Refund Using a Merchant Reference Number"></a>

Click on **Get Refunds Using Merchant Reference Number** above to see how to look up a Refund using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-118` - This is the merchant reference number created by the merchant and submitted as part of the request.
        _Mandatory_
    + limit : `32` (number) - This is the total number of records to return. Default = 10.
        _Optional_ _Max=50_
    + offset: `0` (number) - This is the starting position, where 0 is the first record. Default = 0.
        _Optional_ 
    + startDate : `2019-01-26` (UTC Date) - This is the start date in UTC. Default = 30 days before the *endDate*.
        _Optional_
    + endDate : `2019-03-26` (UTC Date) - This is the end date in UTC. Default = current date and time.
        _Optional_

+ Request Look Up Refund Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)
    
     + Attributes
        + Include refundsArray

    + Body

            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "refunds": [{
                    "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                    "merchantRefNum": "merchantRefNum-118",
                    "amount": 190,
                    "txnTime": "2018-12-11T16:33:49Z",
                    "status": "PENDING"
                }]
            }
         
# Group Standalone Credits 

## Standalone Credits [/v1/standalonecredits]

Standalone Credits allow merchants to issue credits to cardholders without requiring a previous Payment/Settlement.

**Note:** If your merchant category code (MCC) is listed as able to [process Original Credits](#originalcreditrequest), you must not use Standalone Credits.


### Process Standalone Credit [POST]
<a name="standalonecreditrequest" title="Process Standalone Credit"></a>

Click on **Process Standalone Credit** above to see how to process a Standalone Credit request. 

+ Attributes (OriginalCreditResponse)

+ Request Process a Standalone Credit Using a Payment Handle Token (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
            
    + Body

            {
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "currencyCode": "GBP",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Pay surplus"
            }    
            
+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "paymentType": "CARD",
              "status": "PENDING",
              "description": "Pay surplus"
            }
            
### Cancel Standalone Credit [PUT /v1/standalonecredits/{standalone_credit_id}]
<a name="cancelstandalonecredit" title="Cancel a Standalone Credit"></a>

Click on **Cancel Standalone Credit** above to see how to cancel a Standalone Credit. You must include the *status* parameter set to *CANCELLED*.

> **Note:** You can cancel a Standalone Credit only if the payment type is CARD and the status is PENDING.

+ Parameter

    + standalone_credit_id : `e075f2ae-dfc4-4f6d-8d89-61158367b6a6`
    

+ Request Cancel a Standalone Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
              "status": "CANCELLED"
            }


+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "status": "CANCELLED"
            }
            

### Get Standalone Credit [GET /v1/standalonecredits/{standalone_credit_id}]
<a name="getstandalonecredit" title="Look Up a Standalone Credit"></a>

Click on **Get Standalone Credit** above to see how to look up a Standalone Credit using the ID returned in the response to the original request.

+ Parameter

    + standalone_credit_id : `e075f2ae-dfc4-4f6d-8d89-61158367b6a6`

+ Request Look Up Standalone Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "paymentType": "CARD",
              "status": "PENDING",
              "description": "Pay surplus"
            }
            
### Get Standalone Credit Using Merchant Reference Number  [GET /v1/standalonecredits?merchantRefNum={merchant_ref_num}]
<a name="getstandalonecreditmerchantrefnum" title="Look Up a Standalone Credit Using a Merchant Reference Number"></a>

Click on **Get Standalone Credit Using Merchant Reference Number** above to see how to look up a Standalone Credit using the merchant reference number used in the original request.

+ Parameter

   + merchantRefNum : `merchantRefNum-101` (string) - This is the merchant reference number created by the merchant and submitted as part of the request.
        _Mandatory_
    + limit : `32` (number) - This is the total number of records to return. Default = 10.
        _Optional_ _Max=50_
    + offset: `0` (number) - This is the starting position, where 0 is the first record. Default = 0.
        _Optional_ 
    + startDate : `2019-01-26` (UTC Date) - This is the start date in UTC. Default = 30 days before the *endDate*.
        _Optional_
    + endDate : `2019-03-26` (UTC Date) - This is the end date in UTC. Default = current date and time.
        _Optional_

+ Request Look Up Standalone Credit Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

    + Attributes
        + Include standalonecredits
    
    + Body

            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "standaloneCredits": [{
                    "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
                    "amount": 40,
                    "merchantRefNum": "merchantRefNum-151",
                    "paymentHandleToken": "SC9mbfZSITB5OwDJ",
                    "customerIp": "204.91.0.12",
                    "currencyCode": "GBP",
                    "paymentType": "CARD",
                    "status": "PENDING",
                    "description": "Pay surplus"
                }]
            }
            

# Group Original Credits 

## Original Credits [/v1/originalcredits]

Original Credits allow merchants with specific merchant category codes (MCCs) to issue winnings as credits to cardholders, without requiring a previous Payment/Settlement.

**Note:** Acquirers and processors do not necessarily support all available MCCs; before integrating, you should contact [Integration Support](https://developer.paysafe.com/en/resources-and-support/contact-us/) for details.

Worldpay Inc. (formerly Vantiv) supports Original Credit transactions with the following MCCs:
<a name="originalcreditmccs" title="Orignal Credit MCCs"></a>

 * 5816
 * 7800
 * 7801
 * 7802
 * 7994

Original Credit transfers are supported for non-Worldpay Inc. merchants with the following MCCs:
 * 7994
 * 7995

### Process Original Credit [POST]
<a name="originalcreditrequest" title="Process Original Credit"></a>

Click on **Process Original Credit** above to see how to process an Original Credit request. 

+ Attributes (OriginalCreditResponse)

+ Request Process an Original Credit Using a Payment Handle Token (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "currencyCode": "GBP",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Winning payment from Loto 649"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "txnTime": "2018-12-11T16:33:49Z",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "paymentType": "CARD",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }

### Cancel Original Credit [PUT /v1/originalcredits/{original_credit_id}]
<a name="canceloriginalcredit" title="Cancel an Original Credit"></a>

Click on **Cancel Original Credit** above to see how to cancel an Original Credit. You must include the *status* parameter set to *CANCELLED*.

> **Note:** You can cancel an Original Credit only if it has the payment type CARD and the status is PENDING.

+ Parameter

   + original_credit_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Original Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.

+ Request Cancel an Original Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"
    
    + Body

            {
              "status": "CANCELLED"
            }


+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "status": "CANCELLED"
            }
            

### Get Original Credit [GET /v1/originalcredits/{original_credit_id}]
<a name="getoriginalcredit" title="Look Up an Original Credit"></a>

Click on **Get Original Credit** above to see how to look up an Original Credit using the ID returned in the response to the original request.

+ Parameter

   + original_credit_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Original Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.


+ Request Look Up Original Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "txnTime": "2018-12-11T16:33:49Z",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "paymentType": "CARD",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }
            
### Get Original Credit Using Merchant Reference Number [GET /v1/originalcredits?merchantRefNum={merchant_ref_num}]
<a name="getoriginalcreditmerchantrefnum" title="Look Up an Original Credit Using a Merchant Reference Number"></a>

Click on **Get Original Credit Using Merchant Reference Number** above to see how to look up an Original Credit using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : merchantRefNum-151 - This is the merchant reference number created by the merchant and submitted as part of the request. 
         _Mandatory_
    + limit : `32` (number) - This is the total number of records to return. Default = 10.
        _Optional_ _Max=50_
    + offset: `0` (number) - This is the starting position, where 0 is the first record. Default = 0.
        _Optional_ 
    + startDate : `2019-01-26` (UTC Date) - This is the start date in UTC. Default = 30 days before the *endDate*.
        _Optional_
    + endDate : `2019-03-26` (UTC Date) - This is the end date in UTC. Default = current date and time.
        _Optional_

+ Request Look Up Original Credit Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            Simulator: "EXTERNAL"

+ Response 200 (application/json)
    
     + Attributes
        + Include originalCredits

   + Body

            {
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                },
                "originalCredits": [{
                    "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
                    "amount": 40,
                    "merchantRefNum": "merchantRefNum-151",
                    "txnTime": "2018-12-11T16:33:49Z",
                    "paymentHandleToken": "SC9mbfZSITB5OwDJ",
                    "customerIp": "204.91.0.12",
                    "currencyCode": "GBP",
                    "paymentType": "CARD",
                    "status": "PENDING",
                    "description": "Winning payment from Loto 649"
                }]
            }
            

# Group Customers

## Customers [/v1/customers]

### Create a Customer [POST]
<a name="createcustomerrequest" title="Create a Customer"></a>

Click on **Create a Customer** above to see how to create a customer. 

You can create a customer in order to store credit card information to the customer profile by [adding a Customer Payment Handle](#createcustomerpaymenthandlerequest) to that customer.

+ Attributes
    + Include Customer Base

+ Request Create a Customer (application/json)
        
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"

    + Body

            {
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 10,
                    "day": 24
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888"
            }
            
+ Response 200 (application/json)

    + Body

            {
                "id": "ccb24e28-6e38-47ce-8815-94706c5b608c",
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "day": 24,
                    "month": 10,
                    "year": 1981
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888",
                "status": "ACTIVE"
            }

### Create a Customer Using a Single-Use Payment Handle Token [POST]
<a name="createcustomerrequesttoken" title="Create a Customer"></a>

Click on **Create a Customer Using a Single-Use Payment Handle Token** above to see how to create a customer using a single-use Payment Handle Token. 

**Note:** If the single-use Payment Handle Token you use for this request has profile-related information associated with it (e.g., *firstName*, *lastName*, *email*, etc.), 
then if you include those same fields in this request, your values included here will override the values from the Payment Handle Token.

+ Attributes
    + Include Customer Base
    + `paymentHandleTokenFrom`:`SCURPCc6nEwXcdBQ` (string, required) - This is the *paymentHandleToken* that is present in the response to a [single-use Payment Handle creation request](#paymenthandlerequest).
        _length<=36_

+ Request Create a Customer Using a Single-Use Payment Handle Token (application/json)
        
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"

    + Body

            {
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 10,
                    "day": 24
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888",
                "paymentHandleTokenFrom": "SCURPCc6nEwXcdBQ"
            }
            
+ Response 200 (application/json)

    + Body

            {
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 10,
                    "day": 24
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888",
                "paymentHandleTokenFrom": "SCURPCc6nEwXcdBQ",
                "status": "ACTIVE",
                "addresses": [{
                    "id": "3722476e-4891-426b-8dcd-a25ad3d14ffe",
                    "street": "Andhra bank lane",
                    "street2": "Manikonda",
                    "city": "Hyderabad",
                    "state": "TS",
                    "country": "IN",
                    "zip": "500089",
                    "status": "ACTIVE"
                }],
                "paymentHandles": [{
                    "id": "0aee8670-ae5e-44dc-bf9d-73ad84dabbf3",
                    "merchantRefNum": "9c011804-c123-40f3-8cd5-de21aec8d88e",
                    "status": "INITIATED",
                    "usage": "MULTI_USE",
                    "paymentType": "CARD",
                    "action": "REDIRECT",
                    "executionMode": "SYNCHRONOUS",
                    "accountId": "1001535430",
                    "paymentHandleToken": "Cvz7pumqVb8rnJX",
                    "card": {
                        "lastDigits": "0007",
                        "cardExpiry": {
                            "month": "12",
                            "year": "2024"
                        },
                        "cardBin": "400344",
                        "cardType": "VI",
                        "singleUseToken": "SCR37YxqciqpGeKF",
                        "billingDetailsId": "3722476e-4891-426b-8dcd-a25ad3d14ffe"
                    },
                    "paymentHandleTokenFrom": "SCR37YxqciqpGeKF"
                }]
            }


### Get Customer [GET /v1/customers/{customer_id}]

<a name="getcustomerrequest" title="Look Up a Customer"></a>
Click on **Get Customer** above to see how to look up a Customer using the ID returned in the response to [the original request](#createcustomerequest).
    
+ Parameters
    + customer_id:`ccb24e28-6e38-47ce-8815-94706c5b608c` (string, required) - This is the unique ID returned in the response to the [customer creation request](#createcustomerrequest).

+ Request Get Customer (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
            
+ Response 200 (application/json)

    + Body

            {
                "id": "ccb24e28-6e38-47ce-8815-94706c5b608c",
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "day": 24,
                    "month": 10,
                    "year": 1981
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888",
                "status": "ACTIVE"
            }

### Get Customer Using Merchant Customer ID [GET /v1/customers?merchantCustomerId={merchant_customer_id}]
<a name="getcustomerrequest" title="Look Up a Customer"></a>
Click on **Get Customer Using Merchant Reference Number** above to see how to look up a Customer using the merchant reference number used in [the original request](#createcustomerequest).
    
+ Parameters
    + merchant_customer_id:`mycustomer10` (string, required) - This is a customer ID that the merchant provided with the [customer creation request](#createcustomerrequest) for their own internal customer identification.. 

+ Response 200 (application/json)

    + Body

            {
                "id": "ccb24e28-6e38-47ce-8815-94706c5b608c",
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "day": 24,
                    "month": 10,
                    "year": 1981
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888",
                "status": "ACTIVE",
                "meta": {
                    "numberOfRecords": 1,
                    "limit": 10,
                    "page": 1
                }
            }

### Get Customer Including Subcomponents [GET /v1/customers/{customer_id}?fields={fields}]
<a name="getcustomerrequestsubcomponents" title="Look Up a Customer Including Subcomponents"></a>
Click on **Get Customer Including Subcomponents** above to see how to look up a Customer along with its associated sub-components using one or more comma-separated values from this list:
  * paymenthandles
  * addresses
  
    
+ Parameters
    + customer_id:`ccb24e28-6e38-47ce-8815-94706c5b608c` (string, required) - This is the unique ID returned in the customer creation response.
    + fields:`addresses,paymenthandles` (string, optional) - This is a comma-separated list of sub-components.

+ Request Get Customer (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
            
+ Response 200 (application/json)

    + Body

            {
                "id": "326d6b3b-3c47-4ee2-9b6b-3801ec97a09d",
                "status": "ACTIVE",
                "merchantCustomerId": "mycustomer1",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "day": 24,
                    "month": 10,
                    "year": 1981
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888",
                "addresses": [{
                    "id": "3722476e-4891-426b-8dcd-a25ad3d14ffe",
                    "street": "Andhra bank lane",
                    "street2": "Manikonda",
                    "city": "Hyderabad",
                    "state": "TS",
                    "country": "IN",
                    "zip": "500089",
                    "status": "ACTIVE"
                }],
                "paymentHandles": [{
                    "id": "0aee8670-ae5e-44dc-bf9d-73ad84dabbf3",
                    "merchantRefNum": "9c011804-c123-40f3-8cd5-de21aec8d88e",
                    "status": "INITIATED",
                    "usage": "MULTI_USE",
                    "paymentType": "CARD",
                    "action": "REDIRECT",
                    "executionMode": "SYNCHRONOUS",
                    "accountId": "1001535430",
                    "paymentHandleToken": "Cvz7pumqVb8rnJX",
                    "creationDate": 1547726600919,
                    "card": {
                        "lastDigits": "0007",
                        "cardExpiry": {
                            "month": "12",
                            "year": "2024"
                        },
                        "cardBin": "400344",
                        "cardType": "VI",
                        "singleUseToken": "SCR37YxqciqpGeKF"
                    },
                    "billingDetailsId": "3722476e-4891-426b-8dcd-a25ad3d14ffe",
                    "paymentHandleTokenFrom": "SCR37YxqciqpGeKF"
                }]
            }

### Update a Customer [PUT /v1/customers/{customer_id}]

<a name="updatecustomerrequest" title="Update a Customer"></a>
Click on **Update a Customer** above to see how update a Customer using the ID returned in the response to [the original request](#createcustomerequest).

**Note:** You must provide all of the elements of the customer when you are updating it, including the elements that are not changing. Elements that are part of an existing customer but that are not included in the update request will be set to *null* in the resulting customer.

+ Attributes
    + Include Customer Base

+ Parameters
    + customer_id:`326d6b3b-3c47-4ee2-9b6b-3801ec97a09d` (string, required) - This is the unique ID returned in the response to the [customer creation request](#createcustomerrequest).

+ Request Update a Customer (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"

    + Body

            {
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smythe",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 11,
                    "day": 24
                },
                "email": "john.smythe@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888"
            }


            
+ Response 200 (application/json)
    
    + Body

            {
                "id": "326d6b3b-3c47-4ee2-9b6b-3801ec97a09d",
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smythe",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 11,
                    "day": 24
                },
                "email": "john.smythe@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888",
            }

### Delete a Customer [DELETE /v1/customers/{customer_id}]
<a name="deletecustomerrequest" title="Delete a Customer"></a>

Click on **Delete a Customer** above to see how delete a Customer.

+ Parameters
    + customer_id:`a7b218e7-290a-4434-aea2-a1f985fc26c0` (string, required) - This is the customer ID returned in the response (in NETBANX this is called the Consumer ID).

+ Request Delete a Customer (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
            
+ Response 200 (application/json)

# Addresses [/addresses]
<a name="addressesrequest" title="Addresses Request"></a>

## Create an Address [POST /v1/customers/{customer_id}/addresses]
<a name="createaddressrequest" title="Create an Address"></a>
Click on **Create an Address** above to see how to add an address to [Customer you have already created](#createcustomerequest).

+ Attributes

    + Include Address

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the ID of the customer to which you are adding an address.

+ Request Create an Address (application/json)
        
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"

    + Body

            {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA",
                "state": "ON",
                "phone": "647-788-3901",
                "defaultShippingAddressIndicator": true
            }


+ Response 200 (application/json)
    
    + Body

            {
                "id": "6a275b7c-6f11-4ed1-ae77-21071724574a",
                "status": "ACTIVE",
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA",
                "state": "ON",
                "phone": "647-788-3901",
                "defaultShippingAddressIndicator": true
            }

## Get Address [GET /v1/customers/{customer_id}/addresses/{address_id}]
<a name="getaddressrequest" title="Look Up an Address"></a>

Click on **Get Address** above to see how to look up an Address using the ID returned in the response to [the original request](#createaddressrequest).
    
+ Parameters
    + customer_id:`a7b218e7-290a-4434-aea2-a1f985fc26c0` (string, required) - This is the customer ID returned in the response.
    + address_id:`6a275b7c-6f11-4ed1-ae77-21071724574a` (string, required) - This is the address ID returned in the response.

+ Request Get Address (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
            
+ Response 200 (application/json)

    + Body

            {
                "id": "6a275b7c-6f11-4ed1-ae77-21071724574a",
                "status": "ACTIVE",
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA",
                "state": "ON",
                "phone": "647-788-3901",
                "defaultShippingAddressIndicator": true
            }

## Update an Address [PUT /v1/customers/{customer_id}/addresses/{address_id}]
<a name="updateaddressrequest" title="Update an Address"></a>

Click on **Update an Address** above to see how update an Address using the ID returned in the response to [the original request](#createaddressrequest).

**Note:** You must provide all of the elements of the address when you are updating it, including the elements that are not changing. Elements that are part of an existing address but that are not included in the update request will be set to *null* in the resulting address.

+ Parameters
    + customer_id:`a7b218e7-290a-4434-aea2-a1f985fc26c0` (string, required) - This is the customer ID returned in the response.
    + address_id:`6a275b7c-6f11-4ed1-ae77-21071724574a` (string, required) - This is the address ID returned in the address creation response.

+ Attributes

    + Include Address

+ Request Update an Address (application/json)
        
    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
            
    + Body

            {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 2201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA",
                "state": "ON",
                "phone": "647-788-3901",
                "defaultShippingAddressIndicator": true
            }


+ Response 200 (application/json)
    
    + Body

            {
                "id": "6a275b7c-6f11-4ed1-ae77-21071724574a",
                "status": "ACTIVE",
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 2201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA",
                "state": "ON",
                "phone": "647-788-3901",
                "defaultShippingAddressIndicator": true
            }

## Delete an Address [DELETE /v1/customers/{customer_id}/addresses/{address_id}]
<a name="deletecustomerrequest" title="Delete a Customer"></a>

Click on **Delete an Address** above to see how delete an Address.

+ Parameters
    + customer_id:`a7b218e7-290a-4434-aea2-a1f985fc26c0` (string, required) - This is the customer ID returned in the response (in NETBANX this is called the Consumer ID).
    + address_id:`6a275b7c-6f11-4ed1-ae77-21071724574a` (string, required) - This is the address ID returned in the address creation response. 

+ Request Delete a Customer (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
            
+ Response 200 (application/json)

# Customer Payment Handles [/paymenthandles]
<a name="paymenthandlerequest" title="Payment Handle Request"></a>

## Create a Payment Handle for a Customer [POST /v1/customers/{customer_id}/paymenthandles]
<a name="createcustomerpaymenthandlerequest" title="Create a Customer Payment Handle"></a>

Click on **Create a Payment Handle for a Customer** above to create a Payment Handle for a [Customer you have already created](#createcustomerequest).

>**Note:** Currently, only CARD, ACH and EFT are supported as a *paymentType* parameter.

The *paymentHandleToken* returned in the response can be used for [payment requests in the Payments API](#paymentrequest), once it has the *status* of PAYABLE.

To modify its *status* to PAYABLE, include this *paymentHandleToken* as the value for the *paymentHandleTokenFrom* parameter in a request to [create a regular Payment Handle](#paymenthandlerequest).  
That response in turn contains a *paymentHandleToken* with a status of PAYABLE, with the *usage* parameter set to SINGLE_USE. Once you use this single-use *paymentHandleToken* 
in a [successful payment request](#paymentrequest), then the *status* of the Customer *paymentHandleToken* created here will change to PAYABLE. 

**Note:** Although the *billingDetails* parameter is optional, it is recommended that you include it when you create the customer Payment Handle 
because a Payment request that uses the *paymentHandleToken* in the response will fail AVS checks unless there is a billing address associated with it. 
If you do not include it when creating the customer Payment Handle, you should then [update the Payment Handle](#updatecustomerpaymenthandlerequest) with the *billingDetailsId* before using it for transaction requests.

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.

+ Attributes 
    + Include PaymentHandleRequest Customer

+ Request Create a Payment Handle for a Customer (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
        
    + Body

            {
                "merchantRefNum": "xzcxzcwqeqwewewqer",
                "paymentType": "CARD",
                "currencyCode": "GBP",
                "customerIp": "10.10.12.64",
                "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                "card": {
                    "cardNum": "4222222222222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    },
                    "cvv": "111"
                }
            }

+ Response 200 (application/json)
    
    + Body

             {
                 "id": "218d68c7-77c8-4d37-9d06-0a4bb5272adb",
                 "merchantRefNum": "ad9c23c2-509b-43ae-bf5d-64554c9fc378",
                 "status": "INITIATED",
                 "usage": "MULTI_USE",
                 "paymentType": "CARD",
                 "action": "NONE",
                 "paymentHandleToken": "Cy4WEGJ9IWIkcUn",
                 "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
            
                 "card": {
                     "lastDigits": "2222",
                     "cardExpiry": {
                         "month": "12",
                         "year": "2021"
                     }
                 }
             }

## Create a Multi-Use Payment Handle Using a Single-Use Payment Handle Token [POST /v1/customers/{customer_id}/paymenthandles]
<a name="createpaymenthandlerequestsut" title="Create a Payment Handle Using a Single-Use Payment Handle Token"></a>

Click on **Create a Multi-Use Payment Handle Using a Single-Use Payment Handle Token** above to save a payment instrument that was created using a regular [single-use Payment Handle Token](#paymenthandlerequest) to a customer. 
The single-use Payment Handle Token must still be valid &ndash; i.e., the *timeToLiveSeconds* has not expired.

To use the saved payment instrument, use the multi-use Payment Handle token returned in the response to this request to create another [single-use Payment Handle Token](#paymenthandlerequest) and then use the *paymentHandleToken* in that response to 
[process a Payment request](#paymentrequest). Once that Payment request is successful, the *status* of the multi-use *paymentHandleToken* will become PAYABLE.

>**Note:** Currently, single-use Payment Handle tokens that have CARD, ACH and EFT as the *paymentType* are supported.

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.

+ Attributes 

    + `paymentHandleTokenFrom`:`SC7nLsLzHWVqI62i` (string, required) - This is the *paymentHandleToken* returned in the response to [a single-use Payment Handle Token creation request](#paymenthandlerequest).
        _length<=36_
    + Include PaymentHandleRequest Customer SUT Response

+ Request Create a Multi-Use Payment Handle Using Single-Use Payment Handle Token (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"

    + Body
    
             {
                 "paymentHandleTokenFrom": "SC7nLsLzHWVqI62i"
             }
        
+ Response 200 (application/json)

    + Body

            {
                "id": "218d68c7-77c8-4d37-9d06-0a4bb5272adb",
                "merchantRefNum": "ad9c23c2-509b-43ae-bf5d-64554c9fc378",
                "status": "INITIATED",
                "usage": "MULTI_USE",
                "paymentType": "CARD",
                "action": "NONE",
                "paymentHandleTokenFrom": "SC7nLsLzHWVqI62i",
                "paymentHandleToken": "Cy4WEGJ9IWIkcUn",
                "card": {
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    }
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                },
                "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd"
            }


## Get Customer Payment Handle [GET /v1/customers/{customer_id}/paymenthandles/{paymenthandle_id}]
<a name="getcustomerpaymenthandlerequest" title="Look Up a Customer Payment Handle"></a>

Click on **Get Customer Payment Handle** above to see how to look up a Customer Payment Handle using the ID returned in the response to [the original request](#createcustomerpaymenthandlerequest).
    
+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.
    + paymenthandle_id:`218d68c7-77c8-4d37-9d06-0a4bb5272adb` (string, required) - This is the Payment Handle ID returned in the response to the [Customer Payment Handle creation request](#createcustomerpaymenthandlerequest).

+ Request Look Up a Customer Payment Handle (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
            
+ Response 200 (application/json)

    + Body

            {
                "id": "218d68c7-77c8-4d37-9d06-0a4bb5272adb",
                "merchantRefNum": "ad9c23c2-509b-43ae-bf5d-64554c9fc378",
                "status": "INITIATED",
                "usage": "MULTI_USE",
                "paymentType": "CARD",
                "action": "NONE",
                "paymentHandleTokenFrom": "SC7nLsLzHWVqI62i",
                "paymentHandleToken": "Cy4WEGJ9IWIkcUn",
                "card": {
                    "lastDigits": "2222",
                    "cardBin": "422222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    }
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                },
                "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd"
            }


## Update a Customer Payment Handle [PUT /v1/customers/{customer_id}/paymenthandles/{paymenthandle_id}]
<a name="updatecustomerpaymenthandlerequest" title="Update a Customer Payment Handle"></a>

Click on **Update a Customer Payment Handle** above to see how update a Customer Payment Handle using the ID returned in the response to [the original request](#createcustomerpaymenthandlerequest).

**Note:** You must provide all of the elements of the Payment Handle when you are updating it, including the elements that are not changing. 
Elements that are part of an existing Payment Handle but that are not included in the update request will be set to null in the resulting Payment Handle, 
with the exception of the *cardNum* element.


+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.
    + paymenthandle_id:`218d68c7-77c8-4d37-9d06-0a4bb5272adb` (string, required) - This is the Payment Handle ID returned in the response to the [Customer Payment Handle creation request](#createcustomerpaymenthandlerequest).

+ Attributes 
    + Include PaymentHandleRequest Customer

+ Request Update a Payment Handle for a Customer (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
        
    + Body

            {
                "merchantRefNum": "xzcxzcwqeqwewewqer",
                "paymentType": "CARD",
                "currencyCode": "GBP",
                "customerIp": "10.10.12.64",
                "billingDetails": {
                    "street": "Andhra bank lane",
                    "street2": "Manikonda",
                    "city": "Hyderabad",
                    "state": "TS",
                    "country": "IN",
                    "zip": "500089"
                },
                "card": {
                    "cardNum": "4222222222222",
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    },
                    "cvv": "111"
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                }
            }

+ Response 200 (application/json)
    
    + Body

            {
                "id": "218d68c7-77c8-4d37-9d06-0a4bb5272adb",
                "merchantRefNum": "ad9c23c2-509b-43ae-bf5d-64554c9fc378",
                "status": "INITIATED",
                "usage": "MULTI_USE",
                "paymentType": "CARD",
                "action": "NONE",
                "paymentHandleToken": "Cy4WEGJ9IWIkcUn",
                "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                "card": {
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    }
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                }
            }

## Update a Multi-Use Customer Payment Handle with a Single-Use Payment Handle Token [PUT /v1/customers/{customer_id}/paymenthandles/{paymenthandle_id}]
<a name="updatemultiusepaymenthandlerequest" title="Update a Customer Multi-Use Payment Handle with a Single-Use Payment Handle Token"></a>

Click on **Update a Multi-Use Customer Payment Handle with a Single-Use Payment Handle Token** above to see how update a Customer Payment Handle using the ID returned in the response to [the original request](#paymenthandlerequest).

**Note:** You must provide all of the elements of the payment handle while creating single use payment handle when you are updating multi-use payment handle with it, 
including the elements that are not changing. Elements that are part of an existing payment handle but that are not included in the update request will be set to null in the resulting Payment Handle, with the exception of the *cardNum* element.

If you want to update the payment information in a Customer Payment Handle, you must [create a new single-use Payment Handle](#paymenthandlerequest) containing the new payment information and use 
the *paymentHandleToken* returned in that response as the value for the *paymentHandleTokenFrom* parameter in this request.

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.
    + paymenthandle_id:`218d68c7-77c8-4d37-9d06-0a4bb5272adb` (string, required) - This is the Payment Handle ID returned in the response to the [Customer Payment Handle creation request](#createcustomerpaymenthandlerequest).

+ Attributes 

    + `paymentHandleTokenFrom`:`SC7nLsLzHWVqI62i` (string, required) - This is the *paymentHandleToken* returned in the response while [creating the single-use payment handle](#paymenthandlerequest).
        _length<=36_

+ Request Update a Multi-Use Customer Payment Handle with a Single-Use Payment Handle (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
        
    + Body

             {
                 "paymentHandleTokenFrom":"SC7nLsLzHWVqI62i"
             }

+ Response 200 (application/json)

    + Body

            {
                "id": "218d68c7-77c8-4d37-9d06-0a4bb5272adb",
                "merchantRefNum": "ad9c23c2-509b-43ae-bf5d-64554c9fc378",
                "status": "INITIATED",
                "usage": "MULTI_USE",
                "paymentType": "CARD",
                "action": "NONE",
                "paymentHandleToken": "Cy4WEGJ9IWIkcUn",
                "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                "card": {
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "01",
                        "year": "2032"
                    }
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                }
            }


## Delete a Customer Payment Handle [DELETE /v1/customers/{customer_id}/paymenthandles/{paymenthandle_id}]
<a name="deletecardrequest" title="Delete a Card"></a>

Click on **Delete a Customer Payment Handle** above to see how delete a Customer Payment Handle.

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) from which you are deleting the Payment Handle.
    + paymenthandle_id:`218d68c7-77c8-4d37-9d06-0a4bb5272adb` (string, required) - This is the Payment Handle ID returned in the response to the [Customer Payment Handle creation request](#createcustomerpaymenthandlerequest).

+ Request Delete a Customer Payment Handle (application/json)

    + Headers        

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
            
+ Response 200 (application/json)

# Single-Use Tokens [/singleusecustomertokens]

## Create a Single-Use Customer Token [POST /v1/customers/{customer_id}/singleusecustomertokens]
<a name="createcustomersut" title="Create a Single-Use Customer Token"></a>

Click on **Create a Single-Use Customer Token** above to create a single-use token for a [Customer you have already created](##createpaymenthandlerequestsut).

The *singleUseCustomerToken* returned in the response is then used in the Payments Checkout SDK (for the *singleUseCustomerToken* parameter) when you want to [use saved cards and addresses](#usingsavedcardscheckout). 
Any addresses and/or payment details that have been saved for this *customer_id* would then be displayed in the Payments Checkout.

**Note:** The *customer_id* used in this request must be taken from [a Customer created using a single-use Payment Handle Token](#createpaymenthandlerequestsut).

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) for which you are creating the single-use token.

+ Attributes
    + paymentTypes:`[CARD]` (array, required) - This specifies the payment type for which you are creating the single-use token.
    + Include PaymentHandleRequest SUT
    
+ Request Create a Single-Use Customer Token (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"
        
    + Body

            {
                "merchantRefNum":"Ref123",
                "paymentTypes": ["CARD"]
            }
        
+ Response 200  (application/json)

    + Body

             {
                 "id": "f39ebd23-e203-498f-9981-dfbc49882959",
                 "merchantRefNum":"Ref123",
                 "profileId": "59cce04e-e429-4016-9d3f-1e579f3aa2ad",
                 "timeToLiveSeconds": 899,
                 "status": "ACTIVE",
                 "singleUseCustomerToken": "SPFAB1cA5iwdu48H",
                 "paymentTypes": [
                     "CARD"
                 ],
                 "locale": "en_US",
                 "firstName": "John",
                 "middleName": "James",
                 "lastName": "Smith",
                 "dateOfBirth": {
                     "day": 24,
                     "month": 10,
                     "year": 1981
                 },
                 "email": "john.smith@email.com",
                 "phone": "777-444-8888",
                 "ip": "192.0.126.111",
                 "nationality": "Canadian",
                 "addresses": [{
                     "id": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                     "nickName": "Home",
                     "street": "100 Queen",
                     "street2": "Unit 201",
                     "city": "Toronto",
                     "state": "ON",
                     "country": "CA",
                     "zip": "M5H 2N2",
                     "phone": "647-788-3901",
                     "status": "ACTIVE",
                     "defaultShippingAddressIndicator": true
                 }],
                 "paymentHandles": [{
                     "id": "f258f338-ff2f-4bee-9560-0d476ed7c1b4",
                     "status": "INITIATED",
                     "usage": "SINGLE_USE",
                     "paymentType": "CARD",
                     "paymentHandleToken": "SClcqO9awdvdgjoe",
                     "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                     "card": {
                         "lastDigits": "0000",
                         "cardExpiry": {
                             "month": "10",
                             "year": "2020"
                         },
                         "cardBin": "403711",
                         "cardType": "VI",
                         "holderName": "Dilip"
                     }
                 }]
             }

## Get Single-Use Customer Token [GET /v1/singleusecustomertokens/{singleusecustomertoken_id}]
<a name="getcustomersut" title="Look Up a Card"></a>

Click on **Get Single-Use Customer Token** above to see how to look up a Single-Use Customer Token using the ID returned in the response to [the original request](#createcustomersut).

Use the *singleUseCustomerToken* returned in the response in the Payments Checkout SDK when you want to [use saved cards and addresses](#usingsavedcardscheckout), provided the *timeToLiveSeconds* has not expired.
    
+ Parameters
    + singleusecustomertoken_id:`f39ebd23-e203-498f-9981-dfbc49882959` (string, required) - This is the Single-Use Customer Token ID returned in the response to the [Single-Use Customer Token creation request](#createcustomersut).

+ Request Look Up a Single-Use Customer Token (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            Simulator: "EXTERNAL"

+ Response 200  (application/json)

    + Body

             {
                 "id": "f39ebd23-e203-498f-9981-dfbc49882959",
                 "merchantRefNum":"Ref123",
                 "profileId": "59cce04e-e429-4016-9d3f-1e579f3aa2ad",
                 "timeToLiveSeconds": 899,
                 "status": "ACTIVE",
                 "singleUseCustomerToken": "SPFAB1cA5iwdu48H",
                 "paymentTypes": [
                     "CARD"
                 ],
                 "locale": "en_US",
                 "firstName": "John",
                 "middleName": "James",
                 "lastName": "Smith",
                 "dateOfBirth": {
                     "day": 24,
                     "month": 10,
                     "year": 1981
                 },
                 "email": "john.smith@email.com",
                 "phone": "777-444-8888",
                 "ip": "192.0.126.111",
                 "nationality": "Canadian",
                 "addresses": [{
                     "id": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                     "nickName": "Home",
                     "street": "100 Queen",
                     "street2": "Unit 201",
                     "city": "Toronto",
                     "state": "ON",
                     "country": "CA",
                     "zip": "M5H 2N2",
                     "phone": "647-788-3901",
                     "status": "ACTIVE",
                     "defaultShippingAddressIndicator": true
                 }],
                 "paymentHandles": [{
                     "id": "f258f338-ff2f-4bee-9560-0d476ed7c1b4",
                     "status": "INITIATED",
                     "usage": "SINGLE_USE",
                     "paymentType": "CARD",
                     "paymentHandleToken": "SClcqO9awdvdgjoe",
                     "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                     "card": {
                         "lastDigits": "0000",
                         "cardExpiry": {
                             "month": "10",
                             "year": "2020"
                         },
                         "cardBin": "403711",
                         "cardType": "VI",
                         "holderName": "Dilip"
                     }
                 }]
             }


# Data Structures

## accordD
+ accordD (object)
    + Properties
        + `financingType`:`DEFERRED_PAYMENT` (enum) - This is the type of financing offered.
            + Members
                + DEFERRED_PAYMENT - Deferred payment financing
                + EQUAL_PAYMENT - Equal payment financing
        + `plan`:`124` (string) - This is the plan number for this financing transaction.
            _length<=3_
        + `gracePeriod`:`12` (number) - This is the grace period, in months, associated with deferred payment transactions.
            _max=99_
        + `term`:`12` (number) - This is the number of payments, in months, for equal payment transactions.
            _max=99_

## Address
+ `id`:`5d4db3bc-34c9-417f-a051-0d992ad9284e` (string) - This is the ID of request, returned in the response.
    _Read Only, length<=36_
+ nickName:`Home` (string) - This is an alias defined by the customer for this address (e.g., "home address").
    _Optional, length<=50_
+ street:`100 Queen` (string) - This is the first line of the customer's street address. **Note:** This is required only when the address is to be used in association with a bank account.
    _Mandatory, length<=50_
+ street2:`Unit 201` (string) - This is the second line of the customer's street address, if required.
    __Optional, length<=50_
+ city:`Toronto` (string) - This is the city where the address is located. **Note:** This is required only when the address is to be used in association with a bank account.
    _Mandatory, length<=40_
+ zip:`M5H 2N2` (string) - This is the zip, postal, or post code of the customer's address.
    _Mandatory, length<=10_
+ country:`CA` (string) - This is the country where the address is located. See [Country Codes](#countrycodes).
    _Mandatory, length=2_
+ state:`ON` (string) - This is the state/province/region in which the customer lives.
    _Optional, length<=2_
+ phone:`647-788-3901` (string) - This is the customer's phone number.
    _Optional, length<=40_
+ defaultShippingAddressIndicator:`true` (boolean) - Flag to mark this address as the default shipping address.
    _Conditional_
+ status: `ACTIVE`(enum) - This is the status of the address.
    _Read Only_
    + Members
        + ACTIVE
        + INITIAL

## Addresses
+ addresses (array)
    + (object)
        + Properties
            + `id`:`5d4db3bc-34c9-417f-a051-0d992ad9284e` (string) - This is the ID of request, returned in the response.
                _Read Only, length<=36_
            + nickName:`Home` (string) - This is an alias defined by the customer for this address (e.g., "home address").
                _Optional, length<=50_
            + street:`100 Queen` (string) - This is the first line of the customer's street address. **Note:** This is required only when the address is to be used in association with a bank account.
                _Mandatory, length<=50_
            + street2:`Unit 201` (string) - This is the second line of the customer's street address, if required.
                _Optional, length<=50_
            + city:`Toronto` (string) - This is the city where the address is located. **Note:** This is required only when the address is to be used in association with a bank account.
                _Mandatory, length<=40_
            + zip:`M5H 2N2` (string) - This is the zip, postal, or post code of the customer's address.
                _Mandatory, length<=10_
            + country:`CA` (string) - This is the country where the address is located. See [Country Codes](#countrycodes).
                _Mandatory, length=2_
            + state:`ON` (string) - This is the state/province/region in which the customer lives.
                _Optional, length<=40_
            + phone:`647-788-3901` (string) - This is the customer's phone number.
                _Optional, length<=40_
            + defaultShippingAddressIndicator:`true` (boolean) - Flag to mark this address as the default shipping address.
                _Conditional_

## Authentications Object
+ authentication (object) - These are the 3D Secure authentication details.
    + `id`:`5d4db3bc-34c9-417f-a051-0d992ad9284e` (string) - This is the ID of authentication, returned in the response.
        _Read Only, length<=36_
    + `eci`:`5` (number) - This is the [E-Commerce Indicator](#authenticationobject).
    + `cavv`:`AAABBhkXYgAAAAACBxdiENhf7A+=` (string) - This is the Cardholder Authentication Verification Value, indicating that the transaction has been authenticated.
        _Read Only, length<=80_
    + `xid`:`aWg4N1ZZOE53TkFrazJuMmkyRDA=` (string) - This is the transaction identifier returned by the card issuer.
        _Read Only, length<=40_
    + `status`: (enum) - This is the status of authentication request.
        _Read Only_
        + Members
            + COMPLETED
            + FAILED
    + `merchantRefNum`:`merchantABC-123-authentications` (string) - This is the merchant reference number for the authentication request.
        _Read Only, length<=255_
    + `threeDEnrollment`:`Y` (enum) - This indicates whether or not the cardholder is enrolled in 3D Secure.
        _Read Only_
        + Members
            + Y - Cardholder authentication available
            + N - Cardholder not enrolled in authentication
            + U - Cardholder authentication unavailable
    + `threeDResult`:`Y` (enum) - This indicates the outcome of the Authentication.
        _Read Only_
        + Members
            + Y - The cardholder successfully authenticated with their card issuer.
            + A - The cardholder authentication was attempted.
            + N - The cardholder failed to successfully authenticate with their card issuer.
            + U - Authentication with the card issuer was unavailable.
            + E - An error occurred during authentication.
    + `signatureStatus`:`Y` (enum) - This is the 3D Secure signature verification result value.
        _Read Only_
        + Members
            + Y - All transaction and signature checks satisfied.
            + N - At least one transaction or signature check failed.
    + Include Authentication Errors

## Authentication Errors
+ error (object) - This is the error details of authentication.
    _Read Only_
    + `code`:`5016` (string) - This is the error code.
    + `message`:`Account not found.` (string) - This is the description of the error.
    + `fieldErrors` (array) - This is a list of fields that have issues.
        + `field`:`amount` (string) - Field name.
        + `error`:`Contain invalid characters` (string)  - Error associated with the field name.

## Billing Details
+ billingDetails (object) - These are the customer's billing details. **Note:** For single-use Payment Handles, this address information will be ignored if the *paymentHandleTokenFrom* parameter is included in the Payment Handle creation request and there is already address information associated with that customer.
    + street:`100 Queen` (string)  - This is the first line of the street address in the billing address.
        _Mandatory, length<=50_
    + street2:`Unit 201` (string) - This is the second line of the street address in the billing address, if required (e.g., apartment number).
        _Optional, length<=50_
    + city:`Toronto` (string) - This is the city in the billing address.
        _Mandatory, length<=40_
    + zip:`MSH 2N2` (string) - This is the postal/zip code in the billing address.
        _Mandatory, length<=10_
    + country:`CA` (string) - This is the country where the address is located. See [Country Codes](#countrycodes).
        _Mandatory, length=2_
    + state:`ON` (string) - This is the state or province of the billing address. For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions.
        _Optional, length<=40_
    + phone:`444-9999` (string) - This is the customer's telephone number.
        _Optional, length<=40_
    + `nickName`:`Home` (string) - This is the nickname the merchant has for the billing address.
        _Optiona, length<=50_

## Billing Details Response
+ billingDetails (object) - These are the customer's billing details.
     _Read Only_
     
     + Properties
    
        + street:`100 Queen` (string)  - This is the first line of the street address in the billing address.
            _length<=50_
        + street2:`Unit 201` (string) - This is the second line of the street address in the billing address, if required (e.g., apartment number).
            _length<=50_
        + city:`Toronto` (string) - This is the city in the billing address.
            _length<=40_
        + zip:`MSH 2N2` (string) - This is the postal/zip code in the billing address.
            _length<=10_
        + country:`CA` (string) - This is the country where the address is located. See [Country Codes](#countrycodes).
            _length=2_
        + state:`ON` (string) - This is the state or province of the billing address. For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions.
            _length<=40_
        + phone:`444-9999` (string) - This is the customer's telephone number.
            _length<=40_
        + `nickName`:`Home` (string) - This is the nickname the merchant has for the billing address.
            _length<=50_

## `Card`

+ card (object) - These are the details of the [card](#cardobject) used for the request.

    + Properties

        + cardNum:`4111111111111111` (string) - This is the card number used for the request.
            _Mandatory, length=8-20_
        + cardExpiry (object) - This is the card's [expiry date](#cardexpiryobject).
            _Mandatory_
            + month:12 (number) - This is the card expiry month.
                _length=2_
            + year:2020 (number) - This is the card expiry year.
                _length=4_
        + cvv:`123` (string) - This is the 3- or 4-digit security code that appears on the card following the card number.
            _Conditional, length=3-4_
        + lastDigits:`1111` (string) - These are the last four digits of the card used for the request.
            _Read Only, length=4_
        + holdername:`Jane Smith` (string) - This is the name of the card holder.
            _Read Only_
        + nickName:`Jane's Card` (string) - This is the nickname the merchant has for the card holder.
            _Optional, length<=50_
        + cardBin:`411111` (string) - This is the card BIN (typically the first 6 digits).
            _Read Only, length=6_
        + cardType: `AM` (enum) - This is the type of card used for the request, returned in the response.
            _Read Only_
            + Members
                + AM – American Express
                + DI – Discover
                + JC – JCB
                + MC – Mastercard
                + MD – Maestro
                + SO – Solo
                + VI – Visa
                + VD – Visa Debit
                + VE – Visa Electron

## `Card Customer`

+ card (object, required) - These are the details of the [card](#cardobject) used for the request.

    + Properties

        + cardNum:`4111111111111111` (string) - This is the card number used for the request.
            _Mandatory, length=8-20_
        + cardExpiry (object) - This is the card's [expiry date](#cardexpiryobject).
            __Mandatory_
            + month:12 (number) - This is the card expiry month.
                _length=2_
            + year:2020 (number) - This is the card expiry year.
                _length=4_
        + cvv:`123` (string) - This is the 3- or 4-digit security code that appears on the card following the card number.
            _Conditional, length=3-4_
        + lastDigits:`1111` (string) - These are the last four digits of the card used for the request.
            _Read Only, length=4_

## `Card Response`

+ card (object) - These are the details of the [card](#cardobject) used for the request.
    _Read Only_

    + Properties

        + cardExpiry (object) - This is the card's [expiry date](#cardexpiryobject).
        _Mandatory_
            + month:12 (number) - This is the card expiry month.
                _length=2_
            + year:2020 (number) - This is the card expiry year.
                _length=4_
        + lastDigits:`1111` (string) - These are the last four digits of the card used for the request.
            _Read Only, length=4_
        + cardBin:`411111` (string) - This is the card BIN (typically the first 6 digits).
            _Read Only, length=6_

## Customer Base
+ `id`:`5d4db3bc-34c9-417f-a051-0d992ad9284e` (string) - This is the ID of the request, returned in the response.
    _Read Only, length<=36_
+ merchantCustomerId:`mycustomer10` (string) - This is a customer ID that the merchant provides with the request for their own internal customer identification. This value must be unique for each customer belonging to a merchant.
    _Mandatory, length<=100_
+ locale: `en_US` (enum) - This indicates the language of the customer.
    _Mandatory_
    - en_US
    - fr_CA
    - en_GB
+ firstName:`John` (string) - This is the customer's first name.
    _Optional, length<=80_
+ middleName:`James` (string) - This is the customer's middle name.
    _Optional, length<=80_
+ lastName:`Smith` (string) - This is the customer's last name.
    _Optional, length<=80_
+ Include Date of Birth
+ email:`john.smith@email.com` (string) - This is the customer's email address.
    _Optional, length<=255_
+ phone:`777-444-8888` (string) - This is the customer's phone number.
    _Optional, length<=40_
+ ip:`192.0.126.111` (string) - This is the customer’s IP address.
    _Optional, length<=46_
+ gender: `F` (enum) - This is the customer’s gender.
    _Optional_
    - F
    - M
+ nationality:`Canadian` (string) - This is the customer’s nationality.
    _Optional, length<=30_
+ cellPhone:`777-555-8888` (string) - This is the customer’s cell phone number.
    _Optional, length<=40_
+ status: `ACTIVE` (enum) - This is the status of the customer. By default the system automatically sets the customer status to an ACTIVE state. If you want to prevent the customer from being used for payments, you can set the status to an INITIAL state (e.g., in cases where you first want to validate the customer).
    _Read Only_
    + Members
        + INITIAL
        + ACTIVE
+ Include Metadata Object

## Date of Birth
+ `dateOfBirth` (object) - This is the customer's date of birth. 
    _Mandatory_
    + Properties
        + `day`:`29` (number) - This is the day of birth.
            _Mandatory, length=2_
        + `month`:`12` (number) - This is the month of birth.
            _Mandatory, length=2_
        + `year`:`2020` (number) - This is the year of birth.
            _Mandatory, length=4_

## Error Attributes
+ `error` (object) 
    _Read Only_
    + Properties
        + `code`:`1001` (string) - This is the error code.
            _Read Only_
        + `message`:`An internal error occurred.` (string) - This is the description of the error.
            _Read Only_
        + `riskReasonCode`:`text` (string) - If applicable, this is the corresponding system reason code.
            _Read Only_
        + `details` (array) - If applicable, this is a collection of detailed descriptions.
            _Read Only_
        + `fieldErrors` (array) - If applicable, this is a list of fields that have issues.
            _Read Only_
            + `field`:`street` (string) - This is the field name. 
            + `error`:`Unexpected characters` (string) This is the error associated with the field name.
        + `links` (array) - If applicable, this is a list of links to the related resource.
            _Read Only_
            + `rel` (string) - This is the description or relation of the link, e.g., default, self, first, prev, next, last.
            + `href` (string) - This is the actual URL of the link.

## Gateway Response
+ `gatewayResponse` (object) - This is the raw response returned by an acquirer. It is returned only if your account is configured accordingly.
    _Read Only_

    + Properties
        + code (string) - This is acquirer identification code, such as DJN, CRX, etc.
            _Read Only_
        + responseCode (string) - This is the raw response returned by the acquirer.
            _Read Only_
        + avsCode (string) - This is the raw AVS code returned by the acquirer.
            _Read Only_
        + avsResponse (string) - This is the AVS response returned from the card issuer.
            _Read Only_
        + balanceResponse (string) - This is the balance remaining on a gift card, if a gift card was used for the original transaction.
            _Read Only_
        + mid (string) - This is the acquirer MID that was sent to the clearing house.
            _Read Only_
        + terminalId (string) - This is the merchant's terminal ID.
            _Read Only_
        + batchNumber (string) - This is the batch number.
            _Read Only_
        + seqNumber (string) - This is the merchant's sequence number.
            _Read Only_
        + effectiveDate (string) - This is the date of the bank deposit associated with the transaction.
            _Read Only_
        + financingType (string) - This is the type of financing offered.
            _Read Only_
        + plan (string) - This is the plan number for this financing transaction.
            _Read Only_
        + gracePeriod (string) - This is the grace period, in months, associated with deferred payment transactions.
            _Read Only_
        + term (string) - This is the number of payments, in months, for equal payment transactions.
            _Read Only_
        + responseId (string) - This is the response ID assigned by Credorax.
            _Read Only_
        + requestId (string) - This is the request ID assigned by Paysafe.
            _Read Only_
        + description (string) - This is a description of the response.
            _Read Only_
        + authCode (string) - This is the authorization code.
            _Read Only_
        + txnDateTime (string) - This is the transaction date and time.
            _Read Only_
        + referenceNbr (string) - This is the bank net transaction Id/Merch Tran Ref
            _Read Only_
        + responseReasonCode (string) - This is the raw response reason code returned by Credorax.
            _Read Only_
        + cvvVerification (string) - This is the response to the cvv submitted with the transaction request.
            _Read Only_
        + cvv2Result (string) - This is the raw cvv2 result code.
            _Read Only_

## Level2Level3

+ `level2Level3` (object) - This allows merchants who are enabled to provide additional [L2/L3 transaction data](#level2level3object). Not all processing gateways support this parameter. Contact your account manager for more information.
    + exemptLocalTax:true (boolean) - This indicates whether or not local tax is exempted for the request. 
    + localTaxAmount:1500 (number) - This is the local sales tax applied to the purchase.
        _length<=99999999999_
    + nationalTaxAmount:0 (number) - This is the national tax included in the transaction amount.
        _length<=99999999999_
    + freightAmount:0 (number) - This is the freight or shipping portion of the total transaction amount.
        _length<=99999999999_
    + dutyAmount:0 (number) - This is the duty associated with the import of the purchased goods.
        _length<=99999999999_
    + destinationZip:90210 (string) - This is the postal/zip code of the address to which the purchased goods will be delivered.
        _length<=10_
    + destinationCountry:US (string) - This is the country to which the goods are being shipped.
        _length=2_
    + shipFromZip:90211 (string) - This is the postal/zip code of the address from which the purchased goods are being shipped.
        _length<=10_
    + Include Line Items

## Line Items

+ `lineItems` (object) - This is more [detailed information](#lineitemsobject) about the items that are being purchased.
    + description:Disney Cruise Line (string, optional) - This is a description of the item(s) being purchased.
        _length<=50_
    + productCode:DCL (string) - This is a merchant-defined description code of the item being purchased.
        _length<=12_
    + quantity:4 (number) - This is the quantity of the item.
        _length<=99999999999_, _max 4 decimals_
    + unitAmount:120000 (number) - This is the unit price of the item being purchased, in minor units. The currency will be based on the account setting.
        _length<=99999999999_
    + taxRate:5 (number) - This is the tax rate used to calculate the tax amount.
        _length<=100_, _max 2 decimals_
    + taxAmount:24000 (number) - This is the amount of any value-added taxes that can be associated with the purchased item, in minor units.
        _length<=99999999999_
    + totalAmount:504000 (number) - This is the total amount of the line item, typically calculated as price multiplied by quantity, in minor units.
        _length<=99999999999_

## Merchant Descriptor
+ merchantDescriptor (object)
    _Optional_
    + Properties
        + `dynamicDescriptor`:`OnlineStore` (string) - This is a merchant descriptor that will be displayed on a customer’s statement.
            _length<=20_
        + `phone`:`999-8888` (string) - This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s statement.
            _length<=13_

## Merchant Descriptor Response
+ merchantDescriptor (object)
    _Read Only_

    + Properties
        + `dynamicDescriptor`:`OnlineStore` (string) - This is a merchant descriptor that will be displayed on a customer’s statement.
            _length<=20_
        + `phone`:`999-8888` (string) - This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s statement.
            _length<=13_

## Metadata Object
+ `meta` (object) 
    _Read Only_

    + Properties
        + `numberOfRecords`:`1` (number) - This is the number of records returned in the lookup.
        + `limit`:`10` (number) - This is the number of records returned per page. 
        + `page`:`1` (number) - This is the page of records on which the lookup starts.

## originalCredits
+ Include Metadata Object
+ `originalCredits`: (array) - An array of Original Credits.

## OriginalCreditResponse (object)
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., lookups.
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _Mandatory, length<=255_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string) - This is the payment token generated by Paysafe that will be used for the request.
    __Mandatory, length<=36_
+ `amount`:`1000` (string) - This is the amount of the request, in minor units. **Note:** The *amount* specified in the Credit request must match the *amount* specified in the Payment Handle request from which the *paymentHandleToken* is taken.
    _Mandatory, Max =99999999999_
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD. **Note:** The *currencyCode* specified in the Credit request must match the *currencyCode* specified in the Payment Handle request from which the *paymentHandleToken* is taken.
    _Mandatory, max=3_
+ `dupCheck`:`true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    + Default: true
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `paymentType`: `CARD` (enum) - This is the payment type associated with the Payment Handle used for this request.
    _Read Only_
    + Members
        + CARD
        + SIGHTLINE
        + SKRILL
        + VIPPREFERRED
        + SIGHTLINE
        + INSTANTACH
        + ACH
        + EFT
        + PAYPAL
+ `status`: `PENDING` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The authorization request has been fully reversed.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
+ `description`:`Purchase Credit` (string) - This is a description of the transaction, provided by the merchant.
    _Optional, length<=255_
+ `customerIp`:`204.91.0.12` (string) - This is the customer's IP address.
    _Optional, length<=39_
+ Include Metadata Object

## Partial Auth
+ partialAuth (object)
    + `requested`:`true` (boolean) - This specifies whether or not a partial authorization was requested.
        + Default: false
    + `amountDue`:`1000` (number) - This is the amount of the full authorization that is not covered by the Payment request.
        _max=99999999999_
    + `originalAmount`:`2000` (number) - This is the actual amount of the full authorization.
        _max=99999999999_

## Payment Methods Get
+ paymentMethods (object)
    + `paymentMethod`: (enum) - This is the payment type associated with this payment method.
        _Read Only_
        + Members
            + CARD
            + PAYSAFECASH
            + PAYSAFECARD
            + SIGHTLINE
            + SKRILL
            + INSTANTACH
            + VIPPREFERRED
            + ACH
            + EFT
            + PAYPAL
    + currencyCode:`USD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD.
        _Read Only, max=3_
    + `accountId`: `1009355920` (string) - This is the merchant account for which the payment method and currency are enabled.
        _Read Only, length<=10_
            

## PaymentHandleRequest (object)

+ `id`:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the Payment Handle. 
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _Mandatory, length<=255_
+ `transactionType`: `PAYMENT` (enum) - This specifies the transaction type for which the Payment Handle is created.
    _Mandatory_
    + Members
        + PAYMENT - Payment Handle is created to continue the Payment.
        + STANDALONE_CREDIT - Payment Handle is created to continue the Standalone Credit.
        + ORIGINAL_CREDIT - Payment Handle is created to continue the Original Credit.
        + VERIFICATION - Payment Handle is created to continue the Verification request.
+ `accountId`:`9876543210` (string) - This is the merchant account number used for the request. Include this optional parameter if you have more than one merchant account for the currency/payment type combination you are specifying.
    _Conditional, length<=10_
+ `status`:`PAYABLE` (enum) - This is the status of the payment handle.
    _Read Only_
    + Members
        + INITIATED - The transaction was initiated with the downstream provider.
        + PAYABLE - The merchant can use the Payment Handle for a Payment request.
        + PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
        + FAILED - The transaction failed due to either an error or being declined. 
        + EXPIRED - The Payment Handle expired because the merchant did not proceed with the Payment request. 
        + COMPLETED - The Payment request was initiated successfully using the Payment Handle.
+ `usage`:`SINGLE_USE` (enum) - This specifies how the Payment Handle will be used for Payments.
    _Read Only_
    + Members
        + SINGLE_USE - The Payment Handle can be used for one transaction only and expires if not used.
+ `paymentType`: `CARD` (enum) - This is the payment type associated with this Payment Handle. If applicable, you need to pass the corresponding payment type object as listed after this parameter.
    _Mandatory_
    + Members
        + CARD
        + PAYSAFECASH
        + PAYSAFECARD
        + SIGHTLINE
        + SKRILL
        + INSTANTACH
        + PAYPAL
        + VIPPREFERRED
        + ACH
        + EFT
+ Include Payment Instrument
+ `action`:`NONE` (enum) - This specifies the next step of the user journey once they proceed to the Payment.
    _Read Only_
    + Members
        + NONE - No action is required, e.g., for a standard credit card Payment.
        + REDIRECT -The user must be redirected in order to complete a Payment, e.g., when an alternate payment method like Paysafecard is used.
+ `executionMode`:`SYNCHRONOUS` (enum) - This specifies the action of the merchant server in order to complete the Payment.
    _Read Only_    
    + Members
        + ASYNCHRONOUS - The Payment request is not completed immediately and the merchant [must rely on webhooks](#paymentswebhooks) to retrieve the status of the Payment request.
        + SYNCHRONOUS - The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.
+ `amount`:`1000` (string) - This is the amount of the request, in minor units. **Note:** This field is mandatory if *transactionType* is included. The *amount* specified in the Payment Handle request must match the *amount* specified in the Payments API request the *paymentHandleToken* is used for.
    _Mandatory, Max =99999999999_
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD. **Note:** This field is mandatory if *transactionType* is included. The *currencyCode* specified in the Payment Handle request must match the *currencyCode* specified in the Payments API request the *paymentHandleToken* is used for.
    __Mandatory, max=3_
+ `paymentHandleTokenFrom`:`SCyGZDlUuZ9zxjyd` (string) - This is an [existing Customer Payment Handle](#createcustomerpaymenthandlerequest), from which the payment instrument and profile details are retrieved. If this parameter is included you can omit the *billingDetails* object.
    _Optional, length<=36_
+ `paymentHandleToken`:`SCO3wKcIyLoQbQvw` (string) - This is the payment token generated by Paysafe that will be used by merchants for Payment API requests.
    _Read Only, length<=36_
+ Include Profile
+ Include Billing Details
+ Include Merchant Descriptor
+ `returnLinks` (object) - The URL endpoints to redirect the customer to after a redirection to an alternative payment or 3D Secure site. You can customize the return URL based on the transaction status. 
    _Conditional_
    + `rel`(enum) - This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. 
        + default (string, required) - The default return URL that will be used if specific status return URL is not defined.
        + on_completed (string) - Will be returned to this URL if the payment is completed.
        + on_failed (string) - Will be returned to this URL if the payment fails.
    + `href` - The actual URL
    + `method` - The HTTP method
+ links (object) - This is an array of links related to the resource.
    _Read Only_
    + `rel`: `redirect_payment` (enum)
    + `href`:`http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709`
    + `method`:`GET`
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _Optional, length<=39_
+ `timeToLiveSeconds`:`899` (number) - This is the period of time, in seconds, the *paymentHandleToken* is valid before expiration. 
    _Read Only, length<=899_
+ `txnTime`: `2015-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ Include Metadata Object
+ Include Gateway Response
+ `updatedTime`: `2016-01-01T04:5:55Z` (string) - Indicates the last updated time for the resource.
    _Read Only_
+`statusTime`: `2016-01-01T04:55:55Z` (string) - Indicates when the status was last updated.
    _Read Only_


## PaymentHandleRequest Customer

+ `id`:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the Payment Handle. 
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _Mandatory, length<=255_
+ `status`:`PAYABLE` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + INITIATED - The transaction was initiated with the downstream provider.
        + PAYABLE - The merchant can use the Payment Handle for a Payment request.
        + PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
        + FAILED - The transaction failed due to either an error or being declined. 
        + EXPIRED - The Payment Handle expired because the merchant did not proceed with the Payment request. 
        + COMPLETED - The Payment request was initiated successfully using the Payment Handle.
+ `usage`:`MULTI_USE` (enum) - This specifies how the Payment Handle will be used for Payments.
    _Read Only_
    + Members
        + MULTI_USE - The Payment Handle can be used multiple times.
+ `paymentType`: `CARD`(enum) - This is the payment type associated with this Payment Handle.
    _Mandatory_
    + Members
        + CARD
+ `executionMode`: `SYNCHRONOUS`(enum) - This specifies the action of the merchant server in order to complete the Payment.
    _Read Only_
    + Members
        + ASYNCHRONOUS - The Payment request is not completed immediately and the merchant [must rely on webhooks](#paymentswebhooks) to retrieve the status of the Payment request.
        + SYNCHRONOUS - The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.
+ `amount`:`1000` (string) - This is the amount of the request, in minor units. **Note:** This field is mandatory if *transactionType* is included.
    _Conditional, Max =99999999999_
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD.
    _Read Only, max=3_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string) - This is the payment token generated by Paysafe that will be used by merchants for Payment API requests, provided its *status* is PAYABLE.
    _Read Only, length<=36_
+ Include Card Customer
+ `billingDetailsId`:`5d4db3bc-34c9-417f-a051-0d992ad9284e` (string) - This is the ID returned in the response to the [address creation request](#createaddressrequest).
    _Optional, length<=36_
+ `returnLinks` (object) - The URL endpoints to redirect the customer to after a redirection to an alternative payment or 3D Secure site. You can customize the return URL based on the transaction status. 
    _Conditional_
    + `rel`(enum) - This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. 
        + default (string, required) - The default return URL that will be used if specific status return URL is not defined.
        + on_completed (string) - Will be returned to this URL if the payment is completed.
        + on_failed (string) - Will be returned to this URL if the payment fails.
    + `href` - The actual URL
    + `method` - The HTTP method
+ links (object) - This is an array of links related to the resource.
    _Read Only_
    + `rel`: `redirect_payment` (enum)
    + `href`:`http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709`
    + `method`:`GET`
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _Optional, length<=39_

## PaymentHandleRequest SUT

+ `id`:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the Payment Handle. 
    _Read Only, length<=36_
+ `profileId`:`59cce04e-e429-4016-9d3f-1e579f3aa2ad` (string) - This is the ID of the customer profile used for this request.
    _Read Only, length<=36_
+ `timeToLiveSeconds`:`899` (number) - This is the period of time, in seconds, the *singleUseCustomerToken* is valid before expiration. 
    _Read Only, length<=899_
+ `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _length<=255_
+ `status`: (enum) - This is the status of the single-use customer token.
    _Read Only_
    + Members
        + INITIAL
        + ACTIVE
+ `singleUseCustomerToken`:`SPFAB1cA5iwdu48H` (string) - This token can be [used in the Payments Checkout](#paymentscheckout) to populate the checkout with customer information.
    _Read Only, length<=16_
+ `locale`:`ca_en` (enum) - This indicates the customer's locale.
    _Read Only_
    + Members
        + en_US
        + fr_CA
        + en_GB

+ `firstName`:`Jane` (string) - This is the customer’s first name.
    _Read Only, length<=80_
+ `middleName`:`Joan` (string) - This is the customer’s middle name.
    _Read Only, length<=80_
+ `lastname`:`Smyth` (string) - This is the customer's last name.
    _Read Only, length<=80_
+ Include Date of Birth
+ `email`:`jane.smyth@email.com` (string) - This is the customer's email address.
    _Read Only, length<=255_
+ `phone`:`12345678` (string) - This is the customer's phone number.
    _Read Only, length<=40_
+ `ip`:`192.0.126.111` (string) - This is the customer’s IP address.
    _Read Only, length<=46_
+ `nationality`:`American` (string) - This is the customer’s nationality.
    _Read Only, length<=30_
+ `addresses`:`addresses` (array) - This is an array of addresses associated with the customer.
    _Read Only_
+ `paymentHandles`:`paymentHandles` (array) - This is an array of payment handles associated with the customer.
    _Read Only_

## PaymentHandleRequest Customer SUT Response
+ `id`:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the Payment Handle. 
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _Read Only, length<=255_
+ `status`:`INITIATED` (enum) - This is the status of the transaction request.
    _Read Only_
    
    + Members
        + INITIATED - The transaction was initiated with the downstream provider.
        + PAYABLE - The merchant can use the Payment Handle for a Payment request.
        + PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
        + FAILED - The transaction failed due to either an error or being declined. 
        + EXPIRED - The Payment Handle expired because the merchant did not proceed with the Payment request. 
        + COMPLETED - The Payment request was initiated successfully using the Payment Handle.
+ `usage`:`MULTI_USE` (enum) - This specifies how the Payment Handle will be used for Payments.
    _Read Only_
    
    + Members
        + MULTI_USE - The Payment Handle can be used multiple times.
+ `paymentType`: (enum, required) - This is the payment type associated with this Payment Handle.
    _Read Only_
    
    + Members
        + CARD
+ `action`: (enum) - This specifies the next step of the user journey once they proceed to the Payment.
    _Read Only_
    
    + Members
        + NONE
        + REDIRECT
+ `paymentHandleTokenFrom`:`7576835c-0396-11e9-8eb2-f2801f1b9fd1` (string) - This is an existing [Payment Handle token created for a customer](#createcustomerpaymenthandlerequest).
    _Read Only_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string) - This is the payment token generated by Paysafe that will be used by merchants for Payment API requests, provided its *status* is PAYABLE.
    _Read Only, length<=36_
+ Include Card Response
+ Include Merchant Descriptor Response
+ Include Billing Details Response


## PaymentHandleRequest Object
+ paymentHandleRequest (object)
    + `id`:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the Payment Handle. 
        _Read Only, length<=36_
    + `paymentHandleTokenFrom`:`7576835c-0396-11e9-8eb2-f2801f1b9fd1` (string) - This is an existing [Payment Handle token created for a customer](#createcustomerpaymenthandlerequest), from which payment instrument and profile details can be retrieved.
        _length<=36_
    + `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
        _length<=255_
    + `transactionType`: (enum, required) - This specifies the transaction type for which the Payment Handle is created. 
        + Members
            + PAYMENT - Payment Handle is created to continue the Payment.
            + STANDALONE_CREDIT - Payment Handle is created to continue the Standalone Credit.
            + ORIGINAL_CREDIT - Payment Handle is created to continue the Original Credit.
            + VERIFICATION - Payment Handle is created to continue the Verification request.
    + `status`: (enum) - This is the status of the transaction request.
        _Read Only_
        + Members
            + RECEIVED - Paysafe has received the request and is waiting for the downstream processor’s response.
            + INITIATED - The transaction was initiated with the downstream provider.
            + PAYABLE - The merchant can use the Payment Handle for a Payment request.
            + PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
            + FAILED - The transaction failed due to either an error or being declined. 
            + CANCELLED - The authorization request has been fully reversed.
            + EXPIRED - The Payment Handle expired because the merchant did not proceed with the Payment request. 
            + COMPLETED - The Payment request was initiated successfully using the Payment Handle.
    + `usage`:`SINGLE_USE` (enum) - This specifies how the Payment Handle will be used for Payments.
        _Read Only_
        + Members
            + SINGLE_USE - The Payment Handle can be used for one transaction only and expires if not used.
    + `paymentType`: (enum, required) - This is the payment type associated with this Payment Handle. If applicable, you need to pass the corresponding payment type object as listed after this parameter. 
        + Members
            + CARD
            + PAYSAFECASH
            + PAYSAFECARD
            + SIGHTLINE
            + SKRILL
            + INSTANTACH
            + PAYPAL
            + ACH
            + EFT
            + VIPPREFERRED
    + Include Payment Instrument
    + `action`: (enum) - This specifies the next step of the user journey once they proceed to the Payment.
        + Members
            + NONE
            + REDIRECT
    + `executionMode`: (enum) - This specifies the action of the merchant server in order to complete the Payment.
        + Members
            + ASYNCHRONOUS - The Payment request is not completed immediately and the merchant [must rely on webhooks](#paymentswebhooks) to retrieve the status of the Payment request.
            + SYNCHRONOUS - The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.
    + `amount`:`1000` (string) - This is the amount of the request, in minor units. **Note:** This field is mandatory if *transactionType* is included. The *amount* specified in the Payment Handle request must match the *amount* specified in the Payments API request the *paymentHandleToken* is used for.
        _Max =99999999999_
    + `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD. **Note:** This field is mandatory if *transactionType* is included. The *currencyCode* specified in the Payment Handle request must match the *currencyCode* specified in the Payments API request the *paymentHandleToken* is used for.
        _max=3_
    + `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string) - This is the payment token generated by Paysafe that will be used by merchants for Payment API requests.
        _Read Only, length<=36_
    + Include Profile
    + Include Billing Details
    + `returnLinks` (object) - The URL endpoints to redirect the customer to after a redirection to an alternative payment or 3D Secure site. You can customize the return URL based on the transaction status. 
        + `rel` (enum) - This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. 
            + default (string, required) - The default return URL that will be used if specific status return URL is not defined.
            + on_completed (string) - Will be returned to this URL if the payment is completed.
            + on_failed (string) - Will be returned to this URL if the payment fails.
        + `href` - The actual URL
        + `method` - The HTTP method
    + `links` (object) - This is an array of links related to the resource.
        + `rel`:`redirect_payment` (enum)
        + `href`:`http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709`
        + `method`:`GET`
    + `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
        _length<=39_
    + `timeToLiveSeconds`:`899` (number) - This is the period of time, in seconds, the *paymentHandleToken* is valid before expiration. 
        _Read Only, length<=899_

## `Payment Instrument`

+ One of

    + card (object) - These are the details of the [card](#cardobject) used for the request. Only one payment instrument object (e.g., *card* or *paysafecash* or *sightline*) can be included in the request.

        + Properties

            + cardNum:`4111111111111111` (string) - This is the card number used for the request.
                _Mandatory, length=8-20_
            + cardExpiry (object) - This is the card's [expiry date](#cardexpiryobject).
                __Mandatory_
                + month:12 (number) - This is the card expiry month.
                    _length=2_
                + year:2020 (number) - This is the card expiry year.
                    _length=4_
            + cvv:`123` (string) - This is the 3- or 4-digit security code that appears on the card following the card number.
                _Conditional, length=3-4_
            + holdername:`Jane Smith` (string) - This is the name of the card holder.
                _Read Only_
            + cardType (enum) - This is type of card used for the request.
                _Read Only_
                - AM – American Express
                - DI – Discover
                - JC – JCB
                - MC – Mastercard
                - MD – Maestro
                - SO – Solo
                - VI – Visa
                - VD – Visa Debit
                - VE – Visa Electron
            + lastDigits:`1111` (string) - These are the last four digits of the card used for the request.
                _Read Only, length=4_
            + nickName:`Jane's Card` (string) - This is the nickname the merchant has for the card holder.
                _Optional, length<=50_
            + cardBin:`411111` (string) - This is the card BIN (typically the first 6 digits).
                _Read Only, length=6_
        
    + paysafecard (object) - These are the details of the [paysafecard](#paysafecardobject) used for the request. Only one payment instrument object (e.g., *card* or *paysafecard* or *sightline*) can be included in the request.
        + Properties
            + `consumerId`:`merchantclientid` (string) - This is the merchant's unique identifier of the customer. For security purposes, if any personal data is used (e.g., customer's user name, email address, etc.), it has to be encrypted or hashed.
                _Mandatory_
            + `ageRestriction`:`18` (number) - This is the minimum age restriction for the transaction.
                _Optional_
            + `kycLevelRestriction`:`SIMPLE` (string) - This is the KYC level that will be required for the transaction. Possible values are FULL and SIMPLE.
                _Optional_
            + `countryRestriction`:`DE` (string) - This is the code of the country to which the transaction will be restricted. See [Country Codes](#countrycodes).
                _Optional, length=2_

    + paysafecash (object) - These are the details of the [paysafecash account](#paysafecashobject) used for the request. Only one payment instrument object (e.g., *card* or *paysafecash* or *sightline*) can be included in the request.
        + Properties
            + `consumerId`:`merchantclientid` (string ) - This is the merchant's unique identifier of the customer. For security purposes, if any personal data is used (e.g., customer's user name, email address, etc.), it has to be encrypted or hashed.
                _Mandatory_
            + `ageRestriction`:`18` (number) - This is the minimum age restriction for the transaction.
                _Optional_
            + `kycLevelRestriction`:`SIMPLE` (string) - This is the KYC level that will be required for the transaction. Possible values are FULL and SIMPLE.
                _Optional_
            + `countryRestriction`:`DE` (string) - This is the code of the country to which the transaction will be restricted. See [Country Codes](#countrycodes).
                _Optional, length=2_

    + skrill (object) - These are the details of the [skrill account](#skrillobject) used for the request. Only one payment instrument object (e.g., *card* or *skrill*) can be included in the request. Skrill Object is required only for withdrawal request.
        + Properties
            + `consumerId`:`john.doe@email.com` (string) - This is the email address of the customer who is receiving the payment. Required for withdrawal request.
                _Mandatory, length<=50_
            + `emailSubject`:`Skrill payment` (string) - This is the Subject line to use in the customer email. Required for withdrawal request.
                _Mandatory, length<=30_
            + `emailMessage`:`Email text` (string) - This is the message to use in the customer email. Required for withdrawal request.
                _Mandatory, length<=50_
            + `recipientDescription`:`logo_url_alt_text` (string) - This is a description to be shown on the Skrill payment page in the logo area if there is no *logo\_url* parameter. If no value is submitted and there is no logo, the *pay\_to\_email* value is shown as the recipient of the payment.
                _Optional, length<=30_
            + `language`:`EN` (string) - This is the 2-character preferred language code for the consumer (e.g., EN, FR).
                _Optional, length=2_
            + `logoUrl`:`http://www.yoursite.com/icon.jpg` (string) - This is the URL of the logo that you would like to appear in the top right of the Skrill page. The logo must be accessible via HTTPS or it will not be shown. The logo will be resized to fit.
                _Optional_
            + `detail1Description`: `Details 1 description` (string) - You can show additional details about the product in the More information section in the header of Quick Checkout.
                _Optional_
            + `detail1Text`:`Details 1 text` (string) - The detail1Text is shown next to the detail1Description in the More Information section in the header of the payment form with the other payment details. The detail1Description combined with the detail1Text is shown in the more information field of the merchant account history CSV file.
                _Optional_
            + `descriptor`:`Merchant's trading name` (string) - This is the merchant descriptor that will be displayed on the consumer's bank statement.
                _Optional_
    
    + instantach (object) - These are the details of the [instantach account](#instantachobject) used for the request. Only one payment instrument object (e.g., *card* or *instantach*) can be included in the request. instantach Object is required only for withdrawal request.
        + Properties
            + `consumerId`:`john.doe@email.com` (string) - This is the email address of the customer who is receiving the payment. Required for withdrawal request.
                _Mandatory, length<=50_
            + `paymentId` :`3aeb9c63-6386-46a3-9f8e-f452e722228a`(string) - This is the ID returned in the response to a prior Payment that the customer made using Instant ACH.
                _Mandatory_
            + `emailSubject`:`Instant ACH payment` (string) - This is the Subject line to use in the customer email. Required for withdrawal request.
                _Mandatory, length<=30_
            + `emailMessage`:`Email text` (string) - This is the message to use in the customer email. Required for withdrawal request.
                _Mandatory, length<=50_
            + `recipientDescription`:`logo_url_alt_text` (string) - This is a description to be shown on the Instant ACH payment page in the logo area if there is no *logo\_url* parameter. If no value is submitted and there is no logo, the *pay\_to\_email* value is shown as the recipient of the payment.
                _Optional, length<=30_
            + `language`:`EN` (string) - This is the 2-character preferred language code for the consumer (e.g., EN, FR).
                _Optional, length=2_
            + `logoUrl`:`http://www.yoursite.com/icon.jpg` (string) - This is the URL of the logo that you would like to appear in the top right of the Instant ACH page. The logo must be accessible via HTTPS or it will not be shown. The logo will be resized to fit.
                _Optional_
            + `detail1Description`: `Details 1 description` (string) - You can show additional details about the product in the More information section in the header of Quick Checkout.
                _Optional_
            + `detail1Text`:`Details 1 text` (string) - The detail1Text is shown next to the detail1Description in the More Information section in the header of the payment form with the other payment details. The detail1Description combined with the detail1Text is shown in the more information field of the merchant account history CSV file.
                _Optional_
            + `descriptor`:`Merchant's trading name` (string) - This is the merchant descriptor that will be displayed on the consumer's bank statement.
                _Optional_
          
    + paypal (object) - These are the details of the [paypal account](#paypalobject) used for the request.
        + Properties
            + `consumerId`:`john.doe@email.com` (string) - The source of funds for this payment, the email address of the consumer or payer.
                _Mandatory, length<=50_
            + `recipientDescription`:`logo_url_alt_text` (string) - A label that overrides the business name in the merchant's PayPal account on the PayPal checkout pages.
                _Optional, length<=127_
            + `language`:`EN` (string) - The locale of pages that the PayPal payment experience displays. A valid value is AU, AT, BE, BR, CA, CH, CN, DE, ES, GB, FR, IT, NL, PL, PT, RU, or US.  A five-character code is also valid for languages in these countries: da_DK, he_IL, id_ID, ja_JP, no_NO, pt_BR, ru_RU, sv_SE, th_TH, zh_CN, zh_HK, and zh_TW.
                _Optional, length=5_
            + `shippingPreference` :`NO_SHIPPING`(enum) - The shipping preference. The possible values are:
            _Read Only_
                + Members
                    + NO_SHIPPING - Redacts the shipping address from the PayPal pages. Recommended for digital goods.
                    + GET_FROM_FILE - Uses the customer-selected shipping address on PayPal pages.
                    + SET_PROVIDED_ADDRESS - If available, uses the merchant-provided shipping address, which the customer cannot change on the PayPal pages. If the merchant does not provide an address, the customer can enter the address on PayPal pages.
            + `consumerMessage`: `Details 1 description` (string) - Note to display on PayPal page.
                _Optional_
            + `orderDescription`:`Order Description` (string) - Order description to display on PayPal page. If merchant does not set this field it defaults to 'Payment for order'.
                _Optional_
            + `recipientType`:`PAYPAL_ID` (string) - Type of payout recipient. The only supported value is 'PAYPAL_ID'.
                _Optional_
                
    + sightline (object) - These are the details of the [Play+ account](#sightlineobject) used for the request. Only one payment instrument object (e.g., *card* or *sightline*) can be included in the request.
        + Properties
            + `consumerId`:`12312313` (string) - This is the Loyalty Membership Number unique to the customer to be enrolled with Play+ (Sightline). This is to be provided by the merchant. 
                _Mandatory_
            + `paymentHandleToken`:`SCO3wKcIyLoQbQvw` (string) - This is the payment token for a card. This will be present if registration is occurring as part of the salvage flow or for a funding the Play+ (Sightline) card flow.
                _Optional_
            + `balance`:`20000` (string) - This is the balance on the Play+ (Sightline) prepaid card.
                _Optional_
            + `SSN` : `123456789` (string) - This is the customer's Social Security Number.
                _Optional_
            + `last4ssn`:`6789` (string) - This the customer’s last 4 digits of Social Security Number. If the customer is already enrolled for Sightline, then instead of sending the full ‘SSN’ field, you can send the last 4 digits of SSN which will get prefilled during Payment flow. If not provided, then the system will check if ‘SSN’ field is present to prefill the last 4 digits. If both these fields are not provided, then the customer has to enter the last 4 digits of SSN to complete the payment.
                _Optional_
            + `card`: `` (object) - This is the card object. This will be present if customer registers with Play+ as part of the card recovery flow or when a customer adds fund to Play+ (Sightline).
                _Optional_
            
    
    + ach (object) - These are the details of the [ach account](#achobject) used for the request. Only one payment instrument object (e.g., *card* or *ach*) can be included in the request.
        + Properties
            + `accountHolderName`:`XYZ Company` (string) - This is the name of the customer or company.
                _Mandatory, length<=22_
            + `payMethod` :`WEB`(enum) - This is the payment type.
            _Read Only_
                + Members
                    + WEB - Personal bank accounts only
                    + TEL - Personal bank accounts only
                    + PPD - Personal bank accounts only
                    + CCD - Business bank accounts only
            + `accountType` :`SAVINGS`(enum) - This is the bank account type.
            _Read Only_
                + Members
                    + SAVINGS
                    + CHECKING
                    + LOAN
            + `accountNumber`:`988772192` (string) - This is the bank account number.
               _Mandatory, length=4-17_
            + `routingNumber`:`211589828` (string) - For USD accounts, this is the 9-digit routing number of the bank.
                _Mandatory, length<=9_
            + `lastDigits`:`92` (string) - This is returned in response. It contains only last 2 digits of bank account.
                _Read Only, length=2_

    + eft (object) - These are the details of the [eft account](#eftobject) used for the request. Only one payment instrument object (e.g., *card* or *eft*) can be included in the request.
        + `accountHolderName`:`XYZ Company` (string) - This is the name of the customer or company.
                _Mandatory, length<=30_
        + `accountNumber`:`988772192` (string) - This is the bank account number.
               _Mandatory, length=4-12_
        + `transitNumber`:`211589828` (string) - This is the 5-digit transit number of the customer's bank branch.
                _Mandatory, length<=5_
        + `institutionId`:`001` (string) - This is the 3-digit institution ID of the customer’s bank branch.
                _Optional, length<=3_
        + `lastDigits`:`92` (string) - This is returned in response. It contains only last 2 digits of bank account.
                _Read Only, length=2_
   
    + vippreferred (object) - These are the details of the [vip preferred account](#vippreferredobject) used for the request. Only one payment instrument object (e.g., *card* or *vippreferred*) can be included in the request. 
        + `consumerId`:`550726575` (string) - The is the consumer social security number (SSN). As it is sensitive data the consumerId will not be passed in the response. Last 4 digits will be passed as lastDigits. 
            _Mandatory_

## PaymentsRequest (object)

+ `id`:`3aeb9c63-6386-46a3-9f8e-f452e722228a` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., looking up the Payment. 
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _Mandatory, length<=255_
+ `amount`:`1000` (number) - This is the amount of the request, in minor units. **Note:** The *amount* specified in the Payment request must match the *amount* specified in the Payment Handle request from which the *paymentHandleToken* is taken.
    _Mandatory, max=99999999999_
+ `dupCheck`:`false` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.Default: true
    _Optional_
+ `settleWithAuth`:`true` (boolean) - This indicates whether the request is an Authorization only (no Settlement) or a Purchase (Authorization and Settlement). Default: true
    _Optional_
+ `preAuth`:`false`  (boolean) - This indicates whether the Authorization request should be sent as a Pre-Authorization. You should use the *preAuth* element in cases where you are not sure that you can fully settle the Authorization within 4 days. Contact your account manager for more information.
    _Optional_
+ Include Partial Auth
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string, required) - This is the payment token generated by Paysafe that will be used for the Payment request.
    _Mandatory, length<=36_
+ `availableToSettle`:`0` (number) - This is the amount of the Authorization remaining to settle, in minor units.
    _Read Only_
+ `childAccountNum`:`3216549877` (string) - This is the child merchant account number. It is returned only if the transaction was processed via a master account.
    _Optional, length<=10_
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _Optional, length<=39_
+ `description`:`Consumer Purchase` (string) - This is a description of the transaction, provided by the merchant.
    _Optional, length<=255_
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `paymentType`: `CARD`(enum) - This is the payment type associated with the Payment Handle used for this request.
    _Read Only_
    + Members
        + CARD
        + PAYSAFECASH
        + PAYSAFECARD
        + SIGHTLINE
        + SKRILL
        + INSTANTACH
        + PAYPAL
        + VIPPREFERRED
        + ACH
        + EFT
+ `status`: `HELD`(enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response.
        + COMPLETED - The request was completed.
        + HELD - The request has been placed on hold due to risk considerations.
        + FAILED - The transaction failed, due to either an error or being declined.
        + CANCELLED - The request has been reversed.
        + PENDING - The transaction awaiting payment service provider's response.
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD. **Note:** The *currencyCode* specified in the Payment request must match the *currencyCode* specified in the Payment Handle request from which the *paymentHandleToken* is taken.
    _Mandatory, max=3_
+ Include Level2Level3
+ Include Gateway Response
+ Include accordD
+ Include Recipient
+ `riskReasonCode`:`1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.
+ Include Splitpay
+ Include Stored Credential
+ settlements (array) - This is the list of all Settlements. This will be returned only if *settleWithAuth* = *true* in the request.
+ Include Error Attributes
+ Include Metadata Object
+ `statusReason` - This is reason for the status. This is present in case of ERROR, FAILURE, HELD status.
    _length<=255_
+ Include Authentications Object

## Profile

+ `profile` (object) 
    + `firstName`:`Jane` (string) - This is the customer’s first name.
        _length<=80_
    + `lastname`:`Smyth` (string) - This is the customer's last name.
        _length<=80_
    + `locale`:`ca_en` (enum) - This indicates the customer's locale.
        + Members
            + en_US
            + fr_CA
            + en_GB
    + Include Date of Birth
    + `email`:`jane.smyth@email.com` (string) - This is the customer's email address.
        _length<=255_
    + `phone`:`12345678` (string) - This is the customer's phone number.
        _length<=40_
    + `mobile`:`4446666` (string) - This is the customer's mobile phone number. 
        _length<=40_
    + `gender`: (enum) - This is the customer’s gender.
        - F
        - M
    + `nationality`:`Indian` (string) - This is the customer’s nationality.
        _length<=30_

## paymenthandles
+ Include Metadata Object
+ `paymenthandles`: (array) - An array of Payment Handles.

## payments
+ Include Metadata Object
+ `payments`: (array) - An array of Payments.


## Recipient (object)
+ `recipient` (object) - The recipient is deemed to be the person or party who has the contractual relationship with the merchant/financial institution.
    + `dateOfBirth` (object) - This is the date of birth of the recipient.
        + `day`:`24` (number) - This is the day of birth.
        + `month`:`12` (number) - This is the month of birth.
        + `year`:`1990` (number) - This is the year of birth.
    + `zip`:`EC4Y 0HQ` - This is the zip/postal code of the recipient.
        _length<=10_
    + `lastName` - This is the last name of the recipient.
        _length<=255_
    + `accountNumber` - This is the account number of the recipient.
        _length<=25_

## refundsArray
+ Include Metadata Object
+ `refunds`: (array) - An array of Refunds.


## Refunds
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
    _Read Only, length<=36_
+ `merchantRefNum`:`P1234` (string) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _Mandatory, length<=255_
+ `amount`:`100` (number) - This is the amount of the request, in minor units. If this value is not provided, the full remaining amount on the Settlement will be refunded. 
    _Optional, max=99999999999_
+ `dupCheck`:`true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    _Optional_
    + Default: true
+ `childAccountNum`:`1234567898` (string) - This is the child merchant account number. It is returned only when the transaction is processed via a master account.
    _Optional, length<=10_
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status`:`PENDING` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The request has been cancelled.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ Include Error Attributes
+ Include Splitpay
+ `riskReasonCode`:`1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.        
    _Read Only_
+ Include Gateway Response
+ Include Metadata Object

## settlementsArray
+ Include Metadata Object
+ `settlements`: (array) - An array of Settlements.

## Settlements
+ `id`: `25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
    _Read Only, length<=36_
+ `merchantRefNum`: `P1234` (string) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _Mandatory, length<=255_
+ `amount`: `100` (number) - This is the amount of the request, in minor units. If this value is not provided, the full remaining amount on the Authorization will be settled. 
    _Optional, max=99999999999_
+ `dupCheck`: `true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    _Optional_
    + Default: true
+ `availableToRefund`:`25` (number) - This is the amount of the Authorization remaining to refund, in minor units.
    _Read Only, max=99999999999_
+ `childAccountNum` : `1234567898` (string) - This is the child merchant account number. It is returned only when the transaction is processed via a master account.
    _Optional, length<=10_
+ `status`:`PENDING` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The request has been cancelled.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ Include Error Attributes
+ Include Splitpay
+ `riskReasonCode`: `1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.        
+ Include Gateway Response
+ Include Metadata Object

## Splitpay
+ splitpay (array, optional) - For Splitpay transactions only, an array containing the linked accounts and the amount shared with each. You must include either *amount* or *percent*. However, you cannot include both values.
    + (object)
        + Properties
            + linkedAccount:`123124124` (string, required) - This is the ID of the linked account. This account must already be linked to the merchant account.
            + One of
                + amount:`505` (number) - This is the amount to transfer to the linked account in minor currency units.
                + percent:`5` (number) - This is the percentage of the total transaction amount to transfer to that account.

## standalonecredits
    
+ Include Metadata Object
+ `standalonecredits`: (array) - An array of Standalone Credits.

## statusAttributes (enum) - This is the status of the request.
+ RECEIVED - Our system has received the request and is waiting for the downstream processor’s response.
+ INITIATED - The transaction was initiated with the downstream provider.
+ PAYABLE - The merchant can proceed with the Payment request.
+ PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
+ FAILED - The transaction failed, due to either an error or being declined. 
+ CANCELLED - The authorization request has been fully reversed.
+ EXPIRED - The Payment Handle expired due to merchant not proceeding with Payment request.
+ COMPLETED - The Payment request was initiated successfully using the Payment Handle.

## `Stored Credential`
+ storedCredential (object) - This object is used to identify authorization requests that use stored credentials for a consumer's authorization request, in order to improve authorization rates and reduce fraud. Stored credentials can be used in two cases: using a payment token from the Customer Vault for an authorization, and using a card number stored by the merchant for an authorization.

    + Properties
        + type:`ADHOC` (enum) - This specifies the type of request being made. 
            + ADHOC – Ad hoc consumer-initiated request.
            + TOPUP – Unscheduled merchant iniitated request when a consumer balance is below a set limit.
            + RECURRING –  Scheduled merchant initiated recurring request.
            
            + Default: ADHOC
        + occurrence:`RECURRING` (enum) - This specifies whether the stored credential request is initial or recurring. 
            + INITIAL – Used when this is the first time the consumer uses this credit card.
            + SUBSEQUENT – Used when the consumer uses this credit card for subsquent requests.
            
            + Default: INITIAL

## VerificationResponse (object)
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., looking up the Verification.
    _Read Only, length<=36_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string) - This is the payment token generated by Paysafe that will be used for the Verification request.
    _Mandatory, length<=36_
+ `merchantRefNum`:`P1234` (string) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _Mandatory, length<=255_
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _Optional, length<=39_
+ `dupCheck`:`true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    _Optional_
    + Default: true
+ `description`:`Consumer Card Verification` (string) - This is a description of the transaction, provided by the merchant.
    _Optional, length<=255_
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `paymentType`: (enum) - This is the payment type associated with the Payment Handle used for this request.
    _Read Only_
    + Members
        + CARD
+ `status` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The authorization request has been fully reversed.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD, returned in the request response.
    _Read Only, max=3_
+ Include Gateway Response
+ Include Error Attributes
+ Include Metadata Object
+ `riskReasonCode`:`1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.
    _Optional_

## verifications
+ Include Metadata Object
+ `verifications`: (array) - An array of Verifications.

## voidAuths
+ Include Metadata Object
+ `voidAuths`: (array) - An array of Void Authorizations.

## voidAuthResponse (object)
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) This is the ID returned in the response. This ID can be used for future associated requests, e,g., lookups.
    _Read Only, length<=36_
+ `merchantRefNum`:`P1234` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _length<=255_
+ `amount`:`100` (number) - This is the amount of the request, in minor units. *Note*: This will be a required field for partial void auth.
    _max=99999999999_
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The request has been cancelled.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ Include Metadata Object
FORMAT: 1A
HOST: https://api.test.paysafe.com/paymenthub/

# Paysafe Payments API 

# QUESTIONS
 * Should *paymentMethod* in the request to look up available payment methods actually be *paymentType* (used in creation of a payment handle)? Are they not referencing the same thing (CARD, etc.)?
 * Related, we have *currency* in payment methods, but *currencyCode* elsewhere.
 * Apiary has *card* element but Confluence card object has *cardType* element. Other APIs do not use *cardType*. They use only the number or token in the request, and "type" and "lastDigits" are returned in the response, where type is inferred from the number provided. (Though I see the current Vault API returns *cardType* in response.)
 * Related, can someone verify that the list of card types is accurate?
 * The elements in *profile* are different when you compare the Confluence object and the object defined in the Apiary document. Kasi says this will be updated.
 * The behaviour when including profile ID is not clear in the Apiary document provided (e.g., will profile fields provided overwrite existing profile fields?). Kasi mentioned including profile ID only when billing ID is passed, but I don't see where this is passed.
 * Where do all the values for the *profile* elements come from? I see that *profile* is part of the *paymentHandle* object but it's not clear how/when to use it. Can you provide only the profile ID, as returned from creating a customer profile?
 * Merchant 3DS config done in Merchant Portal by merchant.
 * Length of *externalSubMerchantId* is not in Confluence. Kasi says this is part of Netbanx response but I can't find it.
 * Is behaviour in Pagination section accurate?
 * The values for *transactionType* when creating a payment handle cover verification, payment, original credit and standalone credit. Does this cover possible requests for payment methods other than cards?
 * Why does payment handle request need an *amount* field? It's required for the subsequent payment request anyway.
 * When would *paymentHandleTokenFrom* be used?

# Release Notes

| Version   | Date          | Details |
|---        |---            |---      |
| v1        | January 2019  | Document release |

<a name="paymentsgettingstarted" title="Payments API Getting Started"></a>
# Getting Started

Paysafe **'Payments API'** allows merchants to collect Payments via multiple payment methods using a single endpoint integration.

## Supported Payment Methods
The following payment methods are currently supported by the Payments API:

- Card
- Skrill
- Neteller
- Paysafecard
- Paysafecash

## Using Payment Handles

A Payment Handle is basically a token that represents a payment method that you set up for a customer. Once the Payment Handle is created, you then include the *paymentHandleToken* returned in the Payment Handle request response in a new [payment request](#paymentrequest).
For example, you would create a separate Payment Handle for each permutation of transaction type and payment type you want to process &ndash; e.g., one each for credit card Payments and credit card Original Credits. 

The Payment Handle contains the payment details of the customer, including the payment method, amount, currency, payment instrument details, and customer profile details. 

Payment Handle object is characterised by additional metadata information listed below which makes handling multiple payment methods (using a single endpoint) possible.

+ **Action** - Determines the next step of the user journey

   Irrespective of the payment method selected by the customer, a merchant can use this value to determine the next step of the user journey. The possible values are,

   -> *NONE* – No further action is required from the customer. This is typically the case for a non-3D Secure card transaction where no further authentication is required from the customer after having entered valid card details. In this case, merchant can immediately make a Payments call to capture the payment. The Payment Handle status will immediately become Payable.
   
   -> *REDIRECT* – Customer is required to authorize the payment on a redirected page. Typically the case with 3D Secure card transaction where the customer verifies themselves on the bank website. In this case, the Payment Handle object will contain the link to which customer needs to be redirected. Once customer has completed the authentication successfully, the Payment Handle will transition to status 'Payable'.


   Once the Payment Handle has become 'Payable', the merchant has to make a server to server ‘Payments’ request using the Payment Handle token within 15 minutes to capture the payment. Failing which, the Payment Handle will expire.<br>

+ **Usage** – Specifies whether a Payment Handle can be reused or not

    Merchants can use this information to determine whether a Payment Handle can be reused or not.
    
   -> *SINGLE USE* –  In this case, a Payment Handle can only be used once for a subsequent Payment/Credit request. 
   
   -> *MULTI USE* - In this case, a Payment Handle can be used multiple times for a Payment request . Eg: Recurring transactions, subscriptions, saved cards etc.
   
+ **Execution Mode** – Indicates whether the actual payment is expected to be completed immediately or after a time delay
    
    Merchants can use this information to determine whether they can receive the payment status synchronously or do they need to rely on webhooks.
    
   -> *SYNCHRONOUS* – The Payment status can be received by the merchant synchronously in this case. The merchant needs to poll the PROCESSING/PENDING Payments in a regular intervals.
   
   -> *ASYNCHRONOUS* - The actual payment is expected to be completed after a significant time delay (some hours or days. Eg: PaysafeCash) in this case. Here the merchant has to rely on webhooks to capture the payment status change.
    



## Card Scenarios
Use of the Payments API for Card Payments/Credit requires you to collect cardholder details, such as the card number, expiry date, and CVV/CVC code on your gaming platform/website and send these to Paysafe with your API request.<br>


See the scenarios below describing a number of alternative ways in which merchants can set up Card Payment/Credit processing with Payments API.

### Scenario 1: One-off Card Payment with Settlement

This is typically used by merchants (Eg: Gaming, where customer deposits money in to their player account) who provide immediate delivery of the service<br>


**API to use:** [Payment Handles](#reference/payment-handles) + [Payments](#reference/payments)<br>

In the above scenario, the merchant creates a Payment Handle and then (once the Payment Handle has become payable) makes a Payments call to request an authorization with a Settlement. The parameter `settleWithAuth` is set to *true*. Once the authorization is made, the funds are immediately requested from the card issuer with the next Paysafe batch Settlement run.

### Scenario 2: One-off 3D Secure Card Payment with Settlement

This is typically used by merchants offering immediate delivery of the service in regions where the cardholder is authenticated by the card issuer prior to Payment authorization. <br>


**API to use:** [Payment Handles](#reference/payment-handles) + [Payments](#reference/payments)<br>

In the above scenario, the merchant creates a Payment Handle and since the card is 3D Secure enabled, gets a Payment Handle response with parameter `Action` set to *Redirect* and `payment_redirect` parameter pointing to the authentication redirect URL. Merchant needs to redirect the customer to the respective redirect URL for customer to complete the authentication. On successful authentication by the customer, the merchant gets notified on the URL specified in 'on_completed' parameter passed during request. Payment Handle becomes 'Payable' at this stage and merchant needs to make a Payments call to request an authorization with a Settlement. The parameter `settleWithAuth` is set to *true*. Once the authorization is made, the funds are immediately requested from the card issuer with the next Paysafe batch settlement run.

### Scenario 3: Card Payment with delayed Settlement

This is typically used by merchants who obtain an authorization for an initial purchase amount and capture Payments at a later stage, for example, after fulfillment of the service.<br>


**API to use:** [Payment Handles](#reference/payment-handles) + [Payments](#reference/payments) + [Settlements](#reference/settlements) <br>

In the above scenario, the merchant creates a Payment Handle and then (once the Payment Handle has become payable) makes a Payments call to request an initial authorization, with the parameter `settleWithAuth` set to *false*. This enables the merchant to delay issuing the Settlement (Payment capture) request until the service is fulfilled. The merchant may make one or more partial Settlement requests, up to the full amount on the original authorization.

### Scenario 4: Card Original Credits

This is typically used by merchants who want to issue credits to their customers without a previous Payment (authorization) <br>


**API to use:** [Payment Handles](#reference/payment-handles) + [Original Credits](#reference/original-credits)<br>

In the above scenario, the merchant creates a Payment Handle and then makes a Original Credit request once the Payment Handle has become 'Payable'.

### Scenario 5: Card Standalone Credits

This is typically used by merchants (with MCC Codes other than that specified for Original Credits) who want to issue credits to their customers without a previous Payment (authorization) <br>


**API to use:** [Payment Handles](#reference/payment-handles) + [Standalone Credits](#reference/standalone-credits) <br>

In the above scenario, the merchant creates a Payment Handle and then makes a Standalone Credit request once the Payment Handle has become 'Payable'.

<a name="apikey" title="Authentication"></a>
# Authentication

In order for you to use the Paysafe Payments RESTful API, Paysafe must first set you up on their system
and provide you with an API key. Your API key will have the following format:

 * Key Username – MerchantXYZ
 * Key Password – B-tst1-0-51ed39e4-312d02345d3f123120881dff9bb4020a89e8ac44cdfdcecd702151182fdc952272661d290ab2e5849e31bb03deede7e

> **Note:** This is not the same the username and password you use to access the Merchant Portal. Your Production API key will be different from your Test API key. Contact your account manager for details. You must keep your API keys safe and ensure that it is used appropriately for your needs.

The case-sensitive API key is sent using HTTP Basic Authentication. To use HTTP Basic Authentication, you must send the API key credentials using the Authorization header with every request. The Authorization header is constructed as follows:

 1. The Key Username and Key Password are combined into a string separated by a colon, e.g.,“Key Username:Key Password”.
 2. The resulting string literal is then encoded using Base64.
 3. The authorization method and a space (i.e., “Basic”) are then put before the encoded string.

For example, using the Key Username and Password examples above, the header is formed as follows:

``Authorization: Basic
TWVyY2hhbnRYWVo6Qi10c3QxLTAtNTFlZDM5ZTQtMzEyZDAyMzQ1ZDNmMTIzMTIwODgxZGZmOWJiNDAyMGE4OWU4YWM0NGNkZmRjZWNkNzAyMTUxMTgyZmRjOTU yMjcyNjYxZDI5MGFiMmU1ODQ5ZTMxYmIwM2RlZWRlN2U=``

For additional details, please refer to [http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication).

> **IMPORTANT:** The API key that you will use for the Paysafe Payments API is **different from** the API key used for all the other Developer Center APIs.

**BE SURE TO PROVIDE CLEAR INSTRUCTIONS HERE ON HOW THEY WILL GET THEIR API KEY FOR THIS API**

# URLs

##  Test URL
In order to test your integration with Paysafe, use the following Test URL:

`https://api.test.paysafe.com`

For example:

`https://api.test.paysafe.com/paymenthub/v1/payments/{payment_id}`

## Production URL
In order to process live requests with Paysafe, use the following Production URL:

`https://api.paysafe.com`

For example:

`https://api.paysafe.com/paymenthub/v1/payments/{payment_id}`


<a name="pagination" title="Pagination"></a>
# Pagination

In the case where an API GET request returns multiple results, Paysafe returns the first 10 records by default and uses HATEOAS links to provide page navigation. In addition to the default behavior, it is also possible to control the number of results and starting point by passing in query parameters as follows:

|    Name       | Description   |
|---            |---            |
| limit         | This is the total number of records to return. Max = 50. Default = 10. |
| offset        | This is the starting position, where 0 is the first record. Default = 0. |
| startDate     | This is the start date in UTC. Default = 30 days before the *endDate*.|
| endDate       | This is the end date in UTC. Default = current date and time. |

<a name="globalinvalidcharacters" title="Global Invalid Characters"></a>
# Global Invalid Characters

You must not include any of the characters in the following table as values in any of your request parameters. If you do, your request will result in an error.

|    Character    |    HEX    |    Description                     |
|-----------------|-----------|------------------------------------|
| "               | 22        | Double quotes (or speech marks)    |
| ;               | 3B        | Semicolon                          |
| ^               | 5E        | Caret, circumflex                  |
| *               | 2A        | Asterisk                           |
| <               | 3C        | Less than (or open angled bracket) |
| /               | 2F        | Slash or divide                    |
| [               | 5B        | Opening bracket                    |
| ]               | 5D        | Closing bracket                    |
| \               | 5C        | Backslash                          |

# API

The Payments API allows merchants to process payment-related requests across a wide variety of payment methods with a simple integration a single API using the REST protocol. The protocol uses JSON for all requests and responses.

The following request types are supported:

  * [Payment Methods](#getpaymentmethods)
  * [Payment Handles](#paymenthandlerequest)
  * [Verifications](#verificationrequest)
  * [Payments](#paymentrequest)
  * [Void Authorizations](#voidauthrequest)
  * [Settlements](#settlementrequest)
  * [Refunds](#refundrequest)
  * [Standalone Credits](#standalonecreditrequest)
  * [Original Credits](#originalcreditrequest)
  
**API Endpoint**

`https://api.paysafe.com/paymenthub/v1/payments/{payment_id}`

**Resource Patterns**

|Endpoint URL                                   |Description                            |Action |
|---                                            |---                                    |---    |
|/paymentmethods                                |Look Up Payment Methods for a Merchant |POST   |
|/paymenthandles                                |Create a Customer Payment Handle       |POST   |
|/paymenthandles/{payment_handle_id}            |Look Up a Payment Handle               |GET    |
|/verifications                                 |Verify a Card                          |POST   |
|/verifications/{verification_id}               |Look Up a Verification                 |GET    |
|/payments                                      |Submit a Payment Request               |POST   |
|/payments/{payment_id}                         |Look Up a Payment                      |GET    |
|/payments/{payment_id}/settlements             |Settle an Authorization                |POST   |
|/payments/{payment_id}/voidauths               |Void (Reverse) an Authorization        |POST   |
|/voidauths/{void_auth_id}                      |Look Up a Void Authorization           |GET    |
|/settlements/{settlement_id}                   |Cancel a Settlement                    |PUT    |
|/settlements/{settlement_id}                   |Look Up a Settlement                   |GET    |
|/payments/{settlement_id}/refunds              |Submit a Refund                        |POST   |
|/refunds/{refund_id}                           |Cancel a Refund                        |PUT    |
|/refunds/{refund_id}                           |Look Up a Refund                       |GET    |
|/standalonecredits                             |Submit a Standalone Credit             |POST   |
|/standalonecredits/{standalone_credit_id}      |Cancel a Standalone Credit             |PUT    |
|/standalonecredits/{standalone_credit_id}      |Look Up a Standalone Credit            |GET    |
|/originalcredits                               |Submit an Original Credit              |POST   |
|/originalcredits/{original_credit_id}          |Cancel an Original Credit              |PUT    |
|/originalcredits/{original_credit_id}          |Look Up an Original Credit             |GET    |


<a name="isostandards" title="ISO Standards"></a>
# ISO Standards

<a name="currencycodes" title="Currency Codes"></a>
## Currency Codes

**Note**
 * The table below lists the currencies in which transaction requests are processed, but note that they may be settled in a different currency.
 * Not all currencies are supported by all banks. Contact your account manager for more information about which currencies are supported for your merchant account.

|Currency |Code |
|--- |--- |
|Argentine Peso |ARS |
|Australian Dollar  |AUD |
|Azerbaijanian Manat    |AZN |
|Bahraini Dinar |BHD  |
|Belarusian Ruble   |BYR  |
|Bolivian Boliviano |BOB  |
|Bosnia and Herzegovina Convertible Mark |BAM  |
|Brazilian Real |BRL  |
|Bulgarian Lev  |BGN  |
|Canadian Dollar    |CAD  |
|Chilean Peso   |CLP  |
|China Yuan Renminbi    |CNY  |
|Columbian Peso |COP  |
|Costa Rican Colon  |CRC  |
|Croatian Kuna  |HRK  |
|Czech Koruna   |CZK  |
|Danish Krone   |DKK  |
|Dominican Peso |DOP  |
|East Caribbean Dollar  |XCD  |
|Egyptian Pound |EGP  |
|Ethiopian Birr |ETB  |
|Euro   |EUR  |
|Fiji Dollar    |FJD  |
|Georgian Lari  |GEL  |
|Guatemala Quetzal  |GTQ  |
|Haiti Goude    |HTG  |
|Honduran Lempira   |HNL  |
|Hong Kong Dollar   |HKD  |
|Hungarian Forint   |HUF  |
|Iceland Krona  |ISK  |
|Indian Rupee   |INR  |
|Indonesia Rupiah   |IDR  |
|Iranian Rial   |IRR  |
|Jamaican Dollar    |JMD  |
|Japanese Yen   |JPY  |
|Jordanian Dinar    |JOD  |
|Kazakhstan Tenge   |KZT  |
|Kenyan Shilling    |KES  |
|Korean Won |KRW  |
|Kuwaiti Dinar  |KWD  |
|Latvian Lats   |LVL  |
|Lebanese Pound |LBP  |
|Libyan Dinars  |LYD  |
|Lithuanian Litas   |LTL  |
|Malawi Kwacha  |MWK  |
|Malaysian Ringgit  |MYR  |
|Mauritius Rupee    |MUR  |
|Mexican Peso   |MXN  |
|Moldovan Leu   |MDL  |
|Moroccan Dirham    |MAD  |
|New Israeli Shekel |ILS  |
|New Zealand Dollar |NZD  |
|Nigerian Naira |NGN  |
|Norwegian Krone    |NOK  |
|Omani Rial |OMR  |
|Pakistan Rupee |PKR  |
|Panamanian Balboa  |PAB  |
|Paraguayan Guarani |PYG  |
|Peruvian Sol   |PEN  |
|Philippine Peso    |PHP  |
|Polish Zloty   |PLN  |
|Pound Sterling |GBP  |
|Qatari Rial    |QAR  |
|Romanian New Leu   |RON  |
|Russian Ruble  |RUB  |
|Saudi Arabian Riyal    |SAR  |
|Serbian Dinar  |RSD  |
|Singapore Dollar   |SGD  |
|South African Rand |ZAR  |
|Sri Lanka Rupee    |LKR  |
|Swedish Krona  |SEK  |
|Swiss Franc    |CHF  |
|Syrian Pound   |SYP  |
|Taiwan New Dollar  |TWD  |
|Thai Baht  |THB  |
|Trinidad and Tobago Dollar |TTD  |
|Tunisian Dinar |TND  |
|Turkish Lira   |TRY  |
|Ukranian Hryunia   |UAH  |
|UAE Dirham |AED  |
|Uruguay Peso   |UYU  |
|US Dollar  |USD  |
|Venezuelan Bolivar |VEF  |
|Viet Nam Dong  |VND  |

<a name="provincecodes" title="Province Codes"></a>
## Province Codes

|Province               |Code   |
|---                    |---    |
|Alberta                |AB     |
|British Columbia       |BC     |
|Manitoba               |MB     |
|New Brunswick          |NB     |
|Newfoundland           |NL     |
|Nova Scotia            |NS     |
|Northwest Territories  |NT     |
|Nunavut                |NU     |
|Ontario                |ON     |
|Prince Edward Island   |PE     |
|Quebec                 |QC     |
|Saskatchewan           |SK     |
|Yukon                  |YT     |

<a name="statecodes" title="State Codes"></a>
## State Codes

|State                  |Code   |
|---                    |---    |
|Alabama                |AL     |
|Alaska                 |AK     |
|American Samoa         |AS     |
|Arizona                |AZ     |
|Arkansas               |AR     |
|Armed Forces Americas  |AA     |
|Armed Forces Europe    |AE     |
|Armed Forces Pacific   |AP     |
|California             |CA     |
|Colorado               |CO     |
|Connecticut            |CT     |
|Delaware               |DE     |
|District of Columbia   |DC     |
|Florida                |FL     |
|Georgia                |GA     |
|Guam                   |GU     |
|Hawaii                 |HI     |
|Idaho                  |ID     |
|Illinois               |IL     |
|Indiana                |IN     |
|International          |IT     |
|Iowa                   |IA     |
|Kansas                 |KS     |
|Kentucky               |KY     |
|Louisiana              |LA     |
|Maine                  |ME     |
|Maryland               |MD     |
|Massachusetts          |MA     |
|Michigan               |MI     |
|Minnesota              |MN     |
|Mississippi            |MS     |
|Missouri               |MO     |
|Montana                |MT     |
|Nebraska               |NE     |
|Nevada                 |NV     |
|New Hampshire          |NH     |
|New Jersey             |NJ     |
|New Mexico             |NM     |
|New York               |NY     |
|North Carolina         |NC     |
|North Dakota           |ND     |
|Northern Mariana Is.   |MP     |
|Ohio                   |OH     |
|Oklahoma               |OK     |
|Oregon                 |OR     |
|Palau                  |PW     |
|Pennsylvania           |PA     |
|Puerto Rico            |PR     |
|Rhode Island           |RI     |
|South Carolina         |SC     |
|South Dakota           |SD     |
|Tennessee              |TN     |
|Texas                  |TX     |
|U.S. Virgin Islands    |VI     |
|United States Federal  |US     |
|Utah                   |UT     |
|Vermont                |VT     |
|Virginia               |VA     |
|Washington             |WA     |
|West Virginia          |WV     |
|Wisconsin              |WI     |
|Wyoming                |WY     |


<a name="countrycodes" title="Country Codes"></a>
## Country Codes
| Country                       | Code |
|---                                |---       |
| Afghanistan                       | AF |
| Åland Islands                     | AX |
| Albania                           | AL |
| Algeria                           | DZ |
| American Samoa                    | AS |
| Andorra                           | AD |
| Angola                            | AO |
| Anguilla                          | AI |
| Antarctica                        | AQ |
| Antigua and Barbuda               | AG |
| Argentina                         | AR |
| Armenia                           | AM |
| Aruba                             | AW |
| Australia                         | AU |
| Austria                           | AT |
| Azerbaijan                        | AZ |
| Bahamas                           | BS |
| Bahrain                           | BH |
| Bangladesh                        | BD |
| Barbados                          | BB |
| Belarus                           | BY |
| Belgium                           | BE |
| Belize                            | BZ |
| Benin                             | BJ |
| Bermuda                           | BM |
| Bhutan                            | BT |
| Bolivia                           | BO |
| Bonaire, Sint Eustatius and Saba  | BQ |
| Bosnia and Herzegovina            | BA |
| Botswana                          | BW |
| Bouvet Island                     | BV |
| Brazil                            | BR |
| British Indian Ocean Territory    | IO |
| Brunei Darussalam                 | BN |
| Bulgaria                          | BG |
| Burkina Faso                      | BF |
| Burundi                           | BI |
| Cambodia                          | KH |
| Cameroon                          | CM |
| Canada                            | CA |
| Cape Verde                        | CV |
| Cayman Islands                    | KY |
| Central African Republic          | CF |
| Chad                              | TD |
| Chile                             | CL |
| China                             | CN |
| Christmas Island                  | CX |
| Cocos (Keeling) Islands           | CC |
| Colombia                          | CO |
| Comoros                           | KM |
| Congo                             | CG |
| Congo, Democratic Republic of     | CD |
| Cook Islands                      | CK |
| Costa Rica                        | CR |
| Côte D’Ivoire                     | CI |
| Croatia                           | HR |
| Cuba                              | CU |
| Curaçao                           | CW |
| Cyprus                            | CY |
| Czech Republic                    | CZ |
| Denmark                           | DK |
| Djibouti                          | DJ |
| Dominica                          | DM |
| Dominican Republic                | DO |
| Ecuador                           | EC |
| Egypt                             | EG |
| El Salvador                       | SV |
| Equatorial Guinea                 | GQ |
| Eritrea                           | ER |
| Estonia                           | EE |
| Ethiopia                          | ET |
| Falkland Islands                  | FK |
| Faroe Islands                     | FO |
| Fiji                              | FJ |
| Finland                           | FI |
| France                            | FR |
| French Guiana                     | GF |
| French Polynesia                  | PF |
| French Southern Territories       | TF |
| Gabon                             | GA |
| Gambia                            | GM |
| Georgia                           | GE |
| Germany                           | DE |
| Ghana                             | GH |
| Gibraltar                         | GI |
| Greece                            | GR |
| Greenland                         | GL |
| Grenada                           | GD |
| Guadeloupe                        | GP |
| Guam                              | GU |
| Guatemala                         | GT |
| Guernsey                          | GG |
| Guinea                            | GN |
| Guinea-Bissau                     | GW |
| Guyana                            | GY |
| Haiti                             | HT |
| Heard and McDonald Islands        | HM |
| Honduras                          | HN |
| Hong Kong                         | HK |
| Hungary                           | HU |
| Iceland                           | IS |
| India                             | IN |
| Indonesia                         | ID |
| Iran  (Islamic Republic of)       | IR |
| Iraq                              | IQ |
| Ireland                           | IE |
| Isle of Man                       | IM |
| Israel                            | IL |
| Italy                             | IT |
| Jamaica                           | JM |
| Japan                             | JP |
| Jersey                            | JE |
| Jordan                            | JO |
| Kazakhstan                        | KZ |
| Kenya                             | KE |
| Kiribati                          | KI |
| Korea, Democratic People’s Republic | KP |
| Korea, Republic of                | KR |
| Kuwait                            | KW |
| Kyrgyzstan                        | KG |
| Lao People’s Democratic Republic  | LA |
| Latvia                            | LV |
| Lebanon                           | LB |
| Lesotho                           | LS |
| Liberia                           | LR |
| Libyan Arab Jamahiriya            | LY |
| Liechtenstein                     | LI |
| Lithuania                         | LT |
| Luxembourg                        | LU |
| Macau                             | MO |
| Macedonia                         | MK |
| Madagascar                        | MG |
| Malawi                            | MW |
| Malaysia                          | MY |
| Maldives                          | MV |
| Mali                              | ML |
| Malta                             | MT |
| Marshall Islands                  | MH |
| Martinique                        | MQ |
| Mauritania                        | MR |
| Mauritius                         | MU |
| Mayotte                           | YT |
| Mexico                            | MX |
| Micronesia, Federated States of   | FM |
| Moldova, Republic of              | MD |
| Monaco                            | MC |
| Mongolia                          | MN |
| Montenegro                        | ME |
| Montserrat                        | MS |
| Morocco                           | MA |
| Mozambique                        | MZ |
| Myanmar                           | MM |
| Namibia                           | NA |
| Nauru                             | NR |
| Nepal                             | NP |
| New Caledonia                     | NC |
| New Zealand                       | NZ |
| Nicaragua                         | NI |
| Niger                             | NE |
| Nigeria                           | NG |
| Niue                              | NU |
| Norfolk Island                    | NF |
| Northern Mariana Islands          | MP |
| Norway                            | NO |
| Oman                              | OM |
| Pakistan                          | PK |
| Palau                             | PW |
| Palestinian Territory, Occupied   | PS |
| Panama                            | PA |
| Papua New Guinea                  | PG |
| Paraguay                          | PY |
| Peru                              | PE |
| Philippines                       | PH |
| Pitcairn                          | PN |
| Poland                            | PL |
| Portugal                          | PT |
| Puerto Rico                       | PR |
| Qatar                             | QA |
| Reunion                           | RE |
| Romania                           | RO |
| Russian Federation                | RU |
| Rwanda                            | RW |
| Saint Barthélemy                  | BL |
| Saint Helena                      | SH |
| Saint Kitts and Nevis             | KN |
| Saint Lucia                       | LC |
| Saint Martin                      | MF |
| Saint Vincent and the Grenadines  | VC |
| Samoa                             | WS |
| San Marino                        | SM |
| Sao Tome and Principe             | ST |
| Saudi Arabia                      | SA |
| Senegal                           | SN |
| Serbia                            | RS |
| Seychelles                        | SC |
| Sierra Leone                      | SL |
| Singapore                         | SG |
| Sint Maarten                      | SX |
| Slovakia (Slovak Republic)        | SK |
| Slovenia                          | SI |
| Solomon Islands                   | SB |
| Somalia                           | SO |
| South Africa                      | ZA |
| South Georgia and the South Sandwich Islands | GS |
| South Sudan                       | SS |
| Spain                             | ES |
| Sri Lanka                         | LK |
| St. Pierre and Miquelon           | PM |
| Sudan                             | SD |
| Suriname                          | SR |
| Svalbard and Jan Mayen Islands    | SJ |
| Swaziland                         | SZ |
| Sweden                            | SE |
| Switzerland                       | CH |
| Syrian Arab Republic              | SY |
| Taiwan                            | TW |
| Tajikistan                        | TJ |
| Tanzania, United Republic of      | TZ |
| Thailand                          | TH |
| The Netherlands                   | NL |
| Timor-Leste                       | TL |
| Togo                              | TG |
| Tokelau                           | TK |
| Tonga                             | TO |
| Trinidad and Tobago               | TT |
| Tunisia                           | TN |
| Turkey                            | TR |
| Turkmenistan                      | TM |
| Turks and Caicos Islands          | TC |
| Tuvalu                            | TV |
| Uganda                            | UG |
| Ukraine                           | UA |
| United Arab Emirates              | AE |
| United Kingdom                    | GB |
| United States                     | US |
| United States Minor Outlying Islands | UM |
| Uruguay                           | UY |
| Uzbekistan                        | UZ |
| Vanuatu                           | VU |
| Vatican City State (Holy See)     | VA |
| Venezuela                         | VE |
| Vietnam                           | VN |
| Virgin Islands (British)          | VG |
| Virgin Islands (U.S.)             | VI |
| Wallis and Futuna Islands         | WF |
| Western Sahara                    | EH |
| Yemen                             | YE |
| Zambia                            | ZM |
| Zimbabwe                          | ZW |

# Common Objects

<a name="accorddobject" title="AccordD Object"></a>
## accordD
|Element            |Type                       |Description                        |
|---                |---                        |---       |
|financingType      |enum                       |This is the type of financing offered.<ul><li>DEFERRED_PAYMENT &ndash; Deferred payment financing</li><li>EQUAL_PAYMENT &ndash; Equal payment financing</li></ul>|
|plan               |string<br/>`length<=3`     |This is the plan number for this financing transaction.|
|gracePeriod        |number<br/>`max=99`        |This is the grace period, in months, associated with deferred payment transactions.|
|term               |number<br/>`max=99`        |This is the number of payments, in months, for equal payment transactions.|

```apib
    {
    "accordD":{
        "financingType":"DEFERRED_PAYMENT",
        "plan":"123",
        "gracePeriod":"12"
    }
    }
```

<a name="acquirerdataobject" title="Acquirer Data Object"></a>
## acquirerData

This is additional information about the card acquirer required when you are performing an Original Credit request. This object is required **only when** you are using Credorax (CRX) as your acquirer for Original Credits. Contact your account manager for details.

|Element            |Type                       |Description                        |
|---                |---                        |---       |
|authId             |string<br/>`length<=36`    |This is the ID returned in the response to a previous successful Payment request.|
|code               |string</br>`length<=10`    |This is the code for your card acquirer.|
|externalSubMerchantId |string                  |This is the external merchant ID of the acquirer data.|

```apib
    {
    "acquirerData":{
        "authId":"f06bccd6-de90-4b73-b10f-30266763bc60",
        "code":"CRX"
    }
    }
```

<a name="authenticationobject" title="Authentications Object"></a>
## authentication

|Element                |Type                           |Description|
|---                    |---                            |---       |
|id                     |string<br/>`length<=36`        |This is the ID returned in the response. |
|eci                    |number                         |This is the E-Commerce Indicator (ECI). This value will be returned only on payer authentication transactions, or for enrollments where the issuer is non-participating and the card scheme supports it. This value must be appended to the authorization request, where it enables the interchange benefits granted to merchants processing payer Authentication transactions.<br/>**Visa**<br/><ul><li>5 &ndash; Identifies a successfully authenticated transaction.</li><li>6 &ndash; Identifies an attempts authenticated transaction.</li><li>7 &ndash; Identifies a non-authenticated transaction.</li></ul><br/>**Mastercard**<br/><br/><ul><li>1 &ndash; Identifies a non-authenticated transaction.</li><li>2 &ndash; Identifies a successfully authenticated transaction.</li></ul>|
|cavv                   |string<br/>`length<=80`        |This is the Cardholder Authentication Verification Value, indicating that the transaction has been authenticated. This value should be appended to the authorization request signifying that the transaction has been successfully authenticated.|
|xid                    |string<br/>`length<=40`        |This is the transaction identifier returned by the card issuer.|
|status                 |enum                           |This is the status of the Enrollment Lookup request. Possible values are:<br/><ul><li>COMPLETED - The transaction has been completed.</li><li>FAILED - The authentication request failed. Check the error code for details.</li></ul>|
|merchantRefNum         |string<br/>`length<=255`       |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|threeDEnrollment       |enum                           |This indicates whether or not the cardholder is enrolled in 3D Secure. Possible values are:<br/><ul><li>Y &ndash; Cardholder authentication available</li><li>N &ndash; Cardholder not enrolled in authentication</li><li>U &ndash; Cardholder authentication unavailable</li></ul>|
|threeDResult           |enum                           |This indicates the outcome of the Authentication.<br/><ul><li>Y &ndash; The cardholder successfully authenticated with their card issuer.</li><li>A &ndash; The cardholder authentication was attempted.</li><li>N &ndash; The cardholder failed to successfully authenticate with their card issuer.</li><li>U &ndash; Authentication with the card issuer was unavailable.</li><li>E &ndash; An error occurred during authentication.</li></ul>|
|signatureStatus        |enum                           |This is the 3D Secure signature verification result value.<br/><ul><li>Y &ndash; All transaction and signature checks satisfied.</li><li>N &ndash; At least one transaction or signature check failed.</li></ul>|
|error                  |[complex](#errorobject)        |       |

```apib
  {
  "authentication":{
    "eci":5,
    "cavv":"AAABCIEjYgAAAAAAlCNiENiWiV+=",
    "xid":"OU9rcTRCY1VJTFlDWTFESXFtTHU=",
    "threeDEnrollment":"Y",
    "threeDResult":"Y",
    "signatureStatus":"Y"
  }
  }
```


<a name="billingdetailsobject" title="Billing Details Object"></a>
## billingDetails

|Element            |Type                       |Description                        |
|---                |---                        |---       |
|id                 |string<br/>`length<=36`    |This is the ID of the billing address, returned in the response. |
|nickName           |string<br/>`length<=50`    |This is the nickname the merchant has for the billing address. |
|street             |string<br/>`length<=50`    |This is the first line of the customer's street address.|
|street2            |string<br/>`length<=50`    |This is the second line of the customer's street address, if required (e.g., apartment number).|
|city               |string<br/>`length<=40`    |This is the city where the address is located.|
|state              |string<br/>`length<=40`    |This is the state/province/region in which the customer lives.<br/>For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions.|
|zip                |string<br/>`length<=10`    |This is the zip, postal, or post code of the customer's address.|
|country            |string<br/>`length=2`      |This is the country where the address is located. See [Country Codes](#countrycodes).|

```apib
{
    "billingDetails": {
        "nickName": "home",
        "street": "100 Queen Street West",
        "street2": "Unit 201",
        "city": "Toronto",
        "state": "ON",
        "zip": "M5H 2N2",
        "country": "CA"
    }
}
```


<a name="cardobject" title="card Object"></a>
## card

* Other APIs use "card" and not "cardType"
* What does status apply to? What are possible values?

When providing card information, merchants can provide either card details or a payment token for a customer already created in the system.

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|paymentToken       |string <br/>`length<=80`   |If the payment token is provided, no other card information is necessary. |
|cvv                |string<br/>`length=3-4`    |This is the 3- or 4-digit security code that appears on the card following the card number.|

**OR**

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|cardNum            |string <br/>`length=8-20`  |This is the card number used for the request. |
|lastDigits         |string<br/>`length=4`      |This is the last four digits of the card used for the request, returned in the response.|
|cardExpiry         |[cardExpiry](#cardexpiryobject)|This is the card's expiry date.|
|cvv                |string<br/>`length=3-4`    |This is the 3- or 4-digit security code that appears on the card following the card number.|
|merchantDescriptor |[merchantDescriptor](#merchantdescriptorobject) |This is the merchant descriptor that will be displayed on the customer's card or bank statement.<br/>**Note:** Not all processing gateways support this parameter. Contact your account manager for more information.    |
|holderName         |string<br/>`length<=160`   |This is the name of the card holder. |
|status             |enum                       |       |
|nickName           |string<br/>`length<=50`    |This is the nickname the merchant has for the card holder. |
|cardType           |enum                       |This is the type of card used for the request, returned in the response. Possible values are:<br/><ul><li>AM &ndash; American Express</li><li>DI &ndash; Discover</li><li>JC &ndash; JCB</li><li>MC &ndash; Mastercard</li><li>MD &ndash; Maestro</li><li>SO &ndash; Solo</li><li>VI &ndash; Visa</li><li>VD &ndash; Visa Debit</li><li>VE &ndash; Visa Electron</li></ul>
|cardBin            |string<br/>`length=6`      |This is the card BIN (typically the first 6 digits).|

```apib
    {
    "card": {
        "cardNum": "4111111111111111",
        "cardExpiry": {
            "month": 2,
            "year": 2019
        }
    }
    }
```


<a name="cardexpiryobject" title="cardExpiry Object"></a>
## cardExpiry

|Element                 |Type                   |Description|
|---                     |---                    |---|
|month                   |number<br/>`length=2`  |This is the card expiry month. |
|year                    |number<br/>`length=4`  |This is the card expiry year.|

```apib
    {
    "cardExpiry":{
        "month": "12",
        "year": "2020"
    }
    }
```

<a name="dateofbirthobject" title="Date of Birth Object"></a>
## dateOfBirth
|Element            |Type                           |Description    |
|---                |---                            |---            |
|year               |number<br/>`length=4 min=1900` |This is the year of birth.|
|month              |number<br/>`length=2 max=12`   |This is the month of birth.|
|day                |number<br/>`length=2 max=31`   |This is the day of birth.|

```apib
            { 
               "dateOfBirth": {
                  "year": 1980,
                  "month": 12,
                  "day": 25
                }
            }
```

<a name="errorobject" title="error Object"></a>
## error
|Element            |Type       |Description                        |
|---                |---        |---                                |
|code               |string     |The error code. Also shown in the X-Application-Status-Code response header.            |
|message            |string     |A description of the error.                 |
|details            |array      |Details of any parameter value errors.       |
|fieldErrors        |array      |If applicable, this is a list of fields that have issues.|

```apib
   {
   "error":{  
      "code":"5270",
      "message":"The credentials provided with the request do not have permission to access the data requested.",
      "details":[  
         "access to {stpAccount:1001076700} denied"
      ],
      "fieldErrors":[  
         {  
            "field":"street",
            "error":"Unexpected characters"
         }
      ]
   }
   }
```

<a name="gatewayresponseobject" title= "Gateway Response Object"></a>
## gatewayResponse

This is a read-only raw response returned by an acquirer. 

| Element            | Type   | Description                                                                                         |
|--------------------|--------|-----------------------------------------------------------------------------------------------------|
| code               | String | This is acquirer identification code, such as DJN, CRX, etc.                                        |
| responseCode       | String | This is the raw response returned by the acquirer.                                                  |
| avsCode            | String | This is the raw AVS code returned by the acquirer.                                                  |
| balanceResponse    | String | This is the balance remaining on a gift card, if a gift card was used for the original transaction. |
| mid                | String | This is the acquirer MID that was sent to the clearing house.                                       |
| terminalId         | String | This is the merchant's terminal ID.                                                                 |
| batchNumber        | String | This is the batch number.                                                                           |
| seqNumber          | String | This is the merchant's sequence number.                                                             |
| effectiveDate      | String | This is the date of the bank deposit associated with the transaction.                               |
| financingType      | String | This is the type of financing offered.                                                              |
| plan               | String | This is the plan number for this financing transaction.                                             |
| gracePeriod        | String | This is the grace period, in months, associated with deferred payment transactions.                 |
| term               | String | This is the number of payments, in months, for equal payment transactions.                          |
| responseId         | String | This is the response ID assigned by Credorax.                                                       |
| requestId          | String | This is the request ID assigned by Paysafe.                                                         |
| description        | String | This is a description of the response.                                                              |
| authCode           | String | This is the authorization code.                                                                     |
| txnDateTime        | String | This is the transaction date and time.                                                              |
| referenceNbr       | String | This is the Bank net transaction ID/Merch Tran Ref                                                  |
| responseReasonCode | String | This is the raw response reason code returned by Credorax.                                          |
| cvv2Result         | String | This is the raw cvv2 result code.                                                                   |

<a name="level2level3object" title="level2level3 Object"></a>
## level2level3

Level 2 and Level 3 (L2/L3) credit card processing refers to certain B2B card transactions for which the merchant might be eligible for lower credit card interchange rates. The lower rates may be available for 
merchants who provide more detailed information when processing card-not-present transactions. In order to be eligible for L2/L3 transactions:
 * Your merchant account must be properly configured by Paysafe.
 * The BIN of the credit card used for the transaction must be eligible – typically, these are government-issued credit cards.


|Element                |Type                               | Description|
|---                    |---                                |---            |
| exemptLocalTax        |boolean                            | This indicates whether or not local tax is exempted for the request. If set to true, then the localTaxAmount parameter will be ignored.<br/>**Note:** This value defaults to *false*. |
| localTaxAmount        |integer<br/>`length<=99999999999`  | This is the local sales tax applied to the purchase.|
| nationalTaxAmount     |number<br/>`length<=99999999999`   | This is the national tax included in the transaction amount. |
| freightAmount         |number<br/>`length<=99999999999`   | This is the freight or shipping portion of the total transaction amount. |
| dutyAmount            |number<br/>`length<=99999999999`   | This is the duty associated with the import of the purchased goods. |
| destinationZip        |number<br/>`length<=10`            | This is the postal/zip code of the address to which the purchased goods will be delivered. This field can be identical to the shipFromZip if the customer is present and takes immediate possession of the goods. |
| destinationCountry    |number<br/>`length=2`              | This is the country to which the goods are being shipped. See [Country Codes](#countrycodes). |
| shipFromZip           |number<br/>`length<=10`            | This is the postal/zip code of the address from which the purchased goods are being shipped. |
| lineItems             |[lineItems](#lineitemsobject)      | This is more detailed information about the items that are being purchased.| 

```apib
    {
    "level2Level3": {
        "localTaxAmount": 15000,
        "nationalTaxAmount": 0,
        "freightAmount": 0,
        "dutyAmount": 0,
        "destinationZip": "90210",
        "destinationCountry": "US",
        "shipFromZip": "90210",
        "lineItems": [
            {
                "description": "Disney Cruise Line - Adult",
                "productCode": "DCL-A",
                "quantity": 2,
                "unitAmount": 120000,
                "taxRate": 5,
                "taxAmount": 12000,
                "totalAmount": 252000
            },
            {
                "description": "Disney Cruise Line - Kids",
                "productCode": "DCL-K",
                "quantity": 1,
                "unitAmount": 60000,
                "taxRate": 5,
                "taxAmount": 3000,
                "totalAmount": 63000
            }
        ]
    }
    }
```

<a name="lineitemsobject" title="lineItems Object"></a>
##lineItems

|Element                |Type                               | Description|
|---                    |---                                |---            |
|description            |string<br/>`length<=50`            |This is a description of the item(s) being purchased.|
|productCode            |string<br/>`length<=12`            |This is a merchant-defined description code of the item being purchased.|
|quantity               |number<br/>`length<=99999999999`<br/>`max 4 decimals` |This is the quantity of the item.|
|unitAmount             |number<br/>`length<=99999999999`   |This is the unit price of the item being purchased, in minor units. The currency will be based on the account setting.|
|taxRate                |number<br/>`length<=100`<br/>`max 2 decimals`    |This is the tax rate used to calculate the tax amount. For example, if the tax rate is 10.5%, this value should be 10.5.|
|taxAmount              |number<br/>`length<=99999999999`   |This is the amount of any value-added taxes that can be associated with the purchased item, in minor units. The currency will be based on the account setting. **Note:** Our system will not validate the accuracy of this value. The merchant's application must calculate this value correctly.|
|totalAmount            |number<br/>`length<=99999999999`   |This is the total amount of the line item, typically calculated as price multiplied by quantity, in minor units. The currency will be based on the account setting. **Note:** Our system will not validate the accuracy of this value. The merchant's application must calculate this value correctly.|

```apib
    {
    "lineItems": {
        "description": "Disney Cruise Line",
        "productCode": "DCL",
        "quantity": 4,
        "unitAmount": 120000,
        "taxRate": 5,
        "taxAmount": 24000,
        "totalAmount": 504000
    }
    }
```

<a name="merchantdescriptorobject" title="merchantDescriptor Object"></a>
## merchantDescriptor
|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|dynamicDescriptor  |string <br/>`length<=20`   |This is a merchant descriptor that will be displayed on a customer’s card statement.|
|phone              |string <br/>`length<=13`   |This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s card statement.|

```apib
    {
    "merchantDescriptor":{
        "dynamicDescriptor":"OnlineStore",
        "phone":"12345678"
  }
  }
```

<a name="metadataobject" title="metadata Object"></a>
## metadata

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|key                |string <br/>`length<=50`   |This is a description of the data being added to the order.|
|value              |string <br/>`length<=100`  |This is the value for the key/value pair.|

<a name="originalcreditsobject" title="originalcredits Object"></a>
## originalcredits

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|paymentHandleToken |string<br/>`length<=36`                |This is the payment token generated by Paysafe that will be used by merchants for Original Credit requests.|
|currencyCode       |string<br/>`length=3`                  |This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes)|
|card               |[card](#cardobject)                    |These are the details of the card used.|
|billingDetails     |[billingDetails](#billingdetailsobject)|These are the billing details for the request.|
|customerIp         |string<br/>`length<=39`                |This is the customer's IP address.|
|description        |string<br/>`length<=255`               |This is a description of the transaction, provided by the merchant.|

```apib
{
  "merchantRefNum":"merchant ABC-444",
  "amount":10098,
  "paymentHandleToken": "SC9mbfZSITB5OwDJ",
  "currencyCode": "GBP",
  "customerIp":"204.91.0.12",
  "description":"Winning payment from Loto"
}    
```

<a name="partialauthobject" title="partialAuth Object"></a>
## partialAuth

This is an authorization that is approved for an amount lower than the requested amount. The remainder of the amount could be paid by other means.|

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|requested          |boolean                    |This specifies whether or not a partial authorization was requested. |
|amountDue          |number<br/>`max=99999999999` |This is the amount of the full authorization that is not covered by the Payment request. |
|originalAmount     |number<br/>`max=99999999999` |This is the actual amount of the full authorization. |

```apib
{
    "partialAuth": {
        "requested": "true",
        "amountDue": "1000",
        "originalAmount": "2000"
    }
}
```


<a name="paymenthandleobject" title="Payment Handle Object"></a>
## Payment Handle

|Element                |Type                       |Description                        |
|---                    |---                        |---       |
|id                     |string<br/>`length<=32`    |This is the ID returned in the response. This ID can be used to retrieve the Payment Handle.|
|paymentHandleTokenFrom |string<br/>`length<=36`    |This is the existing Payment Handle ID, from which the payment instrument and profile details are retrieved. |
|merchantRefNum         |string<br/>`length<=255`   |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request. |
|transactionType        |enum                       |This specifies the transaction type for which the Payment Handle is created. Possible values are: <ul><li>PAYMENT</li><li> STANDALONE_CREDIT</li><li>ORIGINAL_CREDIT</li><li>VERIFICATION</li></ul>|
|status                 |enum                       |This is the status of the request. Possible values are:<ul><li>INITIATED &ndash; The request was initiated with the downstream provider.</li><li>PAYABLE &ndash; The merchant can use the Payment Handle for a Payment request.</li><li>PROCESSING &ndash; The Payment Handle was authorized by customer, awaiting PSP response.</li><li>FAILED &ndash; The transaction failed due to either an error or being declined.</li><li>EXPIRED &ndash; The Payment Handle expired because the merchant did not proceed with the Payment transaction.</li><li>COMPLETED &ndash; The Payment request was initiated successfully using the Payment Handle.</li></ul>      |
|usage                  |enum                       |This specifies how the Payment Handle will be used for Payments. Possible values are:<ul><li>SINGLE_USE &ndash; The Payment Handle can be used for one transaction only and expires if not used.</li><li>MULTI_USE &ndash; The Payment Handle can be used multiple times.</li></ul>|
|paymentType            |enum                       |This is the payment type associated with this Payment Handle. Possible values are:<ul><li>CARD</li><li>SKRILL</li><li>NETELLER</li><li>PAYSAFECASH</li><li>PAYSAFECARD</li></ul>|
|action                 |enum                       |This specifies the next step of the user journey once they proceed to the Payment. Possible values are:<ul><li>NONE &ndash; No action is required, e.g., for a standard credit card payment.</li><li>REDIRECT &ndash; The user must be redirected in order to complete a Payment, e.g., when an alternate payment method like NETELLER is used.</li><li>AUTHENTICATE &ndash; The user must be redirected to authenticate ownership of the payment account.</li></ul>|
|executionMode          |enum                       |This specifies the action of the merchant server in order to complete the Payment. Possible values are:<ul><li>SYNCHRONOUS &ndash; The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.</li><li>ASYNCHRONOUS &ndash; The Payment request is not completed immediately and the merchant must rely on webhooks to retrieve the status of the Payment request.</li></ul>|
|amount                 |number<br/>`max=99999999999` |This is the amount of the request, in minor units.<br/>Note: This field is mandatory if *transactionType* is included. |
|currencyCode           |string<br/>`length=3`      |This is the currency of the merchant account, e.g., USD or CAD. See [Currency Codes](#currencycodes)|
|paymentHandleToken     |string                     |This is the payment token generated by Paysafe that will be used by merchants for Payment API requests.|
|card \|                | [card](#cardobject) \|         |These are details of the payment instrument used in the request. |
|billingDetails         |[billingDetails](#billingdetailsobject)         |These are billing details for the request.|
|profile                |[profile](#profileobject)  |This is the customer's profile. |
|returnLinks            |[returnLinks](#returnlinksobject)         |These are links to which to redirect the customer, where applicable. |
|customerIp             |string<br/>`length<=39`    |This is the customer's IP address. |
|timeToLiveSeconds      |number<br/>`length<=899`   |This is the period of time, in seconds, the *paymentHandleToken* is valid before expiration.|

```apib
{
    "merchantRefNum": "merchantRefNum-101",
    "transactionType": "PAYMENT",
    "card": {
        "cardNum": "5191330000004415",
        "cardExpiry": {
            "month": 10,
            "year": 2021
        },
        "cvv": "111",
        "holderName": "Chad"
    },
    "paymentType": "CARD",
    "amount": 190,
    "currencyCode": "GBP",
    "customerIp": "172.0.0.1",
    "billingDetails": {
        "nickName": "Home",
        "street": "100 Queen",
        "street2": "Unit 201",
        "city": "Toronto",
        "zip": "M5H 2N2",
        "country": "CA"
    },
    "returnLinks": [{
            "rel": "on_completed",
            "href": "https://US_commerce_site/payment/return/success",
            "method": "GET"
        },
        {
            "rel": "on_failed",
            "href": "https://US_commerce_site/payment/return/failed",
            "method": "GET"
        }
    ]
}
```

<a name="paymentsobject" title="Payments Object"></a>
## Payments

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.|
|dupCheck           |boolean                                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|settleWithAuth     |boolean                                |This indicates whether the request is an Authorization only (no Settlement), or a Purchase (Authorization and Settlement).<br/><ul><li>false &ndash; The request is not settled</li><li>true &ndash; The request is settled</li></ul><br/>**Note:** Defaults to *true*.|
|preAuth            |boolean                                |This indicates whether the Authorization request should be sent as a Pre-Authorization.<br/>**Note:** You should use the *preAuth* element in cases where you are not sure that you can fully settle the Authorization within 4 days. Contact your account manager for more information.|
|partialAuth        |[partialAuth](#partialauthobject)      |This is an authorization that is approved for an amount lower than the requested amount. The remainder of the amount could be paid by other means.|
|paymentHandleToken |string<br/>`length<=36`                |This is the Payment Handle token that represents the payment instrument to be used in the Payment request. |
|authCode           |string<br/>`length<=50`                |This is the Authorization code assigned by the issuing bank and returned in the response.|
|availableToSettle  |number                                 |This is the amount of of the Authorization remaining to settle, in minor units.|
|childAccountNum    |string<br/>`length<=10`                |This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|customerIp         |string<br/>`length<=39`                |This is the customer's IP address.|
|description        |string<br/>`length<=255`               |This is a description of the transaction, provided by the merchant.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2019-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>HELD &ndash; The transaction has been placed on hold due to risk considerations.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li><li>PENDING &ndash; The request is pending.</li></ul>|
|currencyCode       |string<br/>`length=3`                  |This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes)|
|level2level3       |[level2level3](#level2level3object)    |This allows merchants who are enabled to provide additional L2/L3 transaction data.<br/>**Note:** Not all processing gateways support this parameter. Contact your account manager for more information.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) | This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|
|accordD            |[accordD](#accorddobject)              |These are parameters for financing plans supported for certain merchant configurations.<br/>Include this element **only when** instructed to do so by your account manager.|
|recipient          |[recipient](#recipientobject)          |In certain cases, this allows additional data to be included with a Payment request. |
|riskReasonCode     |array                                  |An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|splitpay           |[splitpay](#splitpayobject)            |This enables you to use the Split Payouts functionality when authorizing with a Settlement.|
|storedCredentialDetails |[storedCredentialDetails](#storedcredentialobject) | This object is used to identify requests that use stored credentials that the merchant has on file for the consumer, in order to improve authorization rates and reduce fraud. |
|settlements        |array                                  |This is a read-only list of all Settlements. This will be returned only if *settleWithAuth* = *true* in the request. |
|error              |[error](#errorobject)                  |       |
|statusReason       |string<br/>`length<=255`               |This is reason for the status. This is present in the case where *status* is ERROR, FAILURE, or HELD. |
|authentication     |[authentication](#authenticationobject)|These are 3D Secure details.|

```apib
{
    "merchantRefNum": "merchantRefNum-108",
    "amount": 190,
    "currencyCode": "GBP",
    "dupCheck": true,
    "settleWithAuth": false,
    "paymentHandleToken": "SCZJg09GWSv36NLB",
    "customerIp": "10.10.12.64",
    "description": "Gaming Request"
}
```


<a name="profileobject" title="Profile Object"></a>
## profile

|Element            |Type                               |Description    |
|---                |---                                |---            |
|id                 |string <br/>`length<=36`           |This is the ID returned in the response.|
|status             |enum                               |This is the status of the customer profile. Possible values are:<br/><ul><li>ACTIVE &ndash; The temporary profile ID can be used to retrieve the saved payment instrument.</li></ul> |
|merchantCustomerId |string <br/>`length<=100`          |This is a customer ID that the merchant provides with the request for their own internal customer identification.|
|locale             |enum                               |This indicates the language of the profile. Possible values are:<ul><li>en_US</li><li>fr_CA</li><li>en_GB</li></ul>|
|firstName          |string <br/>`length<=80`           |This is the customer’s first name. |
|lastName           |string <br/>`length<=80`           |This is the customer’s last name. |
|email              |string<br/>`length<=255`           |This is the customer's email address.|
|phone              |string<br/>`length<=40`            |This is the customer's phone number.|
|dateOfBirth        |[dateOfBirth](#dateofbirthobject)  |These are the addresses associated with saved payment instruments for the customer. |

```apib
            {
              "merchantCustomerId":"mycustomer1",
              "locale" : "en_US",
              "firstName" : "John",
              "lastName" : "Smith",
              "email" : "john.smith@somedomain.com",
              "phone" : "713-444-5555"
             }
```

<a name="recipientobject" title="recipient Object"></a>
## recipient 

The recipient is deemed to be the person or party who has the contractual relationship with the merchant/financial institution. This may be different from the cardholder, e.g., in the case of a parent topping up a child's savings account. Therefore, the fields should not be collected on the same page as cardholder information, but instead be passed in the background from the merchant’s records.

**Note:** You can include *recipient* elements in your [authorization request](#authrequest) **only if** your Merchant Category Code is **6012** and your registered trading address is in the United Kingdom. All fields are optional. However, scheme fines may apply if data is consistently not supplied and chargebacks persist. If you have any questions, contact your account manager.
If you are using a payment token for an Authorization request and there is already recipient data for the consumer profile associated with the payment token, then if you include the *recipient* object in the Authorization, this data will override the recipient data already in the profile.

If you [look up an authorization request](#getauth)  that used the *visaAdditionalAuthData* parameter (now deprecated), the response will contain the relevant data in both the *recipient* and the *visaAdditionalAuthData* objects.

|Element                    |Type                       |Description                        |
|---                        |---                        |---                                |
|dateOfBirth                |[dateOfBirth](#dateofbirthobject) |This is the recipient's date of birth. |
|zip                        |string<br/>`length<=10`    |This is the recipient's postcode.<br/>**Note:** The last 3 characters are not sent to the banking network.|
|lastName                   |string<br/>`length<=255`   |This is the recipient's last name.<br/>**Note:** Only the first 6 characters are sent to the banking network.|
|accountNumber              |string<br/>`length<=25`    |This is the recipient's account number, e.g., a loan agreement number or customer ID. In the case where the recipient account is a prepaid card, the card number may be sent in full.<br/>**Note:** Only the first 6 and last 4 characters are sent to the banking network and will be masked accordingly within the back office and any other reports, to comply with PCI regulations.|

```apib
    {
    "recipient": {
        "dateOfBirth": {
            "day": 29,
            "month": 1,
            "year": 2001
        },
        "zip": "CB24 9AD",
        "lastName": "Smith",
        "accountNumber": "ABC1234567890"
    }
    }
```

<a name="refundsobject" title="refunds Object"></a>
## refunds
|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br>`max=99999999999`            |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit. Therefore, a transaction of 10.139 Tunisian dinar would be processed as 10.14.|
|dupCheck           |boolean                                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|childAccountNum    |string<br/>`length<=10`                |This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2014-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>PENDING &ndash; Our system has received the request but it has not yet been batched.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li></ul>|
|error              |[error](#errorobject)                  |       |
|splitpay           |[splitpay](#splitpayobject)            |This enables you to use the Split Payouts functionality when processing a Refund.|
|riskReasonCode     |array                                  |An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) | This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|

```apib
{
    "merchantRefNum":"refund_id:1231",
    "amount":10098
}
```

<a name="returnlinksobject" title="returnLinks Object"></a>
## returnLinks

|Element    |Type           |Description|
|---        |---            |---|
|rel        |enum           |This is the link type that allows different endpoints to be targeted depending on the end state of the transaction. Possible values are:<ul><li>default - The default return URL that will be used if specific status return URL is not defined.</li><li>on_completed - Will be returned to this URL if the payment is completed.</li><li>on_failed - Will be returned to this URL if the payment fails.</li></ul>|
|href       |string         |This is the URI of the resource.|
|method     |string         |This is the HTTP method. |

```apib
{
    "returnLinks": [{
            "rel": "on_completed",
            "href": "https://US_commerce_site/payment/return/success",
            "method": "GET"
        },
        {
            "rel": "on_failed",
            "href": "https://US_commerce_site/payment/return/failed",
            "method": "GET"
        }
    ]
}
```

<a name="settlementsobject" title="settlements Object"></a>
## settlements
|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units.For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit. Therefore, a transaction of 10.139 Tunisian dinar would be processed as 10.14.|
|dupCheck           |boolean                                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|availableToRefund  |number<br/>`max=99999999999`           |This is the amount of this Settlement that is available to Refund, in minor units. For example, US $10.99 would be 1099.|
|childAccountNum    |string<br/>`length<=10`                |This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2014-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>PENDING &ndash; Our system has received the request but it has not yet been batched.</li><li>PROCESSING &ndash; The Settlement batch has started.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The transaction request has been cancelled.</li></ul>|
|error              |[error](#errorobject)                  |       |
|splitpay           |[splitpay](#splitpayobject)            |This enables you to use the Split Payouts functionality when settleing an Authorization.|
|riskReasonCode     |array                                  |An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) | This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|


```apib
{
    "merchantRefNum":"merchantRef_2019_04_11_05",
    "amount":100
}
```

<a name="splitpayobject" title="splitpay Object"></a>
## splitpay

|Element            |Type    |Required |Description |
|---                |---     |---      |---        |
|linkedAccount      |string  |Yes      |This is the ID of the linked account.
|amount             |number  |         |This is the amount to transfer to the linked account in minor currency units. The total amount to all linked accounts cannot exceed the transaction total. Either this or percent must be specified.|
|percent            |number  |         |This is the percentage of the total transaction amount to transfer to the linked account, to two decimal places. The total percentage to all linked accounts cannot exceed 100%. Either this or amount must be specified.|

```apib
  {
  "splitpay": [
    {
    "linkedAccount": "123124124",
    "percent": 5
    },
    {
    "linkedAccount": "767862873",
    "amount": 500
    }]
  }
```

<a name="standalonecreditsobject" title="standalonecredits Object"></a>
## standalonecredits

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|paymentHandleToken |string                                 |This is the payment token generated by Paysafe that will be used by merchants for Standalone Credit requests.|
|currencyCode       |string<br/>`length=3`                  |This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes)|
|card               |[card](#cardobject)                    |These are the details of the card used.|
|billingDetails     |[billingDetails](#billingdetailsobject)|These are the billing details for the request.|
|customerIp         |string<br/>`length<=39`                |This is the customer's IP address.|
|description        |string<br/>`length<=255`               |This is a description of the transaction, provided by the merchant.|

```apib
{
  "merchantRefNum":"merchant ABC-444",
  "amount":10098,
  "paymentHandleToken": "SC9mbfZSITB5OwDJ",
  "currencyCode": "GBP",
  "customerIp":"204.91.0.12",
  "description":"Winning payment from Loto"
}    
```

<a name="storedcredentialobject" title="storedCredential Object"></a>
## storedCredential

The *storedCredential* object is used to identify [authorization requests](#authrequest) that use stored credentials for a consumer, in order to improve authorization rates and reduce fraud. Stored credentials can be used in two cases: 
 - Using a payment token &ndash; An authorization request that uses a *paymentToken* from the [Customer Vault API](https://developer.paysafe.com/en/vault/api/)
 - Using a card number &ndash; An authorization request that uses a credit card number stored by the merchant 

**Notes:** 
 - If you use a *paymentToken* in the authorization request but do not include the *storedCredential* object, Paysafe will provide default information taken from Customer Vault data.
 - You cannot include both the *storedCredential* object and the *recurring* parameter in the same authorization request. Paysafe recommends using the *storedCredential* object.
 - The *cvv* parameter of the [card object](#cardobject) is required when the *occurrence* parameter is set to *INITIAL*. However, *cvv* is not required when the *occurrence* parameter is set to *SUBSEQUENT*.
 - The *storedCredential* object cannot be used for Apple Pay or Google Pay transactions.

|Element                 |Type                   |Description|
|---                     |---                    |---|
|type                    |enum                   |This specifies the type of request being made. Possible values are: <ul><li>ADHOC &ndash; Ad hoc consumer-initiated request</li><li>TOPUP &ndash; Unscheduled merchant-iniitated request when a consumer balance is below a set limit </li><li>RECURRING &ndash; Scheduled, merchant-initiated recurring request</li></ul><br/>**Note:** This value defaults to *ADHOC*.|
|occurrence              |enum                   |This specifies whether this stored credential request is initial or recurring. Possible values are: <ul><li>INITIAL &ndash; Used when this is the first time the consumer uses this credit card</li><li>SUBSEQUENT &ndash; Used when the consumer uses this credit card for subsquent requests </li></ul><br/>**Note:** This value defaults to *INITIAL*.|

```apib
{
    "storedCredential": {
        "type": "RECURRING",
        "occurrence": "SUBSEQUENT"
    }
}
```

<a name="voidauthsobject" title="Void Authorizations Object"></a>
## Void Authorizations

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2019-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>HELD &ndash; The transaction has been placed on hold due to risk considerations.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li><li>PENDING &ndash; The request is pending.</li></ul>|


# Group Payment Methods

## Look Up Available Payment Methods [/v1/paymentmethods]

### Look Up Payment Methods [GET /v1/paymentmethods?currencyCode={currencyCode}]
<a name="getpaymentmethods" title="Look Up Payment Methods"></a>


Click on **Look Up Payment Methods** above to see how to look up the payment methods that are enabled for each of your merchant accounts, by currency.

+ Parameters

    + `currencyCode`:`USD`

+ Request Look Up Payment Methods (application/json)
    
    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
+ Response 200 (application/json)

    + Body

            {
                "paymentMethods": [{
                        "paymentMethod": "CARD",
                        "currency": "USD",
                        "accountId": 1009355920
                    },
                    {
                        "paymentMethod": "SKRILL",
                        "currency": "USD",
                        "accountId": 1009355921
                    },
                    {
                        "paymentMethod": "NETELLER",
                        "currency": "USD",
                        "accountId": 1009355923
                    }
                ]
            }
            

# Group Payment Handles

## Payment Handle [/v1/paymenthandles]

A Payment Handle is basically a token that represents a payment method that you set up for a customer. Once the Payment Handle is created, you then include the *paymentHandleToken* returned in the Payment Handle request response in a new [payment request](#paymentrequest).  
<br>
> **Note:** A Payment Handle can be used in a [Payment request](#paymentrequest) only if it has the status of **PAYABLE**. 

### Create Payment Handle [POST]
<a name="paymenthandlerequest" title="Create Payment Handle"></a>

Click on **Create Payment Handle** above to see four examples of how to create a Payment Handle object:

* A Payment Handle for a standard credit card authorization
* A Payment Handle for a credit card that is registered for 3D Secure - the response for this request will contain a redirect to present to the customer so they can validate their 3D Secure credentials
* A Payment Handle for a credit card Standalone Credit
* A Payment Handle for a credit card Verification


+ Attributes 
    + Include PaymentHandleRequest

+ Request Create Payment Handle for Card without 3D Secure Enabled (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
                "merchantRefNum": "merchantRefNum-101",
                "transactionType": "PAYMENT",
                "card": {
                    "cardNum": "5191330000004415",
                    "cardExpiry": {
                        "month": 10,
                        "year": 2020
                    },
                    "cvv": "111",
                    "holderName": "poorna"
                },
                "paymentType": "CARD",
                "amount": 190,
                "currencyCode": "GBP",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "26359efd-7cfb-4014-a13d-1724e3ff17fa",
              "amount": 190,
              "merchantRefNum": "merchantRefNum-101",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCO3wKcIyLoQbQvw",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ],
              "timeToLiveSeconds": 899,
              "transactionType": "PAYMENT"
            }

+ Request Create Payment Handle for Card with 3D Secure Enabled (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-124",
                "transactionType": "PAYMENT",
                "card": {
                    "cardNum": "4538261230000003",
                    "cardExpiry": {
                        "month": 10,
                        "year": 2020
                    },
                    "cvv": "111",
                    "holderName": "poorna"
                },
                "paymentType": "CARD",
                "amount": 3000,
                "currencyCode": "GBP",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "372b5ee7-6360-4403-b444-164f8f1d2709",
                "amount": 3000,
                "merchantRefNum": "merchantRefNum-124",
                "action": "REDIRECT",
                "currencyCode": "GBP",
                "usage": "SINGLE_USE",
                "status": "INITIATED",
                "paymentType": "CARD",
                "executionMode": "SYNCHRONOUS",
                "customerIp": "172.0.0.1",
                "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "country": "CA",
                    "zip": "M5H 2N2"
                },
                "card": {
                    "cardExpiry": {
                        "month": "10",
                        "year": "2020"
                    },
                    "holderName": "poorna",
                    "cardType": "VI",
                    "cardBin": "453826",
                    "lastDigits": "0003"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ],
                "links": [{
                    "rel": "redirect_payment",
                    "href": "http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709",
                    "method": "GET"
                }],
                "timeToLiveSeconds": 899,
                "transactionType": "PAYMENT"
            }

+ Request Create Payment Handle for Card for Standalone Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-190",
              "transactionType": "STANDALONE_CREDIT",
              "card": {
                "cardNum": "4538261230000003",
                "cardExpiry": {
                  "month": 10,
                  "year": 2020
                },
                "cvv": "111",
                "holderName": "poorna"
              },
              "paymentType": "CARD",
              "amount": 3000,
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "372b5ee7-6360-4403-b444-164f8f1d2709",
              "amount": 3000,
              "merchantRefNum": "merchantRefNum-190",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "VI",
                "cardBin": "453826",
                "lastDigits": "0003"
              },
              "timeToLiveSeconds": 899,
              "transactionType": "STANDALONE_CREDIT"
            }
            
+ Request Create Payment Handle for Card for Verification (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-196",
              "transactionType": "VERIFICATION",
              "card": {
                "cardNum": "4107857757053670",
                "cardExpiry": {
                  "month": 12,
                  "year": 2034
                },
                "cvv": "222"
              },
              "paymentType": "CARD",
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "16113177-3d68-4c91-8f69-ce41903f1446",
              "merchantRefNum": "merchantRefNum-196",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "timeToLiveSeconds": 899,
              "transactionType": "VERIFICATION",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCfZX0QEvEvSszKy",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "cardType": "VI",
                "cardBin": "410785",
                "lastDigits": "3670"
              }
            }

### Get Payment Handle [GET /v1/paymenthandles/{paymenthandle_id}]
<a name="getpaymenthandle" title="Look Up a Payment Handle"></a>

Click on **Get Payment Handle** above to see how to look up a Payment Handle using the ID returned in the response to the original request.

+ Parameters

    + paymenthandle_id : `26359efd-7cfb-4014-a13d-1724e3ff17fa` - This is the Payment Handle ID returned in the response to the Payment Handle creation request.

+ Request Look Up Payment Handle (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "26359efd-7cfb-4014-a13d-1724e3ff17fa",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-115",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "EXPIRED",
              "timeToLiveSeconds": 0,
              "transactionType": "PAYMENT",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SC0YsGIIgFksiOsQ",
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

### Get Payment Handle Using Merchant Reference Number [GET /v1/paymenthandles?merchantRefNum={merchant_ref_num}]
<a name="getpaymenthandlemerchantrefnum" title="Look Up a Payment Handle Using a Merchant Reference Number"></a>

Click on **Get Payment Handle Using Merchant Reference Number** above to see how to look up a Payment Handle using the merchant reference number used in the original request.

+ Parameter

    + merchant_ref_num : `13995817730005389` - This is the *merchantRefNum* used in the original Payment Handle creation request.

+ Request Look Up Payment Handle Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "cc719995-59ed-4146-a936-b54db72bcaa8",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-130",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "EXPIRED",
              "timeToLiveSeconds": 0,
              "transactionType": "PAYMENT",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SC0YsGIIgFksiOsQ",
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

# Group Verifications 

Verification allows merchants to validate a credit card without charging any amount on the card. 

## Verification [/v1/verifications]

### Verification [POST]
<a name="verificationrequest" title="Verify a Credit Card"></a>

Click on **Verification** above to see how to submit a Verification request using Payment Handle Token.

+ Attributes (VerificationResponse)

+ Request Verify a Credit Card (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

    + Body

            {
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "dupCheck": false,
              "description": "Verify card for payment request"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "currencyCode": "USD",
              "description": "Verify card for payment request",
              "txnTime": 2018-12-11T16:33:49Z,
              "gatewayResponse" : {
              "authCode": "XXXXXX",
              "avsResponse" : "MATCH",
              "cvvVerification": "NOT_PROCESSED"
              },
              "status": "COMPLETED"
            }

### Get Verification [GET /v1/verifications/{verification_id}]
<a name="getverification" title="Look Up a Verification"></a>

Click on **Get Verification** above to see how to look up a Verification request using the ID returned in the response to the original request.

+ Parameter

   + verification_id : `0c62a67c-e12e-4876-aa1a-20f9ec1f0352` - This is the ID returned in the response to the Verification request.


+ Response 200 (application/json)

    + Body

            {
              "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "currencyCode": "USD",
              "description": "Verify card for payment request",
              "txnTime": 2018-12-11T16:33:49Z,
              "gatewayResponse" : {
              "authCode": "XXXXXX",
              "avsResponse" : "MATCH",
              "cvvVerification": "NOT_PROCESSED"
              },
              "status": "COMPLETED"
            }
            
### Get Verification Using Merchant Reference Number [GET /v1/verifications?merchantRefNum={merchant_ref_num}]
<a name="getverificationmerchantrefnum" title="Look Up a Verification Using a Merchant Reference Number"></a>

Click on **Get Verification Using Merchant Reference Number** above to see how to look up a Verification request using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : 20095817730019123 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Response 200 (application/json)
  
   + Body

            {
              "verifications": [
                {
              "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "currencyCode": "USD",
              "description": "Verify card for payment request",
              "txnTime": 2018-12-11T16:33:49Z,
              "gatewayResponse" : {
              "authCode": "XXXXXX",
              "avsResponse" : "MATCH",
              "cvvVerification": "NOT_PROCESSED"
              },
              "status": "COMPLETED"
            }
              ]
            }

# Group Payments

## Payments [/v1/payments]

Payment requests allow you to process a payment using the *paymentHandleToken* that you have [previously created for the payment instrument you want to use](#paymenthandlerequest). The examples below include a *paymentHandleToken* created for a credit card.

### Process Payment [POST]
<a name="paymentrequest" title="Post Payment Using Payment Handle Token"></a>

Click on **Process Payment** above to see two examples of how to create a Payment request using a Payment Handle token:

* A Payment request that will have to be settled later
* A Payment request that authorizes and settles the Payment in a single request by setting the *settleWithAuth* parameter to *true*


+ Attributes 
    + Include PaymentsRequest

+ Request Process a Card Payment Using a Payment Handle Token (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-108",
              "amount": 1900,
              "currencyCode": "GBP",
              "dupCheck": true,
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "customerIp": "10.10.12.64",
              "description": "Magazine subscription"
            }
            
+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-14T15:12:18Z", 
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 1900,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              }
            }

+ Request Process a Card Payment Including Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-108",
              "amount": 1900,
              "currencyCode": "GBP",
              "dupCheck": true,
              "settleWithAuth": true,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "customerIp": "10.10.12.64",
              "description": "Magazine subscription"
            }
            
+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": true,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-14T15:12:18Z",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 0,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              }
            }

### Get Payments [GET /v1/payments/{payment_id}]
<a name="getpayment" title="Look Up a Payment"></a>

Click on **Get Payments** above to see how to look up a Payment using the ID returned in the response to the original request.

+ Parameter

   + payment_id : `3aeb9c63-6386-46a3-9f8e-f452e722228a` - This is the ID returned in the response to the Payments request.

+ Request Look Up Payment (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-14T15:12:18Z",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 1900,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              }
            }
            
### Get Payments Using Merchant Reference number [GET /v1/payments?merchantRefNum={merchant_ref_num}]
<a name="getpaymentmerchantrefnum" title="Look Up a Payment Using a Merchant Reference Number"></a>

Click on **Get Payment Using Merchant Reference Number** above to see how to look up a Payment using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-145` -This is the merchant reference number created by the merchant and submitted as part of the Payments request.

+ Request Look Up Payment Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "payments": [
                {
                  "id": "8190c675-6d68-4cd7-a29c-55b406addaeb",
                  "amount": 1900,
                  "merchantRefNum": "merchantRefNum-145",
                  "settleWithAuth": false,
                  "paymentHandleToken": "SChfCGCURe5NiLIv",
                  "authCode": "107212",
                  "txnTime": 2018-12-14T15:12:18Z,
                  "customerIp": "10.10.12.64",
                  "description": "Magazine subscription",
                  "currencyCode": "GBP",
                  "status": "COMPLETED",
                  "avsResponse": "MATCH",
                  "cvvVerification": "MATCH",
                  "availableToSettle": 40
                }
              ]
            }
            
# Group Void Authorizations 

A Void Authorization request allows you to void (or cancel) an authorization request, provided the authorization has not yet been settled. An authorization is part of a [payment request](#paymentrequest). If *settleWithAuth* is set to *true* in the payment request, then 
the authorization and settlement are completed in the same request, in which case you would not be able to process a Void Authorization.

## Void Authorizations [/v1/voidauths]

### Void Authorization [POST /v1/payments/{payment_id}/voidauths]
<a name="voidauthrequest" title="Void Authorization"></a>

Click on **Void Authorization** above to see how to submit a Void Authorization request. You can void an Authorization **only if** it has not yet been settled.

+ Parameter

    + payment_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Payment request.
    
+ Attributes (voidAuthResponse)

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "amount": 900,
              "merchantRefNum": "13915817720025003"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "50175d73-be3d-4594-b570-9095a17121de",
              "merchantRefNum": "13915817720025003",
              "amount": 900,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "COMPLETED"
            }

### Get Void Authorization [GET /v1/voidauths/{void_auth_id}]
<a name="getvoidauth" title="Look Up a Void Authorization"></a>

Click on **Get Void Authorization** above to see how to look up a Void Authorization using the ID returned in the response to the original request.

+ Parameter

   + void_auth_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Void Authorization request.


+ Request Look Up Void Authorization (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "65bb2b2e-be2f-4ae8-9a2a-f24239309c7d",
              "merchantRefNum": "1391581772002515624",
              "amount": 900,
              "txnTime": "2018-12-10T11:17:23Z",
              "status": "COMPLETED"
            }
            
### Get Void Authorization Using Merchant Reference Number [GET /v1/voidauths?merchantRefNum={merchant_ref_num}]
<a name="getvoidauthmerchantrefnum" title="Look Up a Void Authorization Using a Merchant Reference Number"></a>

Click on **Get Void Authorization Using Merchant Reference Number** above to see how to look up a Void Authorization using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : 1391581772002515624 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Request Look Up Void Authorization Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)
  
   + Body

            {
              "voidAuths": [
                {
                  "id": "65bb2b2e-be2f-4ae8-9a2a-f24239309c7d",
                  "merchantRefNum": "1391581772002515624",
                  "amount": 900,
                  "txnTime": "2018-12-10T11:17:23Z",
                  "status": "COMPLETED"
                }
              ]
            }



# Group Settlements 

## Settlements [/v1/payments/{payment_id}/settlements]

A Settlement request allows you to settle a previous authorization that was not settled in the original Purchase request (i.e., where *settleWithAuth* was set to *false*). 

+ Parameter

    + payment_id : `c64ecbf2-a942-4f7c-b412-70217a0eb16e` - This is the ID returned in the response to the Payments request.

### Process Settlement [POST]
<a name="settlementrequest" title="Process Settlement"></a>

Click on **Process Settlement** above to see two examples of how to process a Settlement request:

* A regular Settlement, where the initial request was an Authorization that now has to be settled
* A Settlement that is split into multiple merchant accounts, for merchant accounts that are configured to do so

+ Attributes
    + Include Settlements

+ Request Process a Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-117",
              "dupCheck":true,
              "amount": 190
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "merchantRefNum": "merchantRefNum-117",
              "dupCheck":true,
              "amount": 190,
              "id": "a07b0597-f106-4790-9661-f0d452619f5d",
              "availableToRefund": 190,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "PENDING"
            }
            
+ Request Process a Settlement with Split Payouts (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

    + Body

            {
                "merchantRefNum": "merchantRef_2016_04_11_05",
                "dupCheck": true,
                "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "d1fb46ee-2736-4ef5-a724-f263ace75373",
                "merchantRefNum": "merchantRef_2016_04_11_05",
                "amount": 5500,
                "availableToRefund": 5500,
                "dupCheck": true,
                "txnTime": "2017-02-14T15:12:18Z",
                "status": "COMPLETED",
                "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }

### Cancel Settlement [PUT /v1/settlements/{settlement_id}]
<a name="cancelsettlement" title="Cancel a Settlement"></a>

Click on **Cancel Settlement** above to see how to cancel a Settlement. You must include the *status* parameter set to *CANCELLED*.

+ Parameter

    + settlement_id : `d9bcfd85-8aa6-469d-80a3-e2ca196544da` - This is the ID returned in the response to the Settlement request. 

+ Request Cancel a Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "CANCELLED"
            }
            

### Get Settlements [GET /v1/settlements/{settlement_id}]
<a name="getsettlement" title="Look Up a Settlement"></a>

Click on **Get Settlements** above to see how to look up a Settlement using the ID returned in the response to the original request.

+ Parameter

   + settlement_id : `ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85` - This is the ID returned in the response to the Settlement request.

+ Request Look Up Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "merchantRefNum": "merchantRefNum-144",
              "amount": 40,
              "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
              "availableToRefund": 40,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "PENDING"
            }
            
### Get Settlements Using Merchant Reference Number [GET /v1/settlements?merchantRefNum={merchant_ref_num}]
<a name="getsettlementmerchantrefnum" title="Look Up a Settlement Using a Merchant Reference Number"></a>

Click on **Get Settlements Using Merchant Reference Number** above to see how to look up a Settlement using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-144` -This is the merchant reference number created by the merchant and submitted as part of the request.

+ Request Look Up Settlement Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "settlements": [
                {
                  "merchantRefNum": "merchantRefNum-144",
                  "amount": 40,
                  "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
                  "availableToRefund": 40,
                  "txnTime": "2018-12-11T16:33:49Z",
                  "status": "PENDING"
                }
              ]
            }

# Group Refunds

## Refunds [/v1/settlements/{settlement_id}/refunds]

+ Parameter

    + settlement_id : `d9bcfd85-8aa6-469d-80a3-e2ca196544da` - This is the ID returned in the response to the Settlement request or to the Payment request where the authorization was settled in the same request.

### Process Refund [POST]
<a name="refundrequest" title="Process Refund"></a>

Click on **Process Refund** above to see two examples of how to process a Refund request:

* A regular Refund
* A Refund that is split into multiple merchant accounts, for merchant accounts that are configured to do so

+ Attributes
    + Include Refunds

+ Request Process a Refund (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "dupCheck": true
            }
                        
+ Response 200 (application/json)

    + Body

            {
                "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                "merchantRefNum": "merchantRefNum-118",
                "amount": 190,
                "txnTime": "2018-12-11T16:33:49Z",
                "status": "PENDING"
            }
            
+ Request Process a Refund with Split Payouts (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "dupCheck": true,
              "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }
                        
+ Response 200 (application/json)

    + Body

            {
                "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                "merchantRefNum": "merchantRefNum-118",
                "amount": 190,
                "txnTime": "2018-12-11T16:33:49Z",
                "status": "PENDING",
                "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }

### Cancel Refund [PUT /v1/refunds/{refund_id}]
<a name="cancelrefund" title="Cancel a Refund"></a>

Click on **Cancel Refund** above to see how to cancel a Refund. You must include the *status* parameter set to *CANCELLED*.

+ Parameter

    + refund_id : `c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725` - This is the ID returned in the response to the Refund request
    
+ Request Cancel a Refund (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "txnTime": "2018-12-10T11:19:51Z",
              "status": "CANCELLED"
            }
            
### Get Refund [GET /v1/refunds/{refund_id}]
<a name="getrefund" title="Look Up a Refund"></a>

Click on **Get Refund** above to see how to look up a Refund using the ID returned in the response to the original request.

+ Parameter

    + refund_id : `c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725` - This is the ID returned in the response to the Refund request

+ Request Look Up Refund (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "PENDING"
            }
            
### Get Refunds Using Merchant Reference Number [GET /v1/refunds?merchantRefNum={merchant_ref_num}]
<a name="getrefundmerchantrefnum" title="Look Up a Refund Using a Merchant Reference Number"></a>

Click on **Get Refunds Using Merchant Reference Number** above to see how to look up a Refund using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-118` -This is the merchant reference number created by the merchant and submitted as part of the request.

+ Request Look Up Refund Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "refunds": [
                {
                  "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                  "merchantRefNum": "merchantRefNum-118",
                  "amount": 190,
                  "txnTime": "2018-12-11T16:33:49Z",
                  "status": "PENDING"
                }
              ]
            }
         
# Group Standalone Credits 

## Standalone Credits [/v1/standalonecredits]

A Standalone Credit request allows you to issue credits to cardholders without requiring a previous *settlement_id*.

**Note:** If your merchant category code (MCC) is listed as able to [process Original Credits](#originalcreditrequest), you must not use Standalone Credits.


### Process Standalone Credit [POST]
<a name="standalonecreditrequest" title="Process Standalone Credit"></a>

Click on **Process Standalone Credit** above to see how to process a Standalone Credit request. 

+ Attributes (OriginalCreditResponse)

+ Request Process a Standalone Credit Using a Payment Handle Token (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "currencyCode": "GBP",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Pay surplus"
            }    
            
+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Pay surplus"
            }
            
### Cancel Standalone Credit [PUT /v1/standalonecredits/{standalone_credit_id}]
<a name="cancelstandalonecredit" title="Cancel a Standalone Credit"></a>

Click on **Cancel Standalone Credit** above to see how to cancel a Standalone Credit. You must include the *status* parameter set to *CANCELLED*.

+ Parameter

    + standalone_credit_id : `e075f2ae-dfc4-4f6d-8d89-61158367b6a6`
    

+ Request Cancel a Standalone Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }


+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "status": "CANCELLED"
            }
            

### Get Standalone Credit [GET /v1/standalonecredits/{standalone_credit_id}]
<a name="getstandalonecredit" title="Look Up a Standalone Credit"></a>

Click on **Get Standalone Credit** above to see how to look up a Standalone Credit using the ID returned in the response to the original request.

+ Parameter

    + standalone_credit_id : `e075f2ae-dfc4-4f6d-8d89-61158367b6a6`

+ Request Look Up Standalone Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Pay surplus"
            }
            
### Get Standalone Credit Using Merchant Reference Number  [GET /v1/standalonecredits?merchantRefNum={merchant_ref_num}]
<a name="getstandalonecreditmerchantrefnum" title="Look Up a Standalone Credit Using a Merchant Reference Number"></a>

Click on **Get Standalone Credit Using Merchant Reference Number** above to see how to look up a Standalone Credit using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : "merchantRefNum-151"

+ Request Look Up Standalone Credit Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
                "standaloneCredits": [{
                    "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
                    "amount": 40,
                    "merchantRefNum": "merchantRefNum-151",
                    "paymentHandleToken": "SC9mbfZSITB5OwDJ",
                    "customerIp": "204.91.0.12",
                    "currencyCode": "GBP",
                    "status": "PENDING",
                    "description": "Pay surplus"
                }]
            }
            

# Group Original Credits 

## Original Credits [/v1/originalcredits]

An Original Credit request allows you to issue credits to cardholders without requiring a previous *settlement_id*.

Only merchants with the following MCCs can process Original Credits:
 * 4829
 * 6012
 * 6051
 * 6211
 * 6540
 * 7299
 * 7994
 * 7995
 * 8999

### Process Original Credit [POST]
<a name="originalcreditrequest" title="Process Original Credit"></a>

Click on **Process Original Credit** above to see how to process an Original Credit request. 

+ Attributes (OriginalCreditResponse)

+ Request Process an Original Credit Using a Payment Handle Token (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "currencyCode": "GBP",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Winning payment from Loto 649"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "txnTime": "2018-12-11T16:33:49Z",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }

### Cancel Original Credit [PUT /v1/originalcredits/{original_credit_id}]
<a name="canceloriginalcredit" title="Cancel an Original Credit"></a>

Click on **Cancel Original Credit** above to see how to cancel an Original Credit. You must include the *status* parameter set to *CANCELLED*.

+ Parameter

   + original_credit_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Original Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.

+ Request Cancel an Original Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }


+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "status": "CANCELLED"
            }
            

### Get Original Credit [GET /v1/originalcredits/{original_credit_id}]
<a name="getoriginalcredit" title="Look Up an Original Credit"></a>

Click on **Get Original Credit** above to see how to look up an Original Credit using the ID returned in the response to the original request.

+ Parameter

   + original_credit_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Original Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.


+ Request Look Up Original Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "txnTime": "2018-12-11T16:33:49Z",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }
            
### Get Original Credit Using Merchant Reference Number [GET /v1/originalcredits?merchantRefNum={merchant_ref_num}]
<a name="getoriginalcreditmerchantrefnum" title="Look Up an Original Credit Using a Merchant Reference Number"></a>

Click on **Get Original Credit Using Merchant Reference Number** above to see how to look up an Original Credit using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : merchantRefNum-151 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Request Look Up Original Credit Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)
  
   + Body

            {
                "originalCredits": [{
                    "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
                    "amount": 40,
                    "merchantRefNum": "merchantRefNum-151",
                    "txnTime": "2018-12-11T16:33:49Z",
                    "paymentHandleToken": "SC9mbfZSITB5OwDJ",
                    "customerIp": "204.91.0.12",
                    "currencyCode": "GBP",
                    "status": "PENDING",
                    "description": "Winning payment from Loto 649"
                }]
            }
            

# Group Customer Profiles

## Customer Profiles [/v1/customers]

### Create Customer Profile [POST]

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
                "firstName": "John",
                "lastName": "Smith",
                "phone" : "123-456-7890",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 10,
                    "day": 24
                },
                "address": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 200",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA",
                    "state": "ON"
                },
                "email": "john.smith@email.com"
            }

+ Response 200 (application/json)

    + Body

            {
                "customerId": "Gt56fR6",
                "firstName": "John",
                "lastName": "Smith",
                "phone" : "123-456-7890",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 10,
                    "day": 24
                },
                "address": {
                    "addressId": "DF45FDtrR",
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 200",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA",
                    "state": "ON"
                },
                "email": "john.smith@email.com"
            }

# Group Single-Use Tokens

## Single-Use Tokens [/v1/singleusecustomertokens]

### Create Single-Use Tokens [POST]

The API allows creation of single use token needed for cases where saved Payment Handles for a customer needs to be displayed in UI.

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
               "customerId" : "e979132e-a1f7-454b-a764-2aada299b3be",
               "paymentTypes" : [ "CARD", "ACH"]
            }


+ Response 200 (application/json)

    + Body

            {
             "id" : "86dcb68d-cbd0-4878-8da7-ffc0e6554513",     
             "customerId" : "e979132e-a1f7-454b-a764-2aada299b3be",
             "paymentTypes" : [ "CARD", "ACH"],
             "timeToLiveSeconds" : "899",
             "status" : "ACTIVE",
             "merchantCustomerId" : "mycustomer1",
             "locale" : "en_US",
             "firstName" : "John",
             "lastName" : "Smith",
             "email" : "john.smith@somedomain.com",
             "phone" : "713-444-5555",
             "addresses": [
                {
                  "id": "6a275b7c-6f11-4ed1-ae77-21071724574a",
                  "status": "ACTIVE",
                  "nickName": "Home",
                  "street": "100 Queen",
                  "street2": "Unit 201",
                  "city": "Toronto",
                  "zip": "M5H 2N2",
                  "country": "CA",
                  "state": "ON",
                  "recipientName": "Jane Smith",
                  "phone": "647-788-3901"
                }
              ],
             "paymentHandles" : [
              {
                "id" : "52c54707-a536-4c3d-b2e9-ebdba8c1bd3e",
                "timeToLiveSeconds" : "899",
                "usage": "LOOKUP",
                "paymentType": "CARD",
                "paymentHandleToken" : "hdhfsafhdfsahg",
                "card": {
                    "lastDigits": "1111",
                    "cardExpiry": {
                        "month" : "12",
                        "year" : "2020"
                    },
                    "holderName": "TEST CUSTOMER",
                    "cardBin": "453091",
                    "cardType": "VI"
                },
                "billingAddressId": "6a275b7c-6f11-4ed1-ae77-21071724574a"
             }]
            }

### Get Saved Payment Handles using single use Token Id [GET /v1/singleusecustomertokens/{id}]

The operation allows look up of saved Payment Handles using a single use token. The Payment Handles are created with usage set to LOOKUP in a PENDING state.
The Payment Handles returned can be converted into a single Use Payment Handle when a user clicks on the pay button and the flow continues as with a non-saved flow.

Note: This API will be accessible with public API key. 

+ Parameter

   + id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` 


+ Response 200 (application/json)

    + Body
            
            {
             "id" : "86dcb68d-cbd0-4878-8da7-ffc0e6554513",     
             "customerId" : "e979132e-a1f7-454b-a764-2aada299b3be",
             "paymentTypes" : [ "CARD", "ACH"],
             "timeToLiveSeconds" : "899",
             "status" : "ACTIVE",
             "merchantCustomerId" : "mycustomer1",
             "locale" : "en_US",
             "firstName" : "John",
             "lastName" : "Smith",
             "email" : "john.smith@somedomain.com",
             "phone" : "713-444-5555",
             "addresses": [
                {
                  "id": "6a275b7c-6f11-4ed1-ae77-21071724574a",
                  "status": "ACTIVE",
                  "nickName": "Home",
                  "street": "100 Queen",
                  "street2": "Unit 201",
                  "city": "Toronto",
                  "zip": "M5H 2N2",
                  "country": "CA",
                  "state": "ON",
                  "recipientName": "Jane Smith",
                  "phone": "647-788-3901"
                }
              ],
             "paymentHandles" : [
              {
                "id" : "52c54707-a536-4c3d-b2e9-ebdba8c1bd3e",
                "timeToLiveSeconds" : "899",
                "usage": "LOOKUP",
                "paymentType": "CARD",
                "paymentHandleToken" : "hdhfsafhdfsahg",
                "card": {
                    "lastDigits": "1111",
                    "cardExpiry": {
                        "month" : "12",
                        "year" : "2020"
                    },
                    "cardBin": "453091",
                    "cardType": "VI",
                    "holderName": "TEST CUSTOMER"
                },
                "billingAddressId": "6a275b7c-6f11-4ed1-ae77-21071724574a"
             }]
            }

# Data Structures

## accordD
+ accordD (object)
    + Properties
        + `financingType`:`DEFERRED_PAYMENT` (enum) - This is the type of financing offered.
            + Members
                + DEFERRED_PAYMENT - Deferred payment financing
                + EQUAL_PAYMENT - Equal payment financing
        + `plan`:`124` (string) - This is the plan number for this financing transaction.
            _length<=3_
        + `gracePeriod`:`12` (number) - This is the grace period, in months, associated with deferred payment transactions.
            _max=99_
        + `term`:`12` (number) - This is the number of payments, in months, for equal payment transactions.
            _max=99_

## `Acquirer Data`

+ `acquirerData` (object) - This is additional information about your card acquirer, required **only when** you are using Credorax (CRX) as your acquirer. Contact your account manager for more information.

    _Read Only_
    
    + Properties
    - `authId`:`f06bccd6-de90-4b73-b10f-30266763bc60` (string) - This is the ID returned in the response to a previous successful Authorization or Settlement request.
        _length<=36_
    - `code`:`CRX` (enum) - This is the code for your card acquirer.
        _length<=10_
    - `externalSubMerchantId`:`ID123` (string) - This is the external merchant ID of the acquirer data.

## Authentications Object
+ authentication (object) - These are the 3D Secure authentication details.
    + `id`:`5d4db3bc-34c9-417f-a051-0d992ad9284e` (string) - This is the ID of authentication, returned in the response.
        _Read Only, length<=36_
    + `eci`:`5` (number) - This is the [e-commerce indicator](#authenticationobject).
    + `cavv`:`AAABBhkXYgAAAAACBxdiENhf7A+=` (string) - This is the Cardholder Authentication Verification Value, indicating that the transaction has been authenticated.
        _length<=80_
    + `xid`:`aWg4N1ZZOE53TkFrazJuMmkyRDA=` (string) - This is the transaction identifier returned by the card issuer.
        _length<=40_
    + `status`:`COMPLETED` (enum) -This is the status of authentication request.
        _Read Only_
        + Members
            + COMPLETED
            + FAILED
    + `merchantRefNum`:`merchantABC-123-authentications` (string) - This is the merchant reference number for the authentication request.
        _length<=255_
    + `threeDEnrollment`:`Y` (enum) - This indicates whether or not the cardholder is enrolled in 3D Secure.
        + Members
            + Y - Cardholder authentication available
            + N - Cardholder not enrolled in authentication
            + U - Cardholder authentication unavailable
    + `threeDResult`:`Y` (enum) - This indicates the outcome of the Authentication.
        + Members
            + Y - The cardholder successfully authenticated with their card issuer.
            + A - The cardholder authentication was attempted.
            + N - The cardholder failed to successfully authenticate with their card issuer.
            + U - Authentication with the card issuer was unavailable.
            + E - An error occurred during authentication.
    + `signatureStatus`:`Y` (enum) - This is the 3D Secure signature verification result value.
        + Members
            + Y - All transaction and signature checks satisfied.
            + N - At least one transaction or signature check failed.
    + Include Authentication Errors

## Authentication Errors
+ error (object) -This is the error details of authentication.
    + `code`:`5016` (string) - This is the error code.
    + `message`:`Account not found.` (string) - This is the description of the error.
    + `fieldErrors` (array) - This is a list of fields that have issues.
        + `field`:`amount` (string) - Field name.
        + `error`:`Contain invalid characters` (string)  - Error associated with the field name.

## Billing Details
+ billingDetails (object) - These are the billing details for the request.
    + street:`100 Queen` (string)  - This is the first line of the street address in the billing address.
        _length<=50_
    + street2:`Unit 201` (string) - This is the second line of the street address in the billing address, if required (e.g., apartment number).
        _length<=50_
    + city:`Toronto` (string) - This is the city in the billing address.
        _length<=40_
    + zip:`MSH 2N2` (string) - This is the postal/zip code in the billing address.
        _length<=10_
    + country:`CA` (string) - This is the country where the address is located. See [Country Codes](#countrycodes).
        _length=2_
    + state:`ON` (string) - This is the state or province of the billing address. For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions.
        _length<=40_
    + phone:`444-9999` (string) - This is the customer's telephone number.
        _length<=40_
    + `nickName`:`Home` (string) - This is the nickname the merchant has for the billing address.
        _length<=50_

## `Card`

+ One of

    + card (object, required) - This is the payment token that represents the [card](#cardobject) used for the request. Only one **card** object can be included in the request.

        + Properties

            + paymentToken:`LTEyMzYzMjQ3ODg` (string, required) - This is the payment token representing the card.
                _length<=80_
            + cvv:`123` (string, optional) - This is the 3- or 4-digit security code that appears on the card following the card number.
                _length=3-4_

    + card (object, required) - These are the details of the [card](#cardobject) used for the request. Only one **card** object can be included in the request.

        + Properties

            + cardNum:`4111111111111111` (string, required) - This is the card number used for the request.
                _length=8-20_
                
            + cardExpiry (object, required) - This is the card's [expiry date](#cardexpiryobject).
                + month:12 (number, required) - This is the card expiry month.
                    _length=2_
                + year:2020 (number, required) - This is the card expiry year.
                    _length=4_
            + cvv:`123` (string) - This is the 3- or 4-digit security code that appears on the card following the card number.
                _length=3-4_
            + `merchantDescriptor` (object) - This is the merchant descriptor that will be displayed on the customer's card statement.
                + `dynamicDescriptor`:`OnlineStore` (string) - This is a merchant descriptor that will be displayed on a customer’s statement.
                    _length<=20_
                + `phone`:`999-8888` (string) - This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s statement.
                    _length<=13_
            + holdername:`Jane Smith` (string) - This is the name of the card holder.
                _Read Only_
            + type (enum) - This is type of card used for the request.
                _Read Only_
                - AM – American Express
                - DI – Discover
                - JC – JCB
                - MC – Mastercard
                - MD – Maestro
                - SO – Solo
                - VI – Visa
                - VD – Visa Debit
                - VE – Visa Electron
            + lastDigits:`1111` (string) - These are the last four digits of the card used for the request.
                _Read Only, length=4_
            + nickName:`Jane's Card` (string) - This is the nickname the merchant has for the card holder.
                _length<=50_
            + cardBin:`411111` (string) - This is the card BIN (typically the first 6 digits).
                _Read Only, length=6_

## Date of Birth
+ `dateOfBirth` (object, required) - This is the customer's date of birth. 

    + Properties
        + `day`:`29` (number, required) - This is the day of birth.
            _length=2_
        + `month`:`12` (number, required) - This is the month of birth.
            _length=2_
        + `year`:`2020` (number, required) - This is the year of birth.
            _length=4_

## Error Attributes
+ `error` (object) 
    _Read Only_
    + Properties
        + `code`:`1001` (string) - This is the error code.
        + `message`:`An internal error occurred.` (string) - This is the description of the error.
        + `riskReasonCode`:`text` (string) - If applicable, this is the corresponding system reason code.
        + `details` (array) - If applicable, this is a collection of detailed descriptions.
        + `fieldErrors` (array) - If applicable, this is a list of fields that have issues.
            + `field`:`street` (string) - This is the field name. 
            + `error`:`Unexpected characters` (string) This is the error associated with the field name.
        + `links` (array) - If applicable, this is a list of links to the related resource.
            + `rel` (string) - This is the description or relation of the link, e.g., default, self, first, prev, next, last.
            + `href` (string) - This is the actual URL of the link.

## Gateway Response
+ `gatewayResponse` (object) - This is the raw response returned by an acquirer. It is returned only if your account is configured accordingly.
    _Read Only_

    + Properties
        + code (string) - This is acquirer identification code, such as DJN, CRX, etc.
            _Read Only_
        + responseCode (string) - This is the raw response returned by the acquirer.
            _Read Only_
        + avsCode (string) - This is the raw AVS code returned by the acquirer.
            _Read Only_
        + balanceResponse (string) - This is the balance remaining on a gift card, if a gift card was used for the original transaction.
            _Read Only_
        + mid (string) - This is the acquirer MID that was sent to the clearing house.
            _Read Only_
        + terminalId (string) - This is the merchant's terminal ID.
            _Read Only_
        + batchNumber (string) - This is the batch number.
            _Read Only_
        + seqNumber (string) - This is the merchant's sequence number.
            _Read Only_
        + effectiveDate (string) - This is the date of the bank deposit associated with the transaction.
            _Read Only_
        + financingType (string) - This is the type of financing offered.
            _Read Only_
        + plan (string) - This is the plan number for this financing transaction.
            _Read Only_
        + gracePeriod (string) - This is the grace period, in months, associated with deferred payment transactions.
            _Read Only_
        + term (string) - This is the number of payments, in months, for equal payment transactions.
            _Read Only_
        + responseId (string) - This is the response ID assigned by Credorax.
            _Read Only_
        + requestId (string) - This is the request ID assigned by Paysafe.
            _Read Only_
        + description (string) - This is a description of the response.
            _Read Only_
        + authCode (string) - This is the authorization code.
            _Read Only_
        + txnDateTime (string) - This is the transaction date and time.
            _Read Only_
        + referenceNbr (string) - This is the bank net transaction Id/Merch Tran Ref
            _Read Only_
        + responseReasonCode (string) - This is the raw response reason code returned by Credorax.
            _Read Only_
        + cvv2Result (string) - This is the raw cvv2 result code.
            _Read Only_

## Level2Level3

+ `level2Level3` (object) - This allows merchants who are enabled to provide additional [L2/L3 transaction data](#level2level3object). Not all processing gateways support this parameter. Contact your account manager for more information.
    + exemptLocalTax:true (boolean) - This indicates whether or not local tax is exempted for the request. 
    + localTaxAmount:1500 (number) - This is the local sales tax applied to the purchase.
        _length<=99999999999_
    + nationalTaxAmount:0 (number) - This is the national tax included in the transaction amount.
        _length<=99999999999_
    + freightAmount:0 (number) - This is the freight or shipping portion of the total transaction amount.
        _length<=99999999999_
    + dutyAmount:0 (number) - This is the duty associated with the import of the purchased goods.
        _length<=99999999999_
    + destinationZip:90210 (string) - This is the postal/zip code of the address to which the purchased goods will be delivered.
        _length<=10_
    + destinationCountry:US (string) - This is the country to which the goods are being shipped.
        _length=2_
    + shipFromZip:90211 (string) - This is the postal/zip code of the address from which the purchased goods are being shipped.
        _length<=10_
    + Include Line Items
            
## Line Items

+ `lineItems` (object) - This is more [detailed information](#lineitemsobject) about the items that are being purchased.
    + description:Disney Cruise Line (string, optional) - This is a description of the item(s) being purchased.
        _length<=50_
    + productCode:DCL (string) - This is a merchant-defined description code of the item being purchased.
        _length<=12_
    + quantity:4 (number) - This is the quantity of the item.
        _length<=99999999999_, _max 4 decimals_
    + unitAmount:120000 (number) - This is the unit price of the item being purchased, in minor units. The currency will be based on the account setting.
        _length<=99999999999_
    + taxRate:5 (number) - This is the tax rate used to calculate the tax amount.
        _length<=100_, _max 2 decimals_
    + taxAmount:24000 (number) - This is the amount of any value-added taxes that can be associated with the purchased item, in minor units.
        _length<=99999999999_
    + totalAmount:504000 (number) - This is the total amount of the line item, typically calculated as price multiplied by quantity, in minor units.
        _length<=99999999999_

## Metadata Object
+ metadata (object) 
    _Read Only_
    + Properties
        + `key`:`Data` (string) - This is a description of the data being added to the order.
            _length<=50_
        + `value`:`Data to add` (string) - This is the value for the key/value pair.
            _length<=100_

## OriginalCreditResponse (object)
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., lookups.
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _length<=255_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string, required) - This is the payment token generated by Paysafe that will be used for the request.
    _length<=36_
+ `amount`:`1000` (string, required) - This is the amount of the request, in minor units. 
    _Max =99999999999_
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD.
    _Read Only, max=3_
+ `dupCheck`:`true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    + Default: true
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status`:`PENDING` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The authorization request has been fully reversed.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ `description`:`Purchase Credit` (string) - This is a description of the transaction, provided by the merchant.
    _length<=255_
+ `customerIp`:`204.91.0.12` (string) - This is the customer's IP address.
    _length<=39_

## Partial Auth
+ partialAuth (object)
    + `requested`:`true` (boolean) - This specifies whether or not a partial authorization was requested.
        + Default: false
    + `amountDue`:`1000` (number) - This is the amount of the full authorization that is not covered by the Payment request.
        _max=99999999999_
    + `originalAmount`:`2000` (number) - This is the actual amount of the full authorization.
        _max=99999999999_

## Payment Methods Get
+ paymentMethods (object)
    + `paymentMethod`:`CARD` (enum) - This is the payment type associated with this payment method.
        _Read Only_
        + Members
            + CARD
            + SKRILL
            + NETELLER
            + PAYSAFECASH
            + PAYSAFECARD
    + currencyCode:`USD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD, returned in the request response.
        _Read Only, max=3_
    + `accountId`: `1009355920` (string) - This is the merchant account for which the payment method and currency are enabled.
        _Read Only, length<=10_
            

## PaymentHandleRequest (object)

+ `id`:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the Payment Handle. 
    _Read Only, length<=36_
+ `paymentHandleTokenFrom`:`7576835c-0396-11e9-8eb2-f2801f1b9fd1` (string) - This is an existing Payment Handle token, from which payment instrument and profile details can be retrieved.
    _length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _length<=255_
+ `transactionType`:`PAYMENT` (enum, required) - This specifies the transaction type for which the Payment Handle is created.
    + Members
        + PAYMENT - Payment Handle is created to continue the Payment.
        + STANDALONE_CREDIT - Payment Handle is created to continue the Standalone Credit.
        + ORIGINAL_CREDIT - Payment Handle is created to continue the Original Credit.
        + VERIFICATION - Payment Handle is created to continue the Verification request.
+ `status`:`PAYABLE` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + INITIATED - The transaction was initiated with the downstream provider.
        + PAYABLE - The merchant can use the Payment Handle for a Payment request.
        + PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
        + FAILED - The transaction failed due to either an error or being declined. 
        + EXPIRED - The Payment Handle expired because the merchant did not proceed with the Payment request. 
        + COMPLETED - The Payment request was initiated successfully using the Payment Handle.
+ `usage`:`SINGLE_USE` (enum) - This specifies how the Payment Handle will be used for Payments.
    + Members
        + SINGLE_USE - The Payment Handle can be used for one transaction only and expires if not used.
        + MULTI_USE - The Payment Handle can be used multiple times.
+ `paymentType`:`CARD` (enum, required) - This is the payment type associated with this Payment Handle.
    + Members
        + CARD
        + SKRILL
        + NETELLER
        + PAYSAFECASH
        + PAYSAFECARD
+ `action`:`NONE` (enum) - This specifies the next step of the user journey once they proceed to the Payment.
    + Members
        + NONE
        + REDIRECT
        + AUTHENTICATE
+ `executionMode`:`SYNCHRONOUS` (enum) - This specifies the action of the merchant server in order to complete the Payment.
    + Members
        + ASYNCHRONOUS - The Payment request is not completed immediately and the merchant must rely on webhooks to retrieve the status of the Payment request.
        + SYNCHRONOUS - The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.
+ `amount`:`1000` (string) - This is the amount of the request, in minor units. **Note:** This field is mandatory if *transactionType* is included.
    _Max =99999999999_
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD, returned in the request response.
    _Read Only, max=3_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string, required) - This is the payment token generated by Paysafe that will be used by merchants for Payment API requests.
    _Read Only, length<=36_
+ Include Card
+ Include Profile
+ Include Billing Details
+ `returnLinks` (object) - The URL endpoints to redirect the customer to after a redirection to an alternative payment or 3D Secure site. You can customize the return URL based on the transaction status. 
    + `rel`(enum) -This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. 
        + default (string, required) - The default return URL that will be used if specific status return URL is not defined.
        + on_completed (string) - Will be returned to this URL if the payment is completed.
        + on_failed (string) - Will be returned to this URL if the payment fails.
    + `href` - The actual URL
    + `method` - The HTTP method
+ links (object) - This is an array of links related to the resource.
    + `rel`: `redirect_payment` (enum)
    + `href`:`http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709`
    + `method`:`GET`
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _length<=39_
+ `timeToLiveSeconds`:`1212121212` (number) - This is the period of time, in seconds, the *paymentHandleToken* is valid before expiration. 
    _Read Only, length<=899_

## PaymentHandleRequest Object
+ paymentHandleRequest (object)
    + `id`:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the Payment Handle. 
        _Read Only, length<=36_
    + `paymentHandleTokenFrom`:`7576835c-0396-11e9-8eb2-f2801f1b9fd1` (string) - This is an existing Payment Handle token, from which payment instrument and profile details can be retrieved.
        _length<=36_
    + `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
        _length<=255_
    + `transactionType`:`PAYMENT` (enum, required) - This specifies the transaction type for which the Payment Handle is created.
        + Members
            + PAYMENT - Payment Handle is created to continue the Payment.
            + STANDALONE_CREDIT - Payment Handle is created to continue the Standalone Credit.
            + ORIGINAL_CREDIT - Payment Handle is created to continue the Original Credit.
            + VERIFICATION - Payment Handle is created to continue the Verification request.
    + `status`:`PAYABLE` (enum) - This is the status of the transaction request.
        _Read Only_
        + Members
            + RECEIVED - Paysafe has received the request and is waiting for the downstream processor’s response.
            + INITIATED - The transaction was initiated with the downstream provider.
            + PAYABLE - The merchant can use the Payment Handle for a Payment request.
            + PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
            + FAILED - The transaction failed due to either an error or being declined. 
            + CANCELLED - The authorization request has been fully reversed.
            + EXPIRED - The Payment Handle expired because the merchant did not proceed with the Payment request. 
            + COMPLETED - The Payment request was initiated successfully using the Payment Handle.
    + `usage`:`SINGLE_USE` (enum) - This specifies how the Payment Handle will be used for Payments.
        + Members
            + SINGLE_USE - The Payment Handle can be used for one transaction only and expires if not used.
            + MULTI_USE - The Payment Handle can be used multiple times.
    + `paymentType`:`CARD` (enum, required) - This is the payment type associated with this Payment Handle.
        + Members
            + CARD
            + SKRILL
            + NETELLER
            + PAYSAFECASH
            + PAYSAFECARD
    + `action`:`NONE` (enum) - This specifies the next step of the user journey once they proceed to the Payment.
        + Members
            + NONE
            + REDIRECT
            + AUTHENTICATE
    + `executionMode`:`SYNCHRONOUS` (enum) - This specifies the action of the merchant server in order to complete the Payment.
        + Members
            + ASYNCHRONOUS - The Payment request is not completed immediately and the merchant must rely on webhooks to retrieve the status of the Payment request.
            + SYNCHRONOUS - The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.
    + `amount`:`1000` (string) - This is the amount of the request, in minor units. **Note:** This field is mandatory if *transactionType* is included.
        _Max =99999999999_
    + `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD, returned in the request response.
        _Read Only, max=3_
    + `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string, required) - This is the payment token generated by Paysafe that will be used by merchants for Payment API requests.
        _Read Only, length<=36_
    + Include Card
    + Include Profile
    + Include Billing Details
    + `returnLinks` (object) - The URL endpoints to redirect the customer to after a redirection to an alternative payment or 3D Secure site. You can customize the return URL based on the transaction status. 
        + `rel` (enum) -This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. 
            + default (string, required) - The default return URL that will be used if specific status return URL is not defined.
            + on_completed (string) - Will be returned to this URL if the payment is completed.
            + on_failed (string) - Will be returned to this URL if the payment fails.
        + `href` - The actual URL
        + `method` - The HTTP method
    + `links` (object) - This is an array of links related to the resource.
        + `rel`:`redirect_payment` (enum)
        + `href`:`http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709`
        + `method`:`GET`
    + `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
        _length<=39_
    + `timeToLiveSeconds`:`1212121212` (number) - This is the period of time, in seconds, the *paymentHandleToken* is valid before expiration. 
        _Read Only, length<=899_

## PaymentsRequest (object)

+ `id`:`3aeb9c63-6386-46a3-9f8e-f452e722228a` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., looking up the Payment. 
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _length<=255_
+ `amount`:`1000` (number, required) - This is the amount of the request, in minor units.
    _max=99999999999_
+ `dupCheck`:`false` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.
    + Default: true
+ `settleWithAuth`:`true` (boolean) - This indicates whether the request is an Authorization only (no Settlement) or a Purchase (Authorization and Settlement).
    + Default: true
+ `preAuth`:`false`  (boolean) - This indicates whether the Authorization request should be sent as a Pre-Authorization. You should use the *preAuth* element in cases where you are not sure that you can fully settle the Authorization within 4 days. Contact your account manager for more information.
+ Include Partial Auth
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string, required) - This is the payment token generated by Paysafe that will be used for the Payment request.
    _length<=36_
+ `availableToSettle`:`0` (number) -This is the amount of of the Authorization remaining to settle, in minor units.
    _Read Only_
+ `childAccountNum`:`3216549877` (string) - This is the child merchant account number. It is returned only if the transaction was processed via a master account.
    _length<=10_
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _length<=39_
+ `description`:`Consumer Purchase` (string) - This is a description of the transaction, provided by the merchant.
    _length<=255_
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status`:`COMPLETED` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The request authorization request has been reversed.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ `status`:`PAYABLE` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + INITIATED - The transaction was initiated with the downstream provider.
        + PAYABLE - The merchant can use the Payment Handle for a Payment request.
        + PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
        + FAILED - The transaction failed due to either an error or being declined. 
        + EXPIRED - The Payment Handle expired because the merchant did not proceed with the Payment request. 
        + COMPLETED - The Payment request was initiated successfully using the Payment Handle.
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD, returned in the request response.
    _Read Only, max=3_
+ Include Level2Level3
+ Include Gateway Response
+ Include accordD
+ Include Recipient
+ `riskReasonCode`:`1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.
+ Include Splitpay
+ Include Stored Credential
+ settlements (array) - This is the list of all Settlements. This will be returned only if *settleWithAuth* = *true* in the request.
+ Include Acquirer Data
+ Include Error Attributes
+ Include Metadata Object
+ `statusReason` - This is reason for the status. This is present in case of ERROR, FAILURE, HELD status.
    _length<=255_
+ Include Authentications Object

## Profile

+ `profile` (object) 
    + `id`:`de39b080-03aa-11e9-8eb2-f2801f1b9fd1` (string) -  This is the ID returned in the response. **Note:** If you do not include the profile ID, you must provide other customer details like firstName, lastName, and email. 
        _length<=36_
    + `status`:`ACTIVE` (enum) - This is the status of the customer profile, returned in the response.
        + Members
            + ACTIVE
    + `merchantCustomerId`:`custid123` (string) - This is the reference number for the customer created by the merchant and submitted as part of the request. It must be unique for each customer.
        _length<=255_
    + `firstName`:`Jane` (string) - This is the customer’s first name.
        _length<=80_
    + `lastname`:`Smyth` (string) - This is the customer's last name.
        _length<=80_
    + `locale`:`ca_en` (enum) - This indicates the customer's locale.
        + Members
            + en_US
            + fr_CA
            + en_GB
    + Include Date of Birth
    + `email`:`jane.smyth@email.com` (string) - This is the customer's email address.
        _length<=255_
    + `phone`:`12345678` (string) - This is the customer's phone number.
        _length<=40_
    + `mobile`:`4446666` (string) - This is the customer's mobile phone number. 
        _length<=40_
    + `gender`:`M` (enum) - This is the customer’s gender.
        - F
        - M
    + `nationality`:`Indian` (string) - This is the customer’s nationality.
        _length<=30_

## Recipient (object)
+ `recipient` (object) - The recipient is deemed to be the person or party who has the contractual relationship with the merchant/financial institution.
    + `dateOfBirth` (object) - This is the date of birth of the recipient.
        + `day`:`24` (number) - This is the day of birth.
        + `month`:`12` (number) - This is the month of birth.
        + `year`:`1990` (number) - This is the year of birth.
    + `zip`:`EC4Y 0HQ` - This is the zip/postal code of the recipient.
        _length<=10_
    + `lastName` - This is the last name of the recipient.
        _length<=255_
    + `accountNumber` - This is the account number of the recipient.
        _length<=25_

## Refunds
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
    _Read Only, length<=36_
+ `merchantRefNum`:`P1234` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _length<=255_
+ `amount`:`100` (number) - This is the amount of the request, in minor units. If this value is not provided, the full remaining amount on the Authorization will be settled. 
    _max=99999999999_
+ `dupCheck`:`true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    + Default: true
+ `childAccountNum`:`1234567898` (string) - This is the child merchant account number. It is returned only when the transaction is processed via a master account.
    _length<=10`
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status`:`PENDING` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The request has been cancelled.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ Include Error Attributes
+ Include Splitpay
+ `riskReasonCode`:`1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.        
+ Include Gateway Response

## Settlements
+ `id`: `25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
    _Read Only, length<=36_
+ `merchantRefNum`: `P1234` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _length<=255_
+ `amount`: `100` (number) - This is the amount of the request, in minor units. If this value is not provided, the full remaining amount on the Authorization will be settled. 
    _max=99999999999_
+ `dupCheck`: `true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    + Default: true
+ `availableToRefund`:`25` (number) - This is the amount of of the Authorization remaining to refund, in minor units.
    _Read Only, max=99999999999_
+ `childAccountNum` : `1234567898` (string) - This is the child merchant account number. It is returned only when the transaction is processed via a master account.
    _length<=10`
+ `status`:`PENDING` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The request has been cancelled.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ Include Error Attributes
+ Include Splitpay
+ `riskReasonCode`: `1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.        
+ Include Gateway Response

## Splitpay
+ splitpay (array, optional) - For Splitpay transactions only, an array containing the linked accounts and the amount shared with each. You must include either *amount* or *percent*. However, you cannot include both values.
    + (object)
        + Properties
            + linkedAccount:`123124124` (string, required) - This is the ID of the linked account. This account must already be linked to the merchant account.
            + One of
                + amount:`505` (number) - This is the amount to transfer to the linked account in minor currency units.
                + percent:`5` (number) - This is the percentage of the total transaction amount to transfer to that account.

## statusAttributes (enum) - This is the status of the request.
+ RECEIVED - Our system has received the request and is waiting for the downstream processor’s response.
+ INITIATED - The transaction was initiated with the downstream provider.
+ PAYABLE - The merchant can proceed with the Payment request.
+ PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
+ FAILED - The transaction failed, due to either an error or being declined. 
+ CANCELLED - The authorization request has been fully reversed.
+ EXPIRED - The Payment Handle expired due to merchant not proceeding with Payment request.
+ COMPLETED - The Payment request was initiated successfully using the Payment Handle.

## `Stored Credential`
+ storedCredential (object) - This object is used to identify authorization requests that use stored credentials for a consumer's authorization request, in order to improve authorization rates and reduce fraud. Stored credentials can be used in two cases: using a payment token from the Customer Vault for an authorization, and using a card number stored by the merchant for an authorization.

    + Properties
        + type:`ADHOC` (enum) - This specifies the type of request being made. 
            + ADHOC – Ad hoc consumer-initiated request.
            + TOPUP – Unscheduled merchant iniitated request when a consumer balance is below a set limit.
            + RECURRING –  Scheduled merchant initiated recurring request.
            
            + Default: ADHOC
        + occurrence:`RECURRING` (enum) - This specifies whether the stored credential request is initial or recurring. 
            + INITIAL – Used when this is the first time the consumer uses this credit card.
            + SUBSEQUENT – Used when the consumer uses this credit card for subsquent requests.
            
            + Default: INITIAL

## VerificationResponse (object)
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., looking up the Verification.
    _Read Only, length<=36_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string, required) - This is the payment token generated by Paysafe that will be used for the Verification request.
    _length<=36_
+ `merchantRefNum`:`P1234` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _length<=255_
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _length<=39_
+ `dupCheck`:`true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    + Default: true
+ `description`:`Consumer Card Verification` (string) - This is a description of the transaction, provided by the merchant.
    _length<=255_
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The authorization request has been fully reversed.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD, returned in the request response.
    _Read Only, max=3_
+ `riskReasonCode`:`1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.
+ Include Gateway Response
+ Include Error Attributes

## voidAuthResponse (object)
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) This is the ID returned in the response. This ID can be used for future associated requests, e,g., lookups.
    _Read Only, length<=36_
+ `merchantRefNum`:`P1234` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _length<=255_
+ `amount`:`100` (number, required) - This is the amount of the request, in minor units.
    _max=99999999999_
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The request has been cancelled.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
FORMAT: 1A
HOST: https://api.test.paysafe.com/paymenthub/

# Paysafe Payments API 

# QUESTIONS
 * Update Resource Patterns section to include all request types.
 * Customers
    * We need to tell the merchant **why** they would create a customer.
    * The Payments API includes a Billing Details object, and the new content for Customer seems to introduce a Billing Address object that does the same thing.
    * In Customer object, Customer API uses "ip", whereas everywhere else we use "customerIp". 
    Also, length for *ip* is set at 46, whereas it is set at 39 for *customerIp*.
    * Is *paymentToken* mistakenly included in the "Customers" complex object? Not in sample request. 
    * In the request to create a customer using a payment handle token, the name of the request is "Create a Customer Using a Single-Use Token". Just a typo?
    * There is an addresses and cards object in the GET for a customer that includes subcomponents, but not a payment handle (see https://customersapi5.docs.apiary.io/#reference/0/customers/get-customer-including-subcomponents)
    * When you GET customer with subcomponents, only cards and addresses are listed, but paymentHandles array is in example. 
    Note that addresses and cards are listed in the customer complex object in the Common Objects section.
    * How do you update a Customer Payment Handle with a *billingDetailsId*? Looks like you need the *billingDetails* object in the update request.
    * Currently, creating a Payment Handle in the Customers section documents only for card ... should this also include Paysafecash and Paysafecard?
    * Table of attributes includes *timeToLiveSeconds*, but this is not included in example response in the Apiary document.
    * Payment Handle object for customers does not have *transactionType*, *action*, or *links*. Just want to confirm that this is correct.
    * It is not clear where to get the *paymentHandleTokenFrom* to use in the request to "Create a Payment Handle Using Single-Use Payment Handle Token". 
    I also notice that this has the *status* of MULTI_USE, while the normal Customer Payment Handle has no *status* at all.
    * Should "Create a Payment Handle Using a Single-Use Payment Handle Token" be renamed to "Create a **Permanent** Payment Handle Using a Single-Use Payment Handle Token"?
    * Need a description for *paymentHandleTokenFrom* for "Create a Payment Handle Using Single-Use Payment Handle Token".
    * Which of the two Customer Payment Handles (regular or single-use token) does the GET (Get Customer Payment Handle) look up?
    * Same question, but for the Update request?
    * The note about providing all elements for the update "Update a Multi-Use Customer Payment Handle with a Single-Use Payment Handle" doesn't seem to apply because all they're including in the request itself is a *paymentHandleTokenFrom* (not sure where it comes from).
        * The description of *paymentHandleTokenFrom* in this request just says it is "returned in the response while creating the single-use payment handle". I need this clarified, since you can create payment handles with and without a *customer_id*.
    * The requests for customer Single-Use Tokens look really old. E.g., there is language about payment handle requests and card creation. So I don't know if the examples for request/responses are accurate.
 * Checkout
    * For the section "Including the SDK", we need correct URL for the SDK. **Kasi will provide.**
 * Payment Handles
    * Should *paymentMethod* in the request to look up available payment methods actually be *paymentType* (used in creation of a payment handle)? Are they not referencing the same thing (CARD, etc.)? 
    * Related, we have *currency* in payment methods, but *currencyCode* elsewhere.
    * If *currencyCode* is included in creating payment handle, what happens if they include a different currencyCode in the payment request using that payment handle?
 * Apiary has *card* element but Confluence card object has *cardType* element. Other APIs do not use *cardType*. They use only the number or token in the request, and "type" and "lastDigits" are returned in the response, where type is inferred from the number provided. (Though I see the current Vault API returns *cardType* in response.)
    * Related, can someone verify that the list of card types is accurate?
 * Profile
    * The elements in *profile* are different when you compare the Confluence object and the object defined in the Apiary document. Kasi says this will be updated.
    * The behaviour when including profile ID is not clear in the Apiary document provided (e.g., will profile fields provided overwrite existing profile fields?). Kasi mentioned including profile ID only when billing ID is passed, but I don't see where this is passed.
    * Where do all the values for the *profile* elements come from? I see that *profile* is part of the *paymentHandle* object but it's not clear how/when to use it. Can you provide only the profile ID, as returned from creating a customer profile?
 * Length of *externalSubMerchantId* is not in Confluence. Kasi says this is part of Netbanx response but I can't find it. The *acquirerData* object in our Card Payments API does not have this field. 
 * Payment Handle
    * Why does payment handle request need an *amount* field? It's required for the subsequent payment request anyway. **The amount in the payment request must match the amount in the payment handle request.**
    * When would *paymentHandleTokenFrom* be used?
    * In the Getting Started section, we say that the merchant must use the payment handle within 15 minutes or it will expire. Is this true when *usage* is set to MULTI-USE?
    * There is reference to *usage* being set to LOOKUP, but this does not seem to be documented in Apiary or Confluence (where values are single_use and multi_use).
    * If a *paymentHandleToken* has the *usage* value set to MULTI-USE, is the token valid indefinitely?
    * What determines what a token's *usage* will be set at in the response?
    * When I created a payment handle for pscash or pscard in Postman in QA, *timeToLiveSeconds* came back as 345599.
 * Errors
    * Check for new errors on confuence page!!
    * Added errors from their Apiary file. More should be coming for payment handles and customer vault.
    * Looks like specific Payments API errors should also be added - see https://confluence.neterra.paysafe.com/display/paymentnetwork/Error+Codes.
 * Testing
    * Need contact email address for Testing section below.
    * In section Applying for a Test Account, it looks like they retrieve their Test API key from the Portal. How do they get Production API key? 
    Comes from a Production version of Portal. Merchant receives email from Tech Support with Live credentials. Even Test credentials come from a Sales rep.
    * Do we need to provide test card numbers (and similar information for other payment methods when they're available)? I assume our current Card Payments API test cards will work in the same way.
 * In Postman:
    * When I use a payment handle created, e.g., for a Verification and send it to the Payments endpoint, the error thrown says "Payment handle provided is not permitted for Payments because of its state", and nothing about wrong endpoint.
 * Authentication section - be sure to provide clear instructions on how they will get their API keys. 
 * Webhooks
    * How can they test their callback URL? **They must sign in to merchant portal to create the callback url ... can't be tested initially.**
    * Can you provide me with a sample of a webhooks payload they might expect? E.g., see https://developer.paysafe.com/en/rest-apis/alternate-payments/webhooks/webhook-samples/.
    * Need to add content on getting Webhooks help in section *Opening a Service Request* ... there is already a cross-reference from Webhooks section to this Help section.
 * When creating payment handle tokens ... for multi-use paymenthandletokens ... only the case when it is attached to a customer.
 * Single-use customer tokens are used **only** in the Paysafe checkout scenario, and not in API requests. 
    * A different API key from merchant portal is used to "Search" for a single-use token ... this is the public key available in merchant portal.

<a name="paymentsoverview" title="Payments API Overview"></a>
# Overview

## Introduction

## Features and Benefits

<a name="paymentsgettingstarted" title="Payments API Getting Started"></a>
# Getting Started

The Paysafe Payments API allows merchants to collect Payments via multiple payment methods using a single endpoint integration.

## Supported Payment Methods
The following payment methods are currently supported by the Payments API:

- Card
- Paysafecard
- Paysafecash

<a name="apikey" title="Authentication"></a>
## Authentication

In order for you to use the Paysafe Payments RESTful API, Paysafe must first set you up on their system
and provide you with an API key. Your API key will have the following format:

 * Key Username – MerchantXYZ
 * Key Password – B-tst1-0-51ed39e4-312d02345d3f123120881dff9bb4020a89e8ac44cdfdcecd702151182fdc952272661d290ab2e5849e31bb03deede7e

> **Note:** This is not the same the username and password you use to access the Merchant Portal. Your Production API key will be different from your Test API key. Contact your account manager for details. You must keep your API keys safe and ensure that it is used appropriately for your needs.

The case-sensitive API key is sent using HTTP Basic Authentication. To use HTTP Basic Authentication, you must send the API key credentials using the Authorization header with every request. The Authorization header is constructed as follows:

 1. The Key Username and Key Password are combined into a string separated by a colon, e.g.,“Key Username:Key Password”.
 2. The resulting string literal is then encoded using Base64.
 3. The authorization method and a space (i.e., “Basic”) are then put before the encoded string.

For example, using the Key Username and Password examples above, the header is formed as follows:

``Authorization: Basic
TWVyY2hhbnRYWVo6Qi10c3QxLTAtNTFlZDM5ZTQtMzEyZDAyMzQ1ZDNmMTIzMTIwODgxZGZmOWJiNDAyMGE4OWU4YWM0NGNkZmRjZWNkNzAyMTUxMTgyZmRjOTU yMjcyNjYxZDI5MGFiMmU1ODQ5ZTMxYmIwM2RlZWRlN2U=``

For additional details, please refer to [http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication).

> **IMPORTANT:** The API key that you will use for the Paysafe Payments API is **different from** the API key used for all the other Developer Center APIs.

### Getting Your API Keys
Once signed in to the Merchant Portal, go to **Integrate>API Keys** to retrieve your Base64 encoded API Key.
![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/API_Key.png)

The default Test account can be used for processing Card, PaysafeCash, and Paysafecard payments with the processing currency (*currencyCode*) set to USD. 
You can choose to enable any payment method/currency combination in your Production account by completing the onboarding application form, which you can get from your business relationship manager.

> **Note:** All your payment methods will be set up to use the same API key.

<a name="urls" title="URLs"></a>
## URLs

###  Test URL
In order to test your integration with Paysafe, use the following Test URL:

`https://api.test.paysafe.com`

For example:

`https://api.test.paysafe.com/paymenthub/v1/payments/{payment_id}`

### Production URL
In order to process live requests with Paysafe, use the following Production URL:

`https://api.paysafe.com`

For example:

`https://api.paysafe.com/paymenthub/v1/payments/{payment_id}`

## Payment Handles

A Payment Handle is basically a token that represents a payment method that you set up for a customer. 
When you create the payment handle, you can include information like the credit card number and expiry date, the card holder's name, the type of transaction request it will be used for, some profile information about the customer, and some billing address information.
It represents all the payment details you need for the customer.

When you create the Payment Handle, Paysafe returns a *paymentHandleToken* in the response. That token represents all the customer payment information you need to include in, for example, a [credit card payment request](#paymentrequest).

You have to have to create a separate Payment Handle for each transaction type/payment type combination you need to use &ndash; e.g., one for credit card Payments, one for credit card Standalone Credits,  etc. 

### Some Important Parameters
When you create a Payment Handle, there are a few additional parameters that are important to be aware of because they have a significant impact on how you will use the payment token (*paymentHandleToken*) that's created.
 * action
 * usage
 * executionMode

#### Action

The *action* parameter is a read-only value that Paysafe returns in the response to the Payment Handle creation request, regardless of the payment method selected by the customer. It tells you what additional action, if any, you must take to allow the customer to complete the payment request. 

The possible values are: 

* NONE – No further action is required from the customer. This is typically the case for a card transaction where no further 3D Secure authentication is required from the customer after having entered valid card details. 
In this case, merchant can immediately make a Payments call to capture the payment, since the *status* of the Payment Handle token will immediately be set to *PAYABLE*.
   
* REDIRECT – The customer is required to authorize the payment on a redirected page. This is typically the case, e.g., with a 3D Secure card transaction where the customer must authenticate their card on the issuing bank's website. 
In this case, you must redirect the customer to a link that Paysafe returns in the the response to the Payment Handle creation request. Once the customer has completed the authentication successfully, the *status* of the Payment Handle token will be modified to *PAYABLE*. 

Once the status of the Payment Handle token is *PAYABLE*, the merchant has to [make a Payment request](#paymentrequest) using the Payment Handle token within 15 minutes to capture the payment. Otherwise, the the Payment Handle will expire.

#### Usage

The *usage* parameter is a read-only value that Paysafe returns in the response to the Payment Handle creation request that specifies whether the Payment Handle token (*paymentHandleToken*) can be used once only or multiple times. 

The possible values are:
* SINGLE_USE – In this case, the Payment Handle token can be used only once for a subsequent Payments API request.
* MULTI USE - In this case, the Payment Handle token can be used multiple times for a Payments API request. This would be used, e.g., for recurring transactions like subscriptions or saved cards.

#### Execution Mode

The *executionMode* parameter is a read-only value that Paysafe returns in the response to the Payment Handle creation request that indicates whether the payment request will be completed immediately or after a delay of some length. 
Merchants can use this information to determine whether they can receive the payment status synchronously or if instead they need to [rely on the use of webhooks](#paymentswebhooks).

The possible values are:
* SYNCHRONOUS – The Payment status can be received by the merchant synchronously. In this case the merchant can poll the PROCESSING/PENDING Payments at regular intervals to retrieve the Payment status. 
* ASYNCHRONOUS – The Payment is expected to be completed after a significant time delay (e.g., after hours or days, as in the case of PaysafeCash). In this case, the merchant must [use webhooks to retrieve the Payment status](#paymentswebhooks).

## Choosing Your Integration
 * API or Checkout SDK

### Integrating New Payment Methods
To cover:
 * Who is this appicable for
 * How to raise a request to add new payment method
 * What is the additional integration effort required to integrate

<a name="configure3ds" title="Configuring for 3D Secure"></a>
## Configuring for 3D Secure

 > **This is a placeholder until content is provided.**

## Testing 

See [Testing Instructions](#testinginstructions)

## Going Live

See [Going Live](#goinglive)

# API

The Payments API allows merchants to process payment-related requests across a wide variety of payment methods with a simple integration a single API using the REST protocol. The protocol uses JSON for all requests and responses.


## Request Types Supported
The following request types are supported:

  * [Payment Methods](#getpaymentmethods)
  * [Payment Handles](#paymenthandlerequest)
  * [Verifications](#verificationrequest)
  * [Payments](#paymentrequest)
  * [Void Authorizations](#voidauthrequest)
  * [Settlements](#settlementrequest)
  * [Refunds](#refundrequest)
  * [Standalone Credits](#standalonecreditrequest)
  * [Original Credits](#originalcreditrequest)
  
## API Endpoints

`https://api.paysafe.com/paymenthub/v1/payments/{payment_id}`

### Resource Patterns

|Endpoint URL                                   |Description                            |Action |
|---                                            |---                                    |---    |
|/paymentmethods                                |Look Up Payment Methods for a Merchant |POST   |
|/paymenthandles                                |Create a Customer Payment Handle       |POST   |
|/paymenthandles/{payment_handle_id}            |Look Up a Payment Handle               |GET    |
|/verifications                                 |Verify a Card                          |POST   |
|/verifications/{verification_id}               |Look Up a Verification                 |GET    |
|/payments                                      |Submit a Payment Request               |POST   |
|/payments/{payment_id}                         |Look Up a Payment                      |GET    |
|/payments/{payment_id}/settlements             |Settle an Authorization                |POST   |
|/payments/{payment_id}/voidauths               |Void (Reverse) an Authorization        |POST   |
|/voidauths/{void_auth_id}                      |Look Up a Void Authorization           |GET    |
|/settlements/{settlement_id}                   |Cancel a Settlement                    |PUT    |
|/settlements/{settlement_id}                   |Look Up a Settlement                   |GET    |
|/payments/{settlement_id}/refunds              |Submit a Refund                        |POST   |
|/refunds/{refund_id}                           |Cancel a Refund                        |PUT    |
|/refunds/{refund_id}                           |Look Up a Refund                       |GET    |
|/standalonecredits                             |Submit a Standalone Credit             |POST   |
|/standalonecredits/{standalone_credit_id}      |Cancel a Standalone Credit             |PUT    |
|/standalonecredits/{standalone_credit_id}      |Look Up a Standalone Credit            |GET    |
|/originalcredits                               |Submit an Original Credit              |POST   |
|/originalcredits/{original_credit_id}          |Cancel an Original Credit              |PUT    |
|/originalcredits/{original_credit_id}          |Look Up an Original Credit             |GET    |

## Typical Scenarios
When you use the Paysafe Payments API for payments and credits, you have to collect a variety of customer details on your platform/website, including card number, expiry date, and CVV/CVC code, among other items. 
You must then and send this information to Paysafe with your API request.

The scenarios below describe some of the common ways by which merchants can set up some Payment and Credit requests using the Paysafe Payments API.

### Scenario 1: One-off Card Payment with Settlement

This is a common scenario, where the Authorization and Settlement of a credit card payment are completed in a single request. 
This type of request is typically used by merchants who provide immediate delivery of the service, e.g., a gaming merchant where a customer deposits money in to their player account. 
In this scenario, you would do the following: 
 1. Create a Payment Handle, which should immediately have the *status* of PAYABLE.
 2. Use the *paymentHandleToken* returned in the response to process the Payment request &ndash; the *settleWithAuth* parameter must be set to *true* in this case.
 3. Once the Payment request is successfully completed, the funds are immediately requested from the card issuer with the next Paysafe batch Settlement run.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 2: One-off Card Payment with Settlement with 3D Secure Authentication

In this scenario, the Authorization and Settlement of a credit card payment are completed in a single request, but in addition the card holder is authenticated via 3D Secure by the card issuer prior to Payment authorization.
In this scenario, you would do the following:
 1. Create a Payment Handle. 
 2. Since the card is enabled for 3D Secure, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link points to the 3D Secure authentication URL
 3. Redirect the customer to the 3D Secure authentication URL so they can authenticate the credit card.
 4. Upon successful customer authentication, the merchant gets notified at the URL specified in the *on_completed* parameter included with their request.
 5. At this point, the *status* of the Payment Handle becomes PAYABLE. 
 6. Use the *paymentHandleToken* returned in the response to process the Payment request &ndash; the *settleWithAuth* parameter must be set to *true*.
 7. Once the Payment request is successfully completed, the funds are immediately requested from the card issuer with the next Paysafe batch Settlement run.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 3: Card Payment with Delayed Settlement

This is another common scenario, where a merchant obtains an authorization for a purchase amount and then settles it later once the service is fulfilled. 
A common example would be a merchant who ships goods &ndash; they might take your online order on day 1, when the do the authorization, but then settle it on day 3 when they ship the goods you have purchased. 
In this scenario, you would do the following:
 1. Create a Payment Handle, which should immediately have the *status* of PAYABLE.
 2. Use the *paymentHandleToken* returned in the response to process the Payment request &ndash; the *settleWithAuth* parameter must be set to *false* in this case.
 3. Once you have shipped the goods, use the same *paymentHandleToken* to process a Settlement request. The *payment_id* to include in the Settlement request URL is the *id* that was returned in the response to the Payment request.
 4. Once the Settlement request is successfully completed, the funds are immediately requested from the card issuer with the next Paysafe batch Settlement run.

> **Note:** You can make multiple Settlement requests to complete the initial Payment request, up to the full amount on the original authorization.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest) + [Settlements](#settlementrequest)

### Scenario 4: Card Original Credit

The Original Credit request allows the merchant to issue a credit to a customer in the case where there is no previous Payment to tie it to, as is the case with a regular [Refund](#refundrequest). 
For example, an online gaming merchant may want to perform a payout using an Original Credit.

In this scenario, you would do the following: 
 1. Create a Payment Handle, with the *transactionType* parameter set to ORIGINAL_CREDIT. This Payment Handle should immediately have the *status* of PAYABLE.
 2. Use the *paymentHandleToken* returned in the response to process the Original Credit.
 3. Once the Original Credit request is successfully completed, the funds are transferred to the customer's card with the next Paysafe batch run.

>**Note:** Only merchants with [specific Merchant Category Codes](#originalcreditmccs) can process Original Credit requests. Merchants with all other Merchant Category Codes must process [Standalone Credit requests](#standalonecreditrequest).

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Original Credits](#originalcreditrequest)

### Scenario 5: Paysafecard Payment

In this scenario, the merchant wants to process a payment request using Paysafecard as the payment type.

In this scenario, you would do the following:
 1. Create a Payment Handle with the *transactionType* parameter set to PAYMENT and the *paymentType* parameter set to PAYSAFECARD. 
 2. Since the customer has to complete payment authentication by providing Paysafecard details, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link points to the Paysafecard redirect URL
 3. Redirect the customer to the Paysafecard redirect URL so they can provide the PIN/Voucher details to complete the money transfer.
 4. Upon successful customer authentication, the merchant gets notified at the URL specified in the *on_completed* parameter included with their request.
 5. At this point, the *status* of the Payment Handle becomes PAYABLE. 
 6. Use the *paymentHandleToken* returned in the response to process the Payment request.
 7. Once the Payment request is successfully completed, the funds are immediately transferred to the merchant's account.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

### Scenario 6: Paysafecash Payment

In this scenario, the merchant wants to process a payment request using Paysafecash as the payment type.

In this scenario, you would do the following:
 1. Create a Payment Handle with the *transactionType* parameter set to PAYMENT and the *paymentType* parameter set to PAYSAFECASH. 
 2. Since the customer has to complete payment authentication by providing Paysafecash details, Paysafe returns a response with the following:
    * The *action* parameter is set to REDIRECT
    * A *payment_redirect* link points to the Paysafecash redirect URL
 3. Redirect the customer to the Paysafecash redirect URL so they can generate a bar code.
 4. Upon successful bar-code generation, the *status* of the Payment Handle becomes PAYABLE. The merchant gets [notified of this status change via webhooks](paymentswebhooks) that have been configured.
 5. Use the *paymentHandleToken* returned in the response to process the Payment request. The Payment will have a *status* of PENDING until the customer has made the payment.
 6. Once the Payment request is successfully completed, the merchant [gets notified via webhooks](#paymentswebhooks) and the funds are immediately transferred to the merchant's account.

**API Requests to Use:** [Payment Handles](#paymenthandlerequest) + [Payments](#paymentrequest)

<a name="paymentscheckout" title="Payments Checkout"></a>
# Payments Checkout

Paysafe Payments Checkout allows merchants to take payment from credit cards and other alternate payment methods &ndash; like Paysafecash and Paysafecard &ndash; using a secure overlay while requiring the least demanding level of PCI compliance: SAQ-A. 
The user input and storage of payment information is handled by Paysafe and the checkout uses Paysafe's Payment APIs for payment and credit processing.

## How to Use the SDK

1. Include the Paysafe Checkout SDK in your HTML payment form.
2. Call the checkout setup function with your single-use token API key. The setup function creates an iframe overlay containing the secure payment form hosted on Paysafe's servers. 
You will need to pass a callback function as part of the setup to handle successful payment handle success and failure.
3. The callback should use AJAX to send the payment handle representing the customer's payment details to your merchant server to [make payment using the Paysafe Payments API](#paymentrequest).

## Including the SDK 

The SDK is located at `https://adminportal.qa.mtl.paysafecorp.com/checkout/v2/paysafe.checkout.min.js`. You need to include it in your HTML form by adding a '<'script> element in either the header or body.

```
<head>
    <script src="https://adminportal.qa.mtl.paysafecorp.com/checkout/v2/paysafe.checkout.min.js"></script>
</head>
```

## Example Payment Form

The following code sample shows a minimal Paysafe Checkout example for card payments that creates a payment overlay for the user to enter their card number, expiry date, and CVV. 
The overlay contains a payment button that creates a payment handle for the data entered by the user and displays the payment handle (if successful) in the browser console.

```
<html>
    <head>
        <script src="https://adminportal.qa.mtl.paysafecorp.com/checkout/v2/paysafe.checkout.min.js"></script>
    </head>

 
    <body>
        <button onclick="checkout()"> Pay 25$ </button>
    </body>

    <script>
        function checkout() {
            paysafe.checkout.setup("API Key", {
                amount: 25000,
                currency: "USD",
                locale: "en_US",
                merchantRefNum: "10231231311",
                canEditAmount: true,
                environment: "TEST"
            }, function(instance, error, result) {
                if (result && result.paymentHandleToken) {
                    console.log(result.paymentHandleToken);
                    // make AJAX call to Payments API
                } else {
                    console.error(error);
                    // Handle the error
                }
            }, function(stage) {
                switch(stage) {
                    case "BeforePayment": // Handle the scenario
                    case "DuringPayment": // Handle the scenario
                    case "AfterPayment": // Handle the scenario
                    default: // Handle the scenario
                }
            });
        }
    </script>
</html>
```

## Setup Options

The setup function creates and initializes the Paysafe Checkout in an overlay. It has the following parameters:
+ The Base64-encoded version of the single-use token API key used to authenticate with the Customer Vault REST API. Note that this key can only be used to generate single-use tokens for use with payments, and has no other API access rights, such as those required for taking payments. Consequently, this key can be exposed publicly in the user's browser.
+ A *setupOptions* object containing the environment to use (Test or Live), the payment amount, currency, and several parameters to show additional features in the payment form.
+ A *resultCallback* function you provide to receive the Paysafe checkout instance, handle successful payment handle (by sending the payment handle to your merchant server), or respond to any errors caused by a failed payment handle creation.
+ An optional *closeCallback* function you provide to handle the customer closing the payment overlay.

The function signature is as follows:
```
paysafe.checkout.setup(apiKey, setupOptions, resultCallback, closeCallback?): void
```

### Setup Function and Objects

|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|apiKey|string|yes||The Base64-encoded version of the single-use token API key used to authenticate with the Customer Vault REST API.|
|[setupOptions](#setupoptions)|object|yes||The config provided by the Merchant for rendering the Checkout.|
|[resultCallback](#resultcallback)|function|yes||The function to be invoked when the payment handle needs to be passed to the merchant, for him to make the payment correspondingly.|
|[closeCallback](#closecallback)|function|optional||The function to be invoked when the user closes the checkout without making a payment.|

<a name="setupoptions"></a>
**setupOptions**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|currency|string|yes|`length=3`<br/>`Regex:[A-Z]`|The currency for the transaction to be processsed. It is a 3 Letter string denoting the currency. eg: CAD, USD, EUR, GBP etc.|
|merchantRefNum|string|yes|`length<=255`|A unique identifier for every transaction from Checkout. eg: Order id, invoice number etc.|
|amount|number|optional|`length=1-9`|The merchant can choose not to pass an amount when the checkout is loaded. In that case, the canEditAmount parameter should be set to true. However before clicking the Pay button, the user would have to enter the desired amount in the Checkout.|
|environment|string|optional|Possible values: LIVE or TEST.|The Environment to be used for making the API calls and loading the checkout. Possible values are TEST and LIVE. If it is not specified, by default, LIVE would be assumed.|
|locale|string|optional|Possible values: en_US|Language locale for the checkout.|
|[billingAddress](#billingaddress)|object|optional||The Billing Address of the customer stored with the merchant. In case the user is a first time user and has no customer profile. The merchant can choose to pass an already existing billingAddress that would be displayed in the checkout as a saved address.|
|singleUseCustomerToken|string|optional||The single use Customer token that the merchant would generate and pass to the checkout. Using this customerId, the saved addresses, and payment details would be fetched in the checkout. If no customerId is passed, the user would not be shown any saved addresses or payment details. More details can be found in this section|
|canEditAmount|boolean|optional|boolean|If true, the user can edit the amount on loading checkout before clicking Pay. If false, the amount is fixed.|
|[customer](#customer)|object|optional||In case the user is a first time user and has no customer profile. The merchant can choose to pass an already existing customer profile that would be passed in the call to create a payment handle.|
|[paymentMethodDetails](#paymentmethoddetails)|object|optional||Required for paysafecash and paysafecard payment types.|

<a name="billingaddress"></a>
**billingAddress**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|nickName|string|yes|`length<=50`|An identifier to identify the type of address. eg: Work or Home.|
|street|string|yes|`length<=50`|The first line of the address.|
|street2|string|yes|`length<=50`|The second line of the address.|
|city|string|yes|`length<=40`|The city name in the address.|
|zip|string|yes|`length<=10`|The zip code of the address.|
|country|string|yes|`length=2`|The country of the address, e.g., US|
|state|string|yes|`length<=40`|The state of the address.|


<a name="customer"></a>
**customer**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|firstName|string|yes||The first Name of the Customer.|
|lastName|string|yes||The last Name of the Customer.|
|[dateOfBirth](#dateofbirth)|object|yes||The date Of Birth of the Customer|
|email|string|yes|Email ID |The email Id of the Customer.|

**QUESTION:** WHAT IS AN EMAIL ID AND WHERE DOES IT COME FROM?

<a name="dateofbirth"></a>
**dateOfBirth**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|year|number|yes|`length=4 min=1900`|This is the year of birth.|
|month|number|yes|`length=2 max=12`|This is the month of birth.|
|day|number|yes|`length=2 max=31`|This is the day of birth.|

<a name="paymentmethoddetails"></a>
**paymentMethodDetails**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|[paysafecard](#paysafecard)|object|optional||Required for paysafecard payment type.|
|[paysafecash](#paysafecash)|object|optional||Required for paysafecash payment type.|

<a name="paysafecard"></a>
**paysafecard**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|consumerId|string|yes|`length<=50`|The merchant consumer ID for paysafecard payments.|

<a name="paysafecash"></a>
**paysafecash**
|Parameter|Type|Required|Validations|Description|
|---------|-------|---------------|-----------|------------------|
|consumerId|string|yes|`length<=50`|The merchant consumer ID for paysafecash payments.|

The Paysafe Checkout is displayed when the configuration provided in *setupOptions* is correctly validated.

<a name="resultcallback"></a>
#### resultCallback

The result callback is invoked when the payment handle is successfully created and becomes in PAYABLE state or when there is an error in the checkout. It also passes in an instance of the Checkout object.

Using the API of the instance, the merchant can invoke additional functionalities to control the checkout.

The signature is as follows:

|Parameter|Type|Required|Description|
|---------|-------|---------------|-----------|
|[instance](#instance)|object|yes|The Paysafe checkout instance.|
|[error](#error)|object|optional|Object containing information for the error. This field is present if payment handle creation fails. The contents of this object are described below.|
|[result](#result)|object|yes|Result containing payment token. The contents of this object are described below.|
|{return}|undefined|false||

<a name="instance"></a>
**instance**
|Parameter|Type|Required|Description|
|---------|-------|---------------|-----------|
|isOpen|function|yes|Checks if the overlay is still open.|
|close|function|yes|Closes the overlay without displaying result from payment.|
|showSuccessScreen|function|yes|Changes checkout layout to success screen.|
|showFailureScreen|function|yes|Changes checkout layout to failure screen.|

<a name="error"></a>
**error**
|Parameter|Type|Required|Description|
|---------|-------|---------------|-----------|
|message|string|yes|Provides an error message that can be displayed to users.|
|detailedMessage|string|yes|Provides a detailed error message that can be logged.|
|correlationId|string|yes|Unique ID that can be provided to the Paysafe Support team as a reference for investigation.|

<a name="result"></a>
**result**
|Parameter|Type|Required|Description|
|---------|-------|---------------|-----------|
|paymentHandleToken|string|yes|The payment handle id to be passed to the Payments API call.|
|paymentMethod|string|yes|The payment method used by the customer.|
|customerOperation|string|yes|The customer Operation for the card. Values: ADD, EDIT or DELETE.|
|amount|number|yes|The amount used to create the payment handle. This is required because, the user might change the the amount in the checkout.|

<a name="closecallback"></a>
#### closeCallback
Invoked when the checkout overlay is closed by the customer. This function has the following signature:

|Parameter|Type|Required|Description|
|---------|-------|---------------|-----------|
|stage|string|yes|Stage during which the checkout overlay is closed. Possible values are: BeforePayment, DuringPayment, AfterPayment|
|{return}|undefined|false|


### Using Saved Cards and Addresses in Checkout
The checkout can show existing cards and addresses for a user. 
To use this functionality, the merchant needs to use the permanent customer token and invoke a call from the merchant server to fetch a single user customer token. 
This single-use customer token should then be provided to the *setupOptions* while invoking the checkout. In this case, when the checkout is loaded, the user would be able to see their saved payment details.

**Step 1:**
Make call from the merchant server using the customer's customer's permanent profile
token, and generate a single-use customer token, which is valid for 15 minutes.

**QUESTION:**  When SUT section of this API is ready, x-ref from here to that section.

|Endpoint URL                                                   |Description                            |Action |
|---                                                            |---                                    |---    |
|/paymenthub/v1/customers/customer_id/singleusecustomertokens   |Create Single Use Customer Token       |POST   |

**Step 2:**
Take the *singleUseCustomerToken* from the response in step 1 and provide this value in the *options.singleUseCustomerToken* field while invoking the checkout.

```
<html>
    <head>
        <script src="https://adminportal.qa.mtl.paysafecorp.com/checkout/v2/paysafe.checkout.min.js"></script>
    </head>

 
    <body>
        <button onclick="checkout()"> Pay 25$ </button>
    </body>

    <script>
        function checkout() {
            paysafe.checkout.setup("API Key", {
                amount: 25000,
                currency: "USD",
                locale: "en_US",
                merchantRefNum: "10231231311",
                canEditAmount: true,
                environment: "TEST",
                singleUseCustomerToken: "SPFAB1cA5iwdu48H"
            }, function(instance, error, result) {
                if (result && result.paymentHandleToken) {
                    console.log(result.paymentHandleToken);
                    // make AJAX call to Payments API
                } else {
                    console.error(error);
                    // Handle the error
                }
            }, function(stage) {
                switch(stage) {
                    case "BeforePayment": // Handle the scenario
                    case "DuringPayment": // Handle the scenario
                    case "AfterPayment": // Handle the scenario
                    default: // Handle the scenario
                }
            });
        }
    </script>
</html>
```

<a name="paymentswebhooks" title="Payments Webhooks"></a>
# Webhooks

A webhook allows you to define an HTTP callback to which a request will be posted when an event occurs that you want to be notified about. 
To configure webhooks, you need to [open a service request](#openservicerequest) with Paysafe in the Merchant Portal.

> **Note:** In order to receive webhooks from Paysafe, you must create a callback URL to receive the webhook that is triggered. 
You are responsible for ensuring its continued availability.

## Webhooks Events
You can trigger webhooks for the following events: 

|Event Type|Description|
|----------|-----------|
|PAYMENT_HANDLE_INITIATED | Our system has received the payment handle request and is waiting for the downstream processor’s response.|
|PAYMENT_HANDLE_PROCESSING | The payment handle request is waiting for the authentication.|
|PAYMENT_HANDLE_PAYABLE | The payment handle has the status of PAYABLE and can be used for a payments call. |
|PAYMENT_HANDLE_COMPLETED | Payments call associated with payment handle is complete.|
|PAYMENT_HANDLE_FAILED | The payment handle request failed, due to either an error or being declined.|
|PAYMENT_RECEIVED | Our system has received the payment request and is waiting for the downstream processor’s response.|
|PAYMENT_COMPLETED | The payment request has been completed|
|PAYMENT_HELD | The payment request has been placed on hold due to risk considerations.|
|PAYMENT_FAILED | The payment request failed, due to either an error or being declined.|
|PAYMENT_CANCELLED | The payment request has been fully voided (reversed)|
|SETTLEMENT_RECEIVED | Our system has received the settlement request and is waiting for the downstream processor’s response.|
|SETTLEMENT_PENDING | Our system has received the settlement request but it has not yet been batched.|
|SETTLEMENT_PROCESSING | The settlement batch has started.|
|SETTLEMENT_COMPLETED | The settlement request has been completed.|
|SETTLEMENT_FAILED | The settlement request failed, due to either an error or being declined.|
|SETTLEMENT_CANCELLED | The settlement request has been cancelled.|
|REFUND_RECEIVED | Our system has received the refund request and is waiting for the downstream processor’s response.|
|REFUND_COMPLETED | The refund request has been completed.|
|REFUND_PENDING | Our system has received the refund request but it has not yet been batched.|
|REFUND_FAILED | The refund request failed, due to either an error or being declined.|
|REFUND_CANCELLED | The refund request has been cancelled. |
|VOIDAUTH_RECEIVED | Our system has received the void authorization request and is waiting for the downstream processor’s response.|
|VOIDAUTH_COMPLETED | The void authorization request has been completed.|
|VOIDAUTH_PENDING | Our system has received the void authorization request but it has not yet been batched.|
|VOIDAUTH_FAILED | The void authorization request failed, due to either an error or being declined.|
|VOIDAUTH_CANCELLED | The void authorization request has been cancelled.|
|SA_CREDIT_RECEIVED | Our system has received the credit request and is waiting for the downstream processor’s response.|
|SA_CREDIT_COMPLETED | The credit request has been completed.|
|SA_CREDIT_HELD | The credit request has been placed on hold due to risk considerations.|
|SA_CREDIT_FAILED | The credit request failed, due to either an error or being declined.|
|SA_CREDIT_CANCELLED | The credit request has been cancelled.|


## Some Notes on Webhooks

+ When the status of one of your transaction requests changes, Paysafe immediately sends a callback to your webhooks endpoint URL to inform you of the status change.
+ To acknowledge the receipt of a webhook, Paysafe expects to get an HTTP status of 200 from your endpoint. 
In case we receive any other HTTP status code, we will assume that you have not received the webhook and will attempt to resend it at a later time.
+ If the callback for that transaction request status change event fails (i.e., Paysafe does not get an acknowledgment of receipt with an HTTP Status Code of 200), 
Paysafe will make a maximum of 10 additional attempts to send a callback to that URL until successfully received – twice daily for 5 days.
+ Because Paysafe does not have a notification method to alert you when callbacks are not reaching your endpoint URL, you should make sure that there is sustained availability of your endpoint.
+ All endpoint URLs should use HTTPS/SSL to ensure security.

<a name="globalinvalidcharacters" title="Global Invalid Characters"></a>
# Global Invalid Characters

You must not include any of the characters in the following table as values in any of your request parameters. If you do, your request will result in an error.

|    Character    |    HEX    |    Description                     |
|-----------------|-----------|------------------------------------|
| "               | 22        | Double quotes (or speech marks)    |
| ;               | 3B        | Semicolon                          |
| ^               | 5E        | Caret, circumflex                  |
| *               | 2A        | Asterisk                           |
| <               | 3C        | Less than (or open angled bracket) |
| /               | 2F        | Slash or divide                    |
| [               | 5B        | Opening bracket                    |
| ]               | 5D        | Closing bracket                    |
| \               | 5C        | Backslash                          |

<a name="pagination" title="Pagination"></a>
# Pagination

In the case where an API GET request returns multiple results, Paysafe returns the first 10 records by default and uses HATEOAS links to provide page navigation. In addition to the default behavior, it is also possible to control the number of results and starting point by passing in query parameters as follows:

|    Name       | Description   |
|---            |---            |
| limit         | This is the total number of records to return. Max = 50. Default = 10. |
| offset        | This is the starting position, where 0 is the first record. Default = 0. |
| startDate     | This is the start date in UTC. Default = 30 days before the *endDate*.|
| endDate       | This is the end date in UTC. Default = current date and time. |

<a name="testinginstructions" title="Testing Instructions"></a>
# Testing Instructions

The Paysafe Test environment can be used to test websites or applications without running transactions through the Production (live) processing platform. 
Payment transactions processed in the Test environment (e.g., credit card payments) are not sent to the banking network, but through a simulator. 
Depending on the information provided with the transaction request, the simulator returns either a successful (approved) or failed (declined) response.

With the Paysafe Payments API you can test the following:
- Verify support for all the operation types that you require.
- Review all common errors as well as errors that may occur for each operation, and ensure your application can handle them.
- Verify the lengths and format for all attributes you send.

## Applying for a Test Account
For access to Test accounts and credentials, please contact your business relationship manager or reach out to {contact email address}. 
Your Test account will provide you with access to a Test version of the Paysafe Merchant Portal, where you can view the status of your Test transactions. 

## Supported Currencies and Payment Types

## Test Cards

<a name="goinglive" title="Going Live Payments API"></a>
# Going Live
## Test and Production Accounts
Test accounts enable you to process API transactions that mirror the functionality on the Production environment. 
Once you are satisfied with your integration to the Test environment, you will need to repeat any configuration changes made to your Test account on your Production account.

> **Note:** You will need to use [different API endpoints](#urls) and [authentication credentials](#apikey) to connect to each Paysafe environment &ndash; Test and Production.
You will not be able to use your Test credentials to process transaction requests in the Production environment, and vice versa.

<a name="isostandards" title="ISO Standards"></a>
# ISO Standards

<a name="currencycodes" title="Currency Codes"></a>
## Currency Codes

**Note**
 * The table below lists the currencies in which transaction requests are processed, but note that they may be settled in a different currency.
 * Not all currencies are supported by all banks. Contact your account manager for more information about which currencies are supported for your merchant account.

|Currency |Code |
|--- |--- |
|Argentine Peso |ARS |
|Australian Dollar  |AUD |
|Azerbaijanian Manat    |AZN |
|Bahraini Dinar |BHD  |
|Belarusian Ruble   |BYR  |
|Bolivian Boliviano |BOB  |
|Bosnia and Herzegovina Convertible Mark |BAM  |
|Brazilian Real |BRL  |
|Bulgarian Lev  |BGN  |
|Canadian Dollar    |CAD  |
|Chilean Peso   |CLP  |
|China Yuan Renminbi    |CNY  |
|Columbian Peso |COP  |
|Costa Rican Colon  |CRC  |
|Croatian Kuna  |HRK  |
|Czech Koruna   |CZK  |
|Danish Krone   |DKK  |
|Dominican Peso |DOP  |
|East Caribbean Dollar  |XCD  |
|Egyptian Pound |EGP  |
|Ethiopian Birr |ETB  |
|Euro   |EUR  |
|Fiji Dollar    |FJD  |
|Georgian Lari  |GEL  |
|Guatemala Quetzal  |GTQ  |
|Haiti Goude    |HTG  |
|Honduran Lempira   |HNL  |
|Hong Kong Dollar   |HKD  |
|Hungarian Forint   |HUF  |
|Iceland Krona  |ISK  |
|Indian Rupee   |INR  |
|Indonesia Rupiah   |IDR  |
|Iranian Rial   |IRR  |
|Jamaican Dollar    |JMD  |
|Japanese Yen   |JPY  |
|Jordanian Dinar    |JOD  |
|Kazakhstan Tenge   |KZT  |
|Kenyan Shilling    |KES  |
|Korean Won |KRW  |
|Kuwaiti Dinar  |KWD  |
|Latvian Lats   |LVL  |
|Lebanese Pound |LBP  |
|Libyan Dinars  |LYD  |
|Lithuanian Litas   |LTL  |
|Malawi Kwacha  |MWK  |
|Malaysian Ringgit  |MYR  |
|Mauritius Rupee    |MUR  |
|Mexican Peso   |MXN  |
|Moldovan Leu   |MDL  |
|Moroccan Dirham    |MAD  |
|New Israeli Shekel |ILS  |
|New Zealand Dollar |NZD  |
|Nigerian Naira |NGN  |
|Norwegian Krone    |NOK  |
|Omani Rial |OMR  |
|Pakistan Rupee |PKR  |
|Panamanian Balboa  |PAB  |
|Paraguayan Guarani |PYG  |
|Peruvian Sol   |PEN  |
|Philippine Peso    |PHP  |
|Polish Zloty   |PLN  |
|Pound Sterling |GBP  |
|Qatari Rial    |QAR  |
|Romanian New Leu   |RON  |
|Russian Ruble  |RUB  |
|Saudi Arabian Riyal    |SAR  |
|Serbian Dinar  |RSD  |
|Singapore Dollar   |SGD  |
|South African Rand |ZAR  |
|Sri Lanka Rupee    |LKR  |
|Swedish Krona  |SEK  |
|Swiss Franc    |CHF  |
|Syrian Pound   |SYP  |
|Taiwan New Dollar  |TWD  |
|Thai Baht  |THB  |
|Trinidad and Tobago Dollar |TTD  |
|Tunisian Dinar |TND  |
|Turkish Lira   |TRY  |
|Ukranian Hryunia   |UAH  |
|UAE Dirham |AED  |
|Uruguay Peso   |UYU  |
|US Dollar  |USD  |
|Venezuelan Bolivar |VEF  |
|Viet Nam Dong  |VND  |

<a name="provincecodes" title="Province Codes"></a>
## Province Codes

|Province               |Code   |
|---                    |---    |
|Alberta                |AB     |
|British Columbia       |BC     |
|Manitoba               |MB     |
|New Brunswick          |NB     |
|Newfoundland           |NL     |
|Nova Scotia            |NS     |
|Northwest Territories  |NT     |
|Nunavut                |NU     |
|Ontario                |ON     |
|Prince Edward Island   |PE     |
|Quebec                 |QC     |
|Saskatchewan           |SK     |
|Yukon                  |YT     |

<a name="statecodes" title="State Codes"></a>
## State Codes

|State                  |Code   |
|---                    |---    |
|Alabama                |AL     |
|Alaska                 |AK     |
|American Samoa         |AS     |
|Arizona                |AZ     |
|Arkansas               |AR     |
|Armed Forces Americas  |AA     |
|Armed Forces Europe    |AE     |
|Armed Forces Pacific   |AP     |
|California             |CA     |
|Colorado               |CO     |
|Connecticut            |CT     |
|Delaware               |DE     |
|District of Columbia   |DC     |
|Florida                |FL     |
|Georgia                |GA     |
|Guam                   |GU     |
|Hawaii                 |HI     |
|Idaho                  |ID     |
|Illinois               |IL     |
|Indiana                |IN     |
|International          |IT     |
|Iowa                   |IA     |
|Kansas                 |KS     |
|Kentucky               |KY     |
|Louisiana              |LA     |
|Maine                  |ME     |
|Maryland               |MD     |
|Massachusetts          |MA     |
|Michigan               |MI     |
|Minnesota              |MN     |
|Mississippi            |MS     |
|Missouri               |MO     |
|Montana                |MT     |
|Nebraska               |NE     |
|Nevada                 |NV     |
|New Hampshire          |NH     |
|New Jersey             |NJ     |
|New Mexico             |NM     |
|New York               |NY     |
|North Carolina         |NC     |
|North Dakota           |ND     |
|Northern Mariana Is.   |MP     |
|Ohio                   |OH     |
|Oklahoma               |OK     |
|Oregon                 |OR     |
|Palau                  |PW     |
|Pennsylvania           |PA     |
|Puerto Rico            |PR     |
|Rhode Island           |RI     |
|South Carolina         |SC     |
|South Dakota           |SD     |
|Tennessee              |TN     |
|Texas                  |TX     |
|U.S. Virgin Islands    |VI     |
|United States Federal  |US     |
|Utah                   |UT     |
|Vermont                |VT     |
|Virginia               |VA     |
|Washington             |WA     |
|West Virginia          |WV     |
|Wisconsin              |WI     |
|Wyoming                |WY     |


<a name="countrycodes" title="Country Codes"></a>
## Country Codes
| Country                       | Code |
|---                                |---       |
| Afghanistan                       | AF |
| Åland Islands                     | AX |
| Albania                           | AL |
| Algeria                           | DZ |
| American Samoa                    | AS |
| Andorra                           | AD |
| Angola                            | AO |
| Anguilla                          | AI |
| Antarctica                        | AQ |
| Antigua and Barbuda               | AG |
| Argentina                         | AR |
| Armenia                           | AM |
| Aruba                             | AW |
| Australia                         | AU |
| Austria                           | AT |
| Azerbaijan                        | AZ |
| Bahamas                           | BS |
| Bahrain                           | BH |
| Bangladesh                        | BD |
| Barbados                          | BB |
| Belarus                           | BY |
| Belgium                           | BE |
| Belize                            | BZ |
| Benin                             | BJ |
| Bermuda                           | BM |
| Bhutan                            | BT |
| Bolivia                           | BO |
| Bonaire, Sint Eustatius and Saba  | BQ |
| Bosnia and Herzegovina            | BA |
| Botswana                          | BW |
| Bouvet Island                     | BV |
| Brazil                            | BR |
| British Indian Ocean Territory    | IO |
| Brunei Darussalam                 | BN |
| Bulgaria                          | BG |
| Burkina Faso                      | BF |
| Burundi                           | BI |
| Cambodia                          | KH |
| Cameroon                          | CM |
| Canada                            | CA |
| Cape Verde                        | CV |
| Cayman Islands                    | KY |
| Central African Republic          | CF |
| Chad                              | TD |
| Chile                             | CL |
| China                             | CN |
| Christmas Island                  | CX |
| Cocos (Keeling) Islands           | CC |
| Colombia                          | CO |
| Comoros                           | KM |
| Congo                             | CG |
| Congo, Democratic Republic of     | CD |
| Cook Islands                      | CK |
| Costa Rica                        | CR |
| Côte D’Ivoire                     | CI |
| Croatia                           | HR |
| Cuba                              | CU |
| Curaçao                           | CW |
| Cyprus                            | CY |
| Czech Republic                    | CZ |
| Denmark                           | DK |
| Djibouti                          | DJ |
| Dominica                          | DM |
| Dominican Republic                | DO |
| Ecuador                           | EC |
| Egypt                             | EG |
| El Salvador                       | SV |
| Equatorial Guinea                 | GQ |
| Eritrea                           | ER |
| Estonia                           | EE |
| Ethiopia                          | ET |
| Falkland Islands                  | FK |
| Faroe Islands                     | FO |
| Fiji                              | FJ |
| Finland                           | FI |
| France                            | FR |
| French Guiana                     | GF |
| French Polynesia                  | PF |
| French Southern Territories       | TF |
| Gabon                             | GA |
| Gambia                            | GM |
| Georgia                           | GE |
| Germany                           | DE |
| Ghana                             | GH |
| Gibraltar                         | GI |
| Greece                            | GR |
| Greenland                         | GL |
| Grenada                           | GD |
| Guadeloupe                        | GP |
| Guam                              | GU |
| Guatemala                         | GT |
| Guernsey                          | GG |
| Guinea                            | GN |
| Guinea-Bissau                     | GW |
| Guyana                            | GY |
| Haiti                             | HT |
| Heard and McDonald Islands        | HM |
| Honduras                          | HN |
| Hong Kong                         | HK |
| Hungary                           | HU |
| Iceland                           | IS |
| India                             | IN |
| Indonesia                         | ID |
| Iran  (Islamic Republic of)       | IR |
| Iraq                              | IQ |
| Ireland                           | IE |
| Isle of Man                       | IM |
| Israel                            | IL |
| Italy                             | IT |
| Jamaica                           | JM |
| Japan                             | JP |
| Jersey                            | JE |
| Jordan                            | JO |
| Kazakhstan                        | KZ |
| Kenya                             | KE |
| Kiribati                          | KI |
| Korea, Democratic People’s Republic | KP |
| Korea, Republic of                | KR |
| Kuwait                            | KW |
| Kyrgyzstan                        | KG |
| Lao People’s Democratic Republic  | LA |
| Latvia                            | LV |
| Lebanon                           | LB |
| Lesotho                           | LS |
| Liberia                           | LR |
| Libyan Arab Jamahiriya            | LY |
| Liechtenstein                     | LI |
| Lithuania                         | LT |
| Luxembourg                        | LU |
| Macau                             | MO |
| Macedonia                         | MK |
| Madagascar                        | MG |
| Malawi                            | MW |
| Malaysia                          | MY |
| Maldives                          | MV |
| Mali                              | ML |
| Malta                             | MT |
| Marshall Islands                  | MH |
| Martinique                        | MQ |
| Mauritania                        | MR |
| Mauritius                         | MU |
| Mayotte                           | YT |
| Mexico                            | MX |
| Micronesia, Federated States of   | FM |
| Moldova, Republic of              | MD |
| Monaco                            | MC |
| Mongolia                          | MN |
| Montenegro                        | ME |
| Montserrat                        | MS |
| Morocco                           | MA |
| Mozambique                        | MZ |
| Myanmar                           | MM |
| Namibia                           | NA |
| Nauru                             | NR |
| Nepal                             | NP |
| New Caledonia                     | NC |
| New Zealand                       | NZ |
| Nicaragua                         | NI |
| Niger                             | NE |
| Nigeria                           | NG |
| Niue                              | NU |
| Norfolk Island                    | NF |
| Northern Mariana Islands          | MP |
| Norway                            | NO |
| Oman                              | OM |
| Pakistan                          | PK |
| Palau                             | PW |
| Palestinian Territory, Occupied   | PS |
| Panama                            | PA |
| Papua New Guinea                  | PG |
| Paraguay                          | PY |
| Peru                              | PE |
| Philippines                       | PH |
| Pitcairn                          | PN |
| Poland                            | PL |
| Portugal                          | PT |
| Puerto Rico                       | PR |
| Qatar                             | QA |
| Reunion                           | RE |
| Romania                           | RO |
| Russian Federation                | RU |
| Rwanda                            | RW |
| Saint Barthélemy                  | BL |
| Saint Helena                      | SH |
| Saint Kitts and Nevis             | KN |
| Saint Lucia                       | LC |
| Saint Martin                      | MF |
| Saint Vincent and the Grenadines  | VC |
| Samoa                             | WS |
| San Marino                        | SM |
| Sao Tome and Principe             | ST |
| Saudi Arabia                      | SA |
| Senegal                           | SN |
| Serbia                            | RS |
| Seychelles                        | SC |
| Sierra Leone                      | SL |
| Singapore                         | SG |
| Sint Maarten                      | SX |
| Slovakia (Slovak Republic)        | SK |
| Slovenia                          | SI |
| Solomon Islands                   | SB |
| Somalia                           | SO |
| South Africa                      | ZA |
| South Georgia and the South Sandwich Islands | GS |
| South Sudan                       | SS |
| Spain                             | ES |
| Sri Lanka                         | LK |
| St. Pierre and Miquelon           | PM |
| Sudan                             | SD |
| Suriname                          | SR |
| Svalbard and Jan Mayen Islands    | SJ |
| Swaziland                         | SZ |
| Sweden                            | SE |
| Switzerland                       | CH |
| Syrian Arab Republic              | SY |
| Taiwan                            | TW |
| Tajikistan                        | TJ |
| Tanzania, United Republic of      | TZ |
| Thailand                          | TH |
| The Netherlands                   | NL |
| Timor-Leste                       | TL |
| Togo                              | TG |
| Tokelau                           | TK |
| Tonga                             | TO |
| Trinidad and Tobago               | TT |
| Tunisia                           | TN |
| Turkey                            | TR |
| Turkmenistan                      | TM |
| Turks and Caicos Islands          | TC |
| Tuvalu                            | TV |
| Uganda                            | UG |
| Ukraine                           | UA |
| United Arab Emirates              | AE |
| United Kingdom                    | GB |
| United States                     | US |
| United States Minor Outlying Islands | UM |
| Uruguay                           | UY |
| Uzbekistan                        | UZ |
| Vanuatu                           | VU |
| Vatican City State (Holy See)     | VA |
| Venezuela                         | VE |
| Vietnam                           | VN |
| Virgin Islands (British)          | VG |
| Virgin Islands (U.S.)             | VI |
| Wallis and Futuna Islands         | WF |
| Western Sahara                    | EH |
| Yemen                             | YE |
| Zambia                            | ZM |
| Zimbabwe                          | ZW |

# Common Objects

<a name="accorddobject" title="AccordD Object"></a>
## accordD
|Element            |Type                       |Description                        |
|---                |---                        |---       |
|financingType      |enum                       |This is the type of financing offered.<ul><li>DEFERRED_PAYMENT &ndash; Deferred payment financing</li><li>EQUAL_PAYMENT &ndash; Equal payment financing</li></ul>|
|plan               |string<br/>`length<=3`     |This is the plan number for this financing transaction.|
|gracePeriod        |number<br/>`max=99`        |This is the grace period, in months, associated with deferred payment transactions.|
|term               |number<br/>`max=99`        |This is the number of payments, in months, for equal payment transactions.|

```apib
    {
    "accordD":{
        "financingType":"DEFERRED_PAYMENT",
        "plan":"123",
        "gracePeriod":"12"
    }
    }
```

<a name="acquirerdataobject" title="Acquirer Data Object"></a>
## acquirerData

This is additional information about the card acquirer required when you are performing an Original Credit request. This object is required **only when** you are using Credorax (CRX) as your acquirer for Original Credits. Contact your account manager for details.

|Element            |Type                       |Description                        |
|---                |---                        |---       |
|authId             |string<br/>`length<=36`    |This is the ID returned in the response to a previous successful Payment request.|
|code               |string</br>`length<=10`    |This is the code for your card acquirer.|
|externalSubMerchantId |string                  |This is the external merchant ID of the acquirer data.|

```apib
    {
    "acquirerData":{
        "authId":"f06bccd6-de90-4b73-b10f-30266763bc60",
        "code":"CRX"
    }
    }
```

<a name="addressesobject" title="Addresses Object"></a>
## addresses
|Element            |Type                       |Description    |
|---                |---                        |---       |
|id                 |string<br/>`length<=36`    |This is the ID for the request.|
|nickName           |string<br/>`length<=50`    |This is an alias defined by the customer for this address (e.g., "home address").|
|street             |string<br/>`length<=50`    |This is the first line of the customer's street address.|
|street2            |string<br/>`length<=50`    |This is the second line of the customer's street address, if required (e.g., apartment number).|
|city               |string<br/>`length<=40`    |This is the city where the address is located.|
|country            |string<br/>`length=2`      |This is the country where the address is located. See [Country Codes](#countrycodes).|
|state              |string<br/>`length<=40`    |This is the state/province/region in which the customer lives.<br/>For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions. |
|zip                |string<br/>`length<=10`    |This is the zip, postal, or post code of the customer's address.|
|phone              |string<br/>`length<=40`    |This is the phone number to contact the recipient at this address, if it is different from the phone number in the customer.|
|status             |enum                       |This is the status of the address. Possible values are:<ul><li>ACTIVE</li></ul>|
|defaultShippingAddressIndicator|boolean        |Flag to mark this address as the default shipping address.|

```apib
            {
              "nickName":"home",
              "street":"100 Queen Street West",
              "street2":"Unit 201",
              "city":"Toronto",
              "country":"CA",
              "state":"ON",
              "zip":"M5H 2N2",
              "phone":"647-788-3901",
              "defaultShippingAddressIndicator": true
            }
```

<a name="authenticationobject" title="Authentications Object"></a>
## authentication

|Element                |Type                           |Description|
|---                    |---                            |---       |
|id                     |string<br/>`length<=36`        |This is the ID returned in the response. |
|eci                    |number                         |This is the E-Commerce Indicator (ECI). This value will be returned only on payer authentication transactions, or for enrollments where the issuer is non-participating and the card scheme supports it. This value must be appended to the authorization request, where it enables the interchange benefits granted to merchants processing payer Authentication transactions.<br/>**Visa**<br/><ul><li>5 &ndash; Identifies a successfully authenticated transaction.</li><li>6 &ndash; Identifies an attempts authenticated transaction.</li><li>7 &ndash; Identifies a non-authenticated transaction.</li></ul><br/>**Mastercard**<br/><br/><ul><li>1 &ndash; Identifies a non-authenticated transaction.</li><li>2 &ndash; Identifies a successfully authenticated transaction.</li></ul>|
|cavv                   |string<br/>`length<=80`        |This is the Cardholder Authentication Verification Value, indicating that the transaction has been authenticated. This value should be appended to the authorization request signifying that the transaction has been successfully authenticated.|
|xid                    |string<br/>`length<=40`        |This is the transaction identifier returned by the card issuer.|
|status                 |enum                           |This is the status of the Enrollment Lookup request. Possible values are:<br/><ul><li>COMPLETED - The transaction has been completed.</li><li>FAILED - The authentication request failed. Check the error code for details.</li></ul>|
|merchantRefNum         |string<br/>`length<=255`       |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|threeDEnrollment       |enum                           |This indicates whether or not the cardholder is enrolled in 3D Secure. Possible values are:<br/><ul><li>Y &ndash; Cardholder authentication available</li><li>N &ndash; Cardholder not enrolled in authentication</li><li>U &ndash; Cardholder authentication unavailable</li></ul>|
|threeDResult           |enum                           |This indicates the outcome of the Authentication.<br/><ul><li>Y &ndash; The cardholder successfully authenticated with their card issuer.</li><li>A &ndash; The cardholder authentication was attempted.</li><li>N &ndash; The cardholder failed to successfully authenticate with their card issuer.</li><li>U &ndash; Authentication with the card issuer was unavailable.</li><li>E &ndash; An error occurred during authentication.</li></ul>|
|signatureStatus        |enum                           |This is the 3D Secure signature verification result value.<br/><ul><li>Y &ndash; All transaction and signature checks satisfied.</li><li>N &ndash; At least one transaction or signature check failed.</li></ul>|
|error                  |[complex](#errorobject)        |       |

```apib
  {
  "authentication":{
    "eci":5,
    "cavv":"AAABCIEjYgAAAAAAlCNiENiWiV+=",
    "xid":"OU9rcTRCY1VJTFlDWTFESXFtTHU=",
    "threeDEnrollment":"Y",
    "threeDResult":"Y",
    "signatureStatus":"Y"
  }
  }
```


<a name="billingdetailsobject" title="Billing Details Object"></a>
## billingDetails

|Element            |Type                       |Description                        |
|---                |---                        |---       |
|id                 |string<br/>`length<=36`    |This is the ID of the billing address, returned in the response. |
|nickName           |string<br/>`length<=50`    |This is the nickname the merchant has for the billing address. |
|street             |string<br/>`length<=50`    |This is the first line of the customer's street address.|
|street2            |string<br/>`length<=50`    |This is the second line of the customer's street address, if required (e.g., apartment number).|
|city               |string<br/>`length<=40`    |This is the city where the address is located.|
|state              |string<br/>`length<=40`    |This is the state/province/region in which the customer lives.<br/>For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions.|
|zip                |string<br/>`length<=10`    |This is the zip, postal, or post code of the customer's address.|
|country            |string<br/>`length=2`      |This is the country where the address is located. See [Country Codes](#countrycodes).|

```apib
{
    "billingDetails": {
        "nickName": "home",
        "street": "100 Queen Street West",
        "street2": "Unit 201",
        "city": "Toronto",
        "state": "ON",
        "zip": "M5H 2N2",
        "country": "CA"
    }
}
```


<a name="cardobject" title="card Object"></a>
## card

When providing card information, merchants can provide either card details or a payment token for a customer already created in the system.

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|paymentToken       |string <br/>`length<=80`   |If the payment token is provided, no other card information is necessary. |
|cvv                |string<br/>`length=3-4`    |This is the 3- or 4-digit security code that appears on the card following the card number.|

**OR**

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|cardNum            |string <br/>`length=8-20`  |This is the card number used for the request. |
|lastDigits         |string<br/>`length=4`      |This is the last four digits of the card used for the request, returned in the response.|
|cardExpiry         |[cardExpiry](#cardexpiryobject)|This is the card's expiry date.|
|cvv                |string<br/>`length=3-4`    |This is the 3- or 4-digit security code that appears on the card following the card number.|
|merchantDescriptor |[merchantDescriptor](#merchantdescriptorobject) |This is the merchant descriptor that will be displayed on the customer's card or bank statement.<br/>**Note:** Not all processing gateways support this parameter. Contact your account manager for more information.    |
|holderName         |string<br/>`length<=160`   |This is the name of the card holder. |
|status             |enum                       |       |
|nickName           |string<br/>`length<=50`    |This is the nickname the merchant has for the card holder. |
|cardType           |enum                       |This is the type of card used for the request, returned in the response. Possible values are:<br/><ul><li>AM &ndash; American Express</li><li>DI &ndash; Discover</li><li>JC &ndash; JCB</li><li>MC &ndash; Mastercard</li><li>MD &ndash; Maestro</li><li>SO &ndash; Solo</li><li>VI &ndash; Visa</li><li>VD &ndash; Visa Debit</li><li>VE &ndash; Visa Electron</li></ul>
|cardBin            |string<br/>`length=6`      |This is the card BIN (typically the first 6 digits).|

```apib
    {
    "card": {
        "cardNum": "4111111111111111",
        "cardExpiry": {
            "month": 2,
            "year": 2019
        }
    }
    }
```


<a name="cardexpiryobject" title="cardExpiry Object"></a>
## cardExpiry

|Element                 |Type                   |Description|
|---                     |---                    |---|
|month                   |number<br/>`length=2`  |This is the card expiry month. |
|year                    |number<br/>`length=4`  |This is the card expiry year.|

```apib
    {
    "cardExpiry":{
        "month": "12",
        "year": "2020"
    }
    }
```

<a name="customersobject" title="Customer Object"></a>
## customer
|Element            |Type                               |Description    |
|---                |---                                |---            |
|id                 |string <br/>`length<=36`           |This is the ID returned in the response.|
|status             |enum                               |This is the status of the customer. Possible values are:<br/><ul><li>INITIAL</li><li>ACTIVE</li></ul><br/>By default the system automatically sets the customer status to an ACTIVE state. If you want to prevent the customer from being used for payments, you can set the status to an INITIAL state (e.g., in cases where you first want to validate the customer).|
|merchantCustomerId |string <br/>`length<=100`          |This is a customer ID that the merchant provides with the request for their own internal customer identification. This value must be unique for each customer belonging to a merchant.|
|locale             |enum                               |This indicates the language of the customer. Possible values are:<ul><li>en_US</li><li>fr_CA</li><li>en_GB</li></ul>
|firstName          |string <br/>`length<=80`           |This is the customer’s first name. |
|middleName         |string <br/>`length<=80`           |This is the customer’s middle name. |
|lastName           |string <br/>`length<=80`           |This is the customer’s last name. |
|dateOfBirth        |[dateOfBirth](#dateofbirthobject)  |This is the customer's date of birth.|
|ip                 |string<br/>`length<=46`            |This is the customer’s IP address.|
|gender             |enum                               |This is the customer’s gender. Possible values are:<ul><li>M (male)</li><li>F (female)</li></ul>
|nationality        |string<br/>`length<=30`            |This is the customer’s nationality.|
|email              |string<br/>`length<=255`           |This is the customer's email address.|
|phone              |string<br/>`length<=40`            |This is the customer's phone number.|
|cellPhone          |string<br/>`length<=40`            |This is the customer's cell phone number.|
|paymentToken       |string<br/>`length<=50`            |This is a token generated by Paysafe that represents the customer and returned in the response to the customer request.|
|addresses          |[addresses](#addressesobject)      |These are the addresses associated with this customer.|
|card               |[cards](#cardsobject)              |These are the cards associated with this customer.|

```apib
            {
              "merchantCustomerId":"mycustomer1",
              "locale" : "en_US",
              "firstName" : "John",
              "lastName" : "Smith",
              "email" : "john.smith@somedomain.com",
              "phone" : "713-444-5555"
             }
```

<a name="dateofbirthobject" title="Date of Birth Object"></a>
## dateOfBirth
|Element            |Type                           |Description    |
|---                |---                            |---            |
|year               |number<br/>`length=4 min=1900` |This is the year of birth.|
|month              |number<br/>`length=2 max=12`   |This is the month of birth.|
|day                |number<br/>`length=2 max=31`   |This is the day of birth.|

```apib
            { 
               "dateOfBirth": {
                  "year": 1980,
                  "month": 12,
                  "day": 25
                }
            }
```

<a name="errorobject" title="error Object"></a>
## error
|Element            |Type       |Description                        |
|---                |---        |---                                |
|code               |string     |The error code. Also shown in the X-Application-Status-Code response header.            |
|message            |string     |A description of the error.                 |
|details            |array      |Details of any parameter value errors.       |
|fieldErrors        |array      |If applicable, this is a list of fields that have issues.|

```apib
   {
   "error":{  
      "code":"5270",
      "message":"The credentials provided with the request do not have permission to access the data requested.",
      "details":[  
         "access to {stpAccount:1001076700} denied"
      ],
      "fieldErrors":[  
         {  
            "field":"street",
            "error":"Unexpected characters"
         }
      ]
   }
   }
```

<a name="gatewayresponseobject" title= "Gateway Response Object"></a>
## gatewayResponse

This is a read-only raw response returned by an acquirer. 

| Element            | Type   | Description                                                                                         |
|--------------------|--------|-----------------------------------------------------------------------------------------------------|
| code               | string | This is acquirer identification code, such as DJN, CRX, etc.                                        |
| responseCode       | string | This is the raw response returned by the acquirer.                                                  |
| avsCode            | string | This is the raw AVS code returned by the acquirer.                                                  |
| balanceResponse    | string | This is the balance remaining on a gift card, if a gift card was used for the original transaction. |
| mid                | string | This is the acquirer MID that was sent to the clearing house.                                       |
| terminalId         | string | This is the merchant's terminal ID.                                                                 |
| batchNumber        | string | This is the batch number.                                                                           |
| seqNumber          | string | This is the merchant's sequence number.                                                             |
| effectiveDate      | string | This is the date of the bank deposit associated with the transaction.                               |
| financingType      | string | This is the type of financing offered.                                                              |
| plan               | string | This is the plan number for this financing transaction.                                             |
| gracePeriod        | string | This is the grace period, in months, associated with deferred payment transactions.                 |
| term               | string | This is the number of payments, in months, for equal payment transactions.                          |
| responseId         | string | This is the response ID assigned by Credorax.                                                       |
| requestId          | string | This is the request ID assigned by Paysafe.                                                         |
| description        | string | This is a description of the response.                                                              |
| authCode           | string | This is the authorization code.                                                                     |
| txnDateTime        | string | This is the transaction date and time.                                                              |
| referenceNbr       | string | This is the Bank net transaction ID/Merch Tran Ref                                                  |
| responseReasonCode | string | This is the raw response reason code returned by Credorax.                                          |
| cvv2Result         | string | This is the raw cvv2 result code.                                                                   |

<a name="level2level3object" title="level2level3 Object"></a>
## level2level3

Level 2 and Level 3 (L2/L3) credit card processing refers to certain B2B card transactions for which the merchant might be eligible for lower credit card interchange rates. The lower rates may be available for 
merchants who provide more detailed information when processing card-not-present transactions. In order to be eligible for L2/L3 transactions:
 * Your merchant account must be properly configured by Paysafe.
 * The BIN of the credit card used for the transaction must be eligible – typically, these are government-issued credit cards.


|Element                |Type                               | Description|
|---                    |---                                |---            |
| exemptLocalTax        |boolean                            | This indicates whether or not local tax is exempted for the request. If set to true, then the localTaxAmount parameter will be ignored.<br/>**Note:** This value defaults to *false*. |
| localTaxAmount        |integer<br/>`length<=99999999999`  | This is the local sales tax applied to the purchase.|
| nationalTaxAmount     |number<br/>`length<=99999999999`   | This is the national tax included in the transaction amount. |
| freightAmount         |number<br/>`length<=99999999999`   | This is the freight or shipping portion of the total transaction amount. |
| dutyAmount            |number<br/>`length<=99999999999`   | This is the duty associated with the import of the purchased goods. |
| destinationZip        |number<br/>`length<=10`            | This is the postal/zip code of the address to which the purchased goods will be delivered. This field can be identical to the shipFromZip if the customer is present and takes immediate possession of the goods. |
| destinationCountry    |number<br/>`length=2`              | This is the country to which the goods are being shipped. See [Country Codes](#countrycodes). |
| shipFromZip           |number<br/>`length<=10`            | This is the postal/zip code of the address from which the purchased goods are being shipped. |
| lineItems             |[lineItems](#lineitemsobject)      | This is more detailed information about the items that are being purchased.| 

```apib
    {
    "level2Level3": {
        "localTaxAmount": 15000,
        "nationalTaxAmount": 0,
        "freightAmount": 0,
        "dutyAmount": 0,
        "destinationZip": "90210",
        "destinationCountry": "US",
        "shipFromZip": "90210",
        "lineItems": [
            {
                "description": "Disney Cruise Line - Adult",
                "productCode": "DCL-A",
                "quantity": 2,
                "unitAmount": 120000,
                "taxRate": 5,
                "taxAmount": 12000,
                "totalAmount": 252000
            },
            {
                "description": "Disney Cruise Line - Kids",
                "productCode": "DCL-K",
                "quantity": 1,
                "unitAmount": 60000,
                "taxRate": 5,
                "taxAmount": 3000,
                "totalAmount": 63000
            }
        ]
    }
    }
```

<a name="lineitemsobject" title="lineItems Object"></a>
##lineItems

|Element                |Type                               | Description|
|---                    |---                                |---            |
|description            |string<br/>`length<=50`            |This is a description of the item(s) being purchased.|
|productCode            |string<br/>`length<=12`            |This is a merchant-defined description code of the item being purchased.|
|quantity               |number<br/>`length<=99999999999`<br/>`max 4 decimals` |This is the quantity of the item.|
|unitAmount             |number<br/>`length<=99999999999`   |This is the unit price of the item being purchased, in minor units. The currency will be based on the account setting.|
|taxRate                |number<br/>`length<=100`<br/>`max 2 decimals`    |This is the tax rate used to calculate the tax amount. For example, if the tax rate is 10.5%, this value should be 10.5.|
|taxAmount              |number<br/>`length<=99999999999`   |This is the amount of any value-added taxes that can be associated with the purchased item, in minor units. The currency will be based on the account setting. **Note:** Our system will not validate the accuracy of this value. The merchant's application must calculate this value correctly.|
|totalAmount            |number<br/>`length<=99999999999`   |This is the total amount of the line item, typically calculated as price multiplied by quantity, in minor units. The currency will be based on the account setting. **Note:** Our system will not validate the accuracy of this value. The merchant's application must calculate this value correctly.|

```apib
    {
    "lineItems": {
        "description": "Disney Cruise Line",
        "productCode": "DCL",
        "quantity": 4,
        "unitAmount": 120000,
        "taxRate": 5,
        "taxAmount": 24000,
        "totalAmount": 504000
    }
    }
```

<a name="merchantdescriptorobject" title="merchantDescriptor Object"></a>
## merchantDescriptor
|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|dynamicDescriptor  |string <br/>`length<=20`   |This is a merchant descriptor that will be displayed on a customer’s card statement.|
|phone              |string <br/>`length<=13`   |This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s card statement.|

```apib
    {
    "merchantDescriptor":{
        "dynamicDescriptor":"OnlineStore",
        "phone":"12345678"
  }
  }
```

<a name="metadataobject" title="metadata Object"></a>
## metadata

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|key                |string <br/>`length<=50`   |This is a description of the data being added to the order.|
|value              |string <br/>`length<=100`  |This is the value for the key/value pair.|

<a name="originalcreditsobject" title="originalcredits Object"></a>
## originalcredits

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|paymentHandleToken |string<br/>`length<=36`                |This is the payment token generated by Paysafe that will be used by merchants for Original Credit requests.|
|currencyCode       |string<br/>`length=3`                  |This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes)|
|card               |[card](#cardobject)                    |These are the details of the card used.|
|billingDetails     |[billingDetails](#billingdetailsobject)|These are the billing details for the request.|
|customerIp         |string<br/>`length<=39`                |This is the customer's IP address.|
|description        |string<br/>`length<=255`               |This is a description of the transaction, provided by the merchant.|

```apib
{
  "merchantRefNum":"merchant ABC-444",
  "amount":10098,
  "paymentHandleToken": "SC9mbfZSITB5OwDJ",
  "currencyCode": "GBP",
  "customerIp":"204.91.0.12",
  "description":"Winning payment from Loto"
}    
```

<a name="partialauthobject" title="partialAuth Object"></a>
## partialAuth

This is an authorization that is approved for an amount lower than the requested amount. The remainder of the amount could be paid by other means.|

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|requested          |boolean                    |This specifies whether or not a partial authorization was requested. |
|amountDue          |number<br/>`max=99999999999` |This is the amount of the full authorization that is not covered by the Payment request. |
|originalAmount     |number<br/>`max=99999999999` |This is the actual amount of the full authorization. |

```apib
{
    "partialAuth": {
        "requested": "true",
        "amountDue": "1000",
        "originalAmount": "2000"
    }
}
```


<a name="paymenthandleobject" title="Payment Handle Object"></a>
## Payment Handle

|Element                |Type                       |Description                        |
|---                    |---                        |---       |
|id                     |string<br/>`length<=32`    |This is the ID returned in the response. This ID can be used to retrieve the Payment Handle.|
|paymentHandleTokenFrom |string<br/>`length<=36`    |This is the existing Payment Handle ID, from which the payment instrument and profile details are retrieved. |
|merchantRefNum         |string<br/>`length<=255`   |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request. |
|transactionType        |enum                       |This specifies the transaction type for which the Payment Handle is created. Possible values are: <ul><li>PAYMENT</li><li> STANDALONE_CREDIT</li><li>ORIGINAL_CREDIT</li><li>VERIFICATION</li></ul>|
|status                 |enum                       |This is the status of the request. Possible values are:<ul><li>INITIATED &ndash; The request was initiated with the downstream provider.</li><li>PAYABLE &ndash; The merchant can use the Payment Handle for a Payment request.</li><li>PROCESSING &ndash; The Payment Handle was authorized by customer, awaiting PSP response.</li><li>FAILED &ndash; The transaction failed due to either an error or being declined.</li><li>EXPIRED &ndash; The Payment Handle expired because the merchant did not proceed with the Payment transaction.</li><li>COMPLETED &ndash; The Payment request was initiated successfully using the Payment Handle.</li></ul>      |
|usage                  |enum                       |This specifies how the Payment Handle will be used for Payments. Possible values are:<ul><li>SINGLE_USE &ndash; The Payment Handle can be used for one transaction only and expires if not used.</li><li>MULTI_USE &ndash; The Payment Handle can be used multiple times.</li></ul>|
|paymentType            |enum                       |This is the payment type associated with this Payment Handle. Possible values are:<ul><li>CARD</li><li>PAYSAFECASH</li><li>PAYSAFECARD</li></ul>|
|action                 |enum                       |This specifies the next step of the user journey once they proceed to the Payment. Possible values are:<ul><li>NONE &ndash; No action is required, e.g., for a standard credit card payment.</li><li>REDIRECT &ndash; The user must be redirected in order to complete a Payment, e.g., when an alternate payment method like Paysafecard is used.</li></ul>|
|executionMode          |enum                       |This specifies the action of the merchant server in order to complete the Payment. Possible values are:<ul><li>SYNCHRONOUS &ndash; The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.</li><li>ASYNCHRONOUS &ndash; The Payment request is not completed immediately and the merchant [must rely on webhooks](#paymentswebhooks) to retrieve the status of the Payment request.</li></ul>|
|amount                 |number<br/>`max=99999999999` |This is the amount of the request, in minor units.<br/>Note: This field is mandatory if *transactionType* is included. |
|currencyCode           |string<br/>`length=3`      |This is the currency of the merchant account, e.g., USD or CAD. See [Currency Codes](#currencycodes)|
|paymentHandleToken     |string                     |This is the payment token generated by Paysafe that will be used by merchants for Payment API requests.|
|card \| paysafecard \| paysafecash               | [card](#cardobject) \| [paysafecard](#paysafecardobject)\ | [paysafecash](#paysafecashobject)        |These are details of the payment instrument used in the request. |
|billingDetails         |[billingDetails](#billingdetailsobject)         |These are billing details for the request.|
|profile                |[profile](#profileobject)  |This is the customer's profile. |
|returnLinks            |[returnLinks](#returnlinksobject)         |These are links to which to redirect the customer, where applicable. |
|customerIp             |string<br/>`length<=39`    |This is the customer's IP address. |
|timeToLiveSeconds      |number<br/>`length<=899`   |This is the period of time, in seconds, the *paymentHandleToken* is valid before expiration.|

```apib
{
    "merchantRefNum": "merchantRefNum-101",
    "transactionType": "PAYMENT",
    "card": {
        "cardNum": "5191330000004415",
        "cardExpiry": {
            "month": 10,
            "year": 2021
        },
        "cvv": "111",
        "holderName": "Chad"
    },
    "paymentType": "CARD",
    "amount": 190,
    "currencyCode": "GBP",
    "customerIp": "172.0.0.1",
    "billingDetails": {
        "nickName": "Home",
        "street": "100 Queen",
        "street2": "Unit 201",
        "city": "Toronto",
        "zip": "M5H 2N2",
        "country": "CA"
    },
    "returnLinks": [{
            "rel": "on_completed",
            "href": "https://US_commerce_site/payment/return/success",
            "method": "GET"
        },
        {
            "rel": "on_failed",
            "href": "https://US_commerce_site/payment/return/failed",
            "method": "GET"
        }
    ]
}
```

<a name="paymentsobject" title="Payments Object"></a>
## Payments

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.|
|dupCheck           |boolean                                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|settleWithAuth     |boolean                                |This indicates whether the request is an Authorization only (no Settlement), or a Purchase (Authorization and Settlement).<br/><ul><li>false &ndash; The request is not settled</li><li>true &ndash; The request is settled</li></ul><br/>**Note:** Defaults to *true*.|
|preAuth            |boolean                                |This indicates whether the Authorization request should be sent as a Pre-Authorization.<br/>**Note:** You should use the *preAuth* element in cases where you are not sure that you can fully settle the Authorization within 4 days. Contact your account manager for more information.|
|partialAuth        |[partialAuth](#partialauthobject)      |This is an authorization that is approved for an amount lower than the requested amount. The remainder of the amount could be paid by other means.|
|paymentHandleToken |string<br/>`length<=36`                |This is the Payment Handle token that represents the payment instrument to be used in the Payment request. |
|authCode           |string<br/>`length<=50`                |This is the Authorization code assigned by the issuing bank and returned in the response.|
|availableToSettle  |number                                 |This is the amount of of the Authorization remaining to settle, in minor units.|
|childAccountNum    |string<br/>`length<=10`                |This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|customerIp         |string<br/>`length<=39`                |This is the customer's IP address.|
|description        |string<br/>`length<=255`               |This is a description of the transaction, provided by the merchant.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2019-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>HELD &ndash; The transaction has been placed on hold due to risk considerations.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li><li>PENDING &ndash; The request is pending.</li></ul>|
|currencyCode       |string<br/>`length=3`                  |This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes)|
|level2level3       |[level2level3](#level2level3object)    |This allows merchants who are enabled to provide additional L2/L3 transaction data.<br/>**Note:** Not all processing gateways support this parameter. Contact your account manager for more information.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) | This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|
|accordD            |[accordD](#accorddobject)              |These are parameters for financing plans supported for certain merchant configurations.<br/>Include this element **only when** instructed to do so by your account manager.|
|recipient          |[recipient](#recipientobject)          |In certain cases, this allows additional data to be included with a Payment request. |
|riskReasonCode     |array                                  |An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|splitpay           |[splitpay](#splitpayobject)            |This enables you to use the Split Payouts functionality when authorizing with a Settlement.|
|storedCredentialDetails |[storedCredentialDetails](#storedcredentialobject) | This object is used to identify requests that use stored credentials that the merchant has on file for the consumer, in order to improve authorization rates and reduce fraud. |
|settlements        |array                                  |This is a read-only list of all Settlements. This will be returned only if *settleWithAuth* = *true* in the request. |
|error              |[error](#errorobject)                  |       |
|statusReason       |string<br/>`length<=255`               |This is reason for the status. This is present in the case where *status* is ERROR, FAILURE, or HELD. |
|authentication     |[authentication](#authenticationobject)|These are 3D Secure details.|

```apib
{
    "merchantRefNum": "merchantRefNum-108",
    "amount": 190,
    "currencyCode": "GBP",
    "dupCheck": true,
    "settleWithAuth": false,
    "paymentHandleToken": "SCZJg09GWSv36NLB",
    "customerIp": "10.10.12.64",
    "description": "Gaming Request"
}
```

<a name="paysafecardobject" title="paysafecard Object"></a>
## paysafecard

|Element                        |Type                   |Description|
|---                            |---                    |---|
|consumerId                     |string                 |This is the merchant's unique identifier of the customer. For security purposes, if any personal data is used (e.g., customer's user name, email address, etc.), it has to be encrypted or hashed.|
|ageRestriction                 |number                 |This is the minimum age restriction for the transaction.|
|kycLevelRestriction            |string                 |This is the KYC level that will be required for the transaction. Options:<ul><li>FULL</li><li>SIMPLE</li></ul>|
|countryRestriction             |string<br>`length=2`   |This is the ISO 3166-1 alpha-2 code of the country to which the transaction will be restricted.|

```
"paysafecard": {
    "consumerId": "merchantclientid",
    "minAgeRestriction": 18,
    "kycLevelRestriction": "SIMPLE",
    "countryRestriction": "DE"
}
```

<a name="paysafecashobject" title="paysafecash Object"></a>
## paysafecash

|Element                        |Type                   |Description|
|---                            |---                    |---|
|consumerId                     |string                 |This is the merchant's unique identifier of the customer. For security purposes, if any personal data is used (e.g., customer's user name, email address, etc.), it has to be encrypted or hashed.|
|ageRestriction                 |number                 |This is the minimum age restriction for the transaction.|
|kycLevelRestriction            |string                 |This is the KYC level that will be required for the transaction. Options:<ul><li>FULL</li><li>SIMPLE</li></ul>|
|countryRestriction             |string<br>`length=2`   |This is the ISO 3166-1 alpha-2 code of the country to which the transaction will be restricted.|

```
"paysafecash": {
    "consumerId": "merchantclientid",
    "minAgeRestriction": 18,
    "kycLevelRestriction": "SIMPLE",
    "countryRestriction": "DE"
}
```

<a name="profileobject" title="Profile Object"></a>
## profile

|Element            |Type                               |Description    |
|---                |---                                |---            |
|id                 |string <br/>`length<=36`           |This is the ID returned in the response.|
|status             |enum                               |This is the status of the customer profile. Possible values are:<br/><ul><li>ACTIVE &ndash; The temporary profile ID can be used to retrieve the saved payment instrument.</li></ul> |
|merchantCustomerId |string <br/>`length<=100`          |This is a customer ID that the merchant provides with the request for their own internal customer identification.|
|locale             |enum                               |This indicates the language of the profile. Possible values are:<ul><li>en_US</li><li>fr_CA</li><li>en_GB</li></ul>|
|firstName          |string <br/>`length<=80`           |This is the customer’s first name. |
|lastName           |string <br/>`length<=80`           |This is the customer’s last name. |
|email              |string<br/>`length<=255`           |This is the customer's email address.|
|phone              |string<br/>`length<=40`            |This is the customer's phone number.|
|dateOfBirth        |[dateOfBirth](#dateofbirthobject)  |These are the addresses associated with saved payment instruments for the customer. |

```apib
            {
              "merchantCustomerId":"mycustomer10",
              "locale" : "en_US",
              "firstName" : "John",
              "lastName" : "Smith",
              "email" : "john.smith@somedomain.com",
              "phone" : "713-444-5555"
             }
```

<a name="recipientobject" title="recipient Object"></a>
## recipient 

The recipient is deemed to be the person or party who has the contractual relationship with the merchant/financial institution. This may be different from the cardholder, e.g., in the case of a parent topping up a child's savings account. Therefore, the fields should not be collected on the same page as cardholder information, but instead be passed in the background from the merchant’s records.

**Note:** You can include *recipient* elements in your [authorization request](#authrequest) **only if** your Merchant Category Code is **6012** and your registered trading address is in the United Kingdom. All fields are optional. However, scheme fines may apply if data is consistently not supplied and chargebacks persist. If you have any questions, contact your account manager.
If you are using a payment token for an Authorization request and there is already recipient data for the consumer profile associated with the payment token, then if you include the *recipient* object in the Authorization, this data will override the recipient data already in the profile.

If you [look up an authorization request](#getauth)  that used the *visaAdditionalAuthData* parameter (now deprecated), the response will contain the relevant data in both the *recipient* and the *visaAdditionalAuthData* objects.

|Element                    |Type                       |Description                        |
|---                        |---                        |---                                |
|dateOfBirth                |[dateOfBirth](#dateofbirthobject) |This is the recipient's date of birth. |
|zip                        |string<br/>`length<=10`    |This is the recipient's postcode.<br/>**Note:** The last 3 characters are not sent to the banking network.|
|lastName                   |string<br/>`length<=255`   |This is the recipient's last name.<br/>**Note:** Only the first 6 characters are sent to the banking network.|
|accountNumber              |string<br/>`length<=25`    |This is the recipient's account number, e.g., a loan agreement number or customer ID. In the case where the recipient account is a prepaid card, the card number may be sent in full.<br/>**Note:** Only the first 6 and last 4 characters are sent to the banking network and will be masked accordingly within the back office and any other reports, to comply with PCI regulations.|

```apib
    {
    "recipient": {
        "dateOfBirth": {
            "day": 29,
            "month": 1,
            "year": 2001
        },
        "zip": "CB24 9AD",
        "lastName": "Smith",
        "accountNumber": "ABC1234567890"
    }
    }
```

<a name="refundsobject" title="refunds Object"></a>
## refunds
|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br>`max=99999999999`            |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit. Therefore, a transaction of 10.139 Tunisian dinar would be processed as 10.14.|
|dupCheck           |boolean                                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|childAccountNum    |string<br/>`length<=10`                |This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2014-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>PENDING &ndash; Our system has received the request but it has not yet been batched.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li></ul>|
|error              |[error](#errorobject)                  |       |
|splitpay           |[splitpay](#splitpayobject)            |This enables you to use the Split Payouts functionality when processing a Refund.|
|riskReasonCode     |array                                  |An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) | This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|

```apib
{
    "merchantRefNum":"refund_id:1231",
    "amount":10098
}
```

<a name="returnlinksobject" title="returnLinks Object"></a>
## returnLinks

|Element    |Type           |Description|
|---        |---            |---|
|rel        |enum           |This is the link type that allows different endpoints to be targeted depending on the end state of the transaction. Possible values are:<ul><li>default - The default return URL that will be used if specific status return URL is not defined.</li><li>on_completed - Will be returned to this URL if the payment is completed.</li><li>on_failed - Will be returned to this URL if the payment fails.</li></ul>|
|href       |string         |This is the URI of the resource.|
|method     |string         |This is the HTTP method. |

```apib
{
    "returnLinks": [{
            "rel": "on_completed",
            "href": "https://US_commerce_site/payment/return/success",
            "method": "GET"
        },
        {
            "rel": "on_failed",
            "href": "https://US_commerce_site/payment/return/failed",
            "method": "GET"
        }
    ]
}
```

<a name="settlementsobject" title="settlements Object"></a>
## settlements
|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units.For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit. Therefore, a transaction of 10.139 Tunisian dinar would be processed as 10.14.|
|dupCheck           |boolean                                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|availableToRefund  |number<br/>`max=99999999999`           |This is the amount of this Settlement that is available to Refund, in minor units. For example, US $10.99 would be 1099.|
|childAccountNum    |string<br/>`length<=10`                |This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2014-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>PENDING &ndash; Our system has received the request but it has not yet been batched.</li><li>PROCESSING &ndash; The Settlement batch has started.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The transaction request has been cancelled.</li></ul>|
|error              |[error](#errorobject)                  |       |
|splitpay           |[splitpay](#splitpayobject)            |This enables you to use the Split Payouts functionality when settleing an Authorization.|
|riskReasonCode     |array                                  |An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) | This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|


```apib
{
    "merchantRefNum":"merchantRef_2019_04_11_05",
    "amount":100
}
```

<a name="splitpayobject" title="splitpay Object"></a>
## splitpay

|Element            |Type    |Required |Description |
|---                |---     |---      |---        |
|linkedAccount      |string  |Yes      |This is the ID of the linked account.
|amount             |number  |         |This is the amount to transfer to the linked account in minor currency units. The total amount to all linked accounts cannot exceed the transaction total. Either this or percent must be specified.|
|percent            |number  |         |This is the percentage of the total transaction amount to transfer to the linked account, to two decimal places. The total percentage to all linked accounts cannot exceed 100%. Either this or amount must be specified.|

```apib
  {
  "splitpay": [
    {
    "linkedAccount": "123124124",
    "percent": 5
    },
    {
    "linkedAccount": "767862873",
    "amount": 500
    }]
  }
```

<a name="standalonecreditsobject" title="standalonecredits Object"></a>
## standalonecredits

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|paymentHandleToken |string                                 |This is the payment token generated by Paysafe that will be used by merchants for Standalone Credit requests.|
|currencyCode       |string<br/>`length=3`                  |This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes)|
|card               |[card](#cardobject)                    |These are the details of the card used.|
|billingDetails     |[billingDetails](#billingdetailsobject)|These are the billing details for the request.|
|customerIp         |string<br/>`length<=39`                |This is the customer's IP address.|
|description        |string<br/>`length<=255`               |This is a description of the transaction, provided by the merchant.|

```apib
{
  "merchantRefNum":"merchant ABC-444",
  "amount":10098,
  "paymentHandleToken": "SC9mbfZSITB5OwDJ",
  "currencyCode": "GBP",
  "customerIp":"204.91.0.12",
  "description":"Winning payment from Loto"
}    
```

<a name="storedcredentialobject" title="storedCredential Object"></a>
## storedCredential

The *storedCredential* object is used to identify [authorization requests](#authrequest) that use stored credentials for a consumer, in order to improve authorization rates and reduce fraud. Stored credentials can be used in two cases: 
 - Using a payment token &ndash; An authorization request that uses a *paymentToken* from the [Customer Vault API](https://developer.paysafe.com/en/vault/api/)
 - Using a card number &ndash; An authorization request that uses a credit card number stored by the merchant 

**Notes:** 
 - If you use a *paymentToken* in the authorization request but do not include the *storedCredential* object, Paysafe will provide default information taken from Customer Vault data.
 - You cannot include both the *storedCredential* object and the *recurring* parameter in the same authorization request. Paysafe recommends using the *storedCredential* object.
 - The *cvv* parameter of the [card object](#cardobject) is required when the *occurrence* parameter is set to *INITIAL*. However, *cvv* is not required when the *occurrence* parameter is set to *SUBSEQUENT*.
 - The *storedCredential* object cannot be used for Apple Pay or Google Pay transactions.

|Element                 |Type                   |Description|
|---                     |---                    |---|
|type                    |enum                   |This specifies the type of request being made. Possible values are: <ul><li>ADHOC &ndash; Ad hoc consumer-initiated request</li><li>TOPUP &ndash; Unscheduled merchant-iniitated request when a consumer balance is below a set limit </li><li>RECURRING &ndash; Scheduled, merchant-initiated recurring request</li></ul><br/>**Note:** This value defaults to *ADHOC*.|
|occurrence              |enum                   |This specifies whether this stored credential request is initial or recurring. Possible values are: <ul><li>INITIAL &ndash; Used when this is the first time the consumer uses this credit card</li><li>SUBSEQUENT &ndash; Used when the consumer uses this credit card for subsquent requests </li></ul><br/>**Note:** This value defaults to *INITIAL*.|

```apib
{
    "storedCredential": {
        "type": "RECURRING",
        "occurrence": "SUBSEQUENT"
    }
}
```

<a name="voidauthsobject" title="Void Authorizations Object"></a>
## Void Authorizations

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2019-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>HELD &ndash; The transaction has been placed on hold due to risk considerations.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li><li>PENDING &ndash; The request is pending.</li></ul>|


# Error Summary

## Common Errors
|HTTP Status Code|Error Code|Description|
|---------|---------|---------------|
|500|1000|An internal error occurred.|
|502|1001|An error occurred with the external processing gateway.|
|500|1002|An internal error occurred.|
|500|1003|An internal error occurred.|
|500|1007|An internal error occurred.|
|500|1008|An internal error occurred.|
|429|1200|The API call has been denied as it has exceeded the permissible call rate limit.|
|401|5000|Your merchant account authentication failed. Either your store ID/password are invalid or the IP address from which you are sending the transaction has not been authorized.|
|400|5001|The submitted currency code is invalid or your account does not support this currency.|
|400|5003|You submitted an invalid amount with your request.|
|400|5004|You submitted an invalid account type with your request.|
|400|5005|You submitted an invalid operation type with your request.|
|400|5010|The submitted country code is invalid.|
|400|5016|The merchant account you provided cannot be found.|
|400|5017|The merchant account you provided is disabled.|
|402|5021|Your transaction request has been declined.|
|400|5023|The request is not parseable.|
|409|5031|The transaction you have submitted has already been processed.|
|401|5040|Your merchant account is not configured for the transaction you attempted.|
|400|5042|The merchant reference number is missing or invalid or it exceeds the maximum permissible length.|
|400|5068|Either you submitted a request that is missing a mandatory field or the value of a field does not match the format expected.|
|404|5269|The ID(s) specified in the URL do not correspond to the values in the system.|
|403|5270|The credentials provided with the request do not have permission to access the requested data.|
|406|5271|You requested a response in the 'Accept' header that is in an unsupported format.|
|406|5272|The 'Content-Type' you specified in request header was submitted in an unsupported format.|
|404|5273|Your client reached our application but we were unable to service your request due to an invalid URL.|
|401|5275|The authentication credentials provided with the request have expired.|
|401|5276|The authentication credentials provided with the request provided have been disabled.|
|401|5277|The authentication credentials provided with the request have been locked due to multiple authentication failures.|
|401|5278|The authentication credentials provided with the request were not accepted for an unknown reason.|
|401|5279|The authentication credentials are invalid.|
|401|5280|The required authentication credentials were not provided.|
|405|5281|The request uses an action (e.g., GET, POST, or PUT) that is not supported by the resource.|
|400|5283|The requested operation can only be executed on a Payment Handle with the status of *PAYABLE*.|
|400|5501|The profile does not have an active credit card.|
|400|5502|Either the payment token is invalid or the corresponding profile or bank account is not active.|

## Payment Errors
|HTTP Status Code|Error Code|Description|
|---------|---------|---------------|
|400|3002|You submitted an invalid card number or brand or combination of card number and brand with your request.|
|400|3004|The zip/postal code must be provided for an AVS check request.|
|400|3005|You submitted an incorrect CVV value with your request.|
|400|3006|You submitted an expired credit card number with your request.|
|402|3007|Your request has failed the AVS check. Note that the amount has still been reserved on the customer's card and will be released in 3–5 business days. Please ensure the billing address is accurate before retrying the transaction.|
|400|3008|You submitted a card type for which the merchant account is not configured.|
|402|3009|Your request has been declined by the issuing bank.|
|402|3011|Your request has been declined by the issuing bank because the card used is a restricted card. Contact the cardholder's credit card company for further investigation.|
|402|3012|Your request has been declined by the issuing bank because the credit card expiry date submitted is invalid.|
|402|3013|Your request has been declined by the issuing bank due to problems with the credit card account.|
|402|3014|Your request has been declined - the issuing bank has returned an unknown response. Contact the card holder's credit card company for further investigation.|
|402|3015|The bank has requested that you process the transaction manually by calling the cardholder's credit card company.|
|402|3016|The bank has requested that you retrieve the card from the cardholder – it may be a lost or stolen card.|
|402|3017|You submitted an invalid credit card number with your request.|
|402|3018|The bank has requested that you retry the transaction.|
|402|3019|Your request has failed the CVV check. Please note that the amount may still have been reserved on the customer's card, in which case it will be released in 3–5 business days.|
|402|3020|The bank has requested that you retry the transaction.|
|404|3021|The confirmation number included in this request could not be found.|
|402|3022|The card has been declined due to insufficient funds.|
|402|3023|Your request has been declined by the issuing bank due to its proprietary card activity regulations.|
|402|3024|Your request has been declined because the issuing bank does not permit the transaction for this card.|
|400|3025|The external processing gateway has reported invalid data.|
|400|3026|The external processing gateway has reported the account type is invalid.|
|402|3027|The external processing gateway has reported a limit has been exceeded.|
|502|3028|The external processing gateway has reported a system error.|
|402|3029|The external processing gateway has rejected the transaction.|
|402|3030|The external processing gateway has reported the transaction is unauthorized.|
|400|3031|The confirmation number you submitted with your request references a transaction that is not on hold.|
|402|3032|Your request has been declined by the issuing bank or external gateway because the card is probably in one of their negative databases.|
|402|3035|Your request has been declined due to exceeded PIN attempts.|
|402|3036|Your request has been declined due to an invalid issuer.|
|402|3037|Your request has been declined because it is invalid.|
|402|3038|Your request has been declined due to customer cancellation.|
|402|3039|Your request has been declined due to an invalid authentication value.|
|402|3040|Your request has been declined because the request type is not permitted on the card.|
|402|3041|Your request has been declined due to a timeout.|
|402|3042|Your request has been declined due to a cryptographic error.|
|402|3044|You have submitted a duplicate request.|
|402|3045|You submitted an invalid date format for this request.|
|402|3046|The transaction was declined because the amount was set to zero.|
|402|3047|The transaction was declined because the amount exceeds the floor limit.|
|402|3048|The transaction was declined because the amount is less than the floor limit.|
|402|3049|The bank has requested that you retrieve the card from the cardholder – the credit card has expired.|
|402|3050|The bank has requested that you retrieve the card from the cardholder – fraudulent activity is suspected.|
|402|3051|The bank has requested that you retrieve the card from the cardholder – contact the acquirer for more information.|
|402|3052|The bank has requested that you retrieve the card from the cardholder – the credit card is restricted.|
|402|3053|The bank has requested that you retrieve the card from the cardholder – please call the acquirer.|
|402|3054|The transaction was declined due to suspected fraud.|
|402|3055|This type of transaction is not supported.|
|402|3056|The original transaction type does not match.|
|402|3057|Please tell cardholder to call the issuer – do not retry transaction.|

## Void Authorization Errors
|HTTP Status Code|Error Code|Description|
|---------|---------|---------------|
|400|3500|The confirmation number included in this request could not be found.|
|402|3501|The requested void (Authorization Reversal) amount exceeds the remaining Authorization amount.|
|402|3502|You cannot process a void (Authorization Reversal) transaction against an Authorization that has been settled.|
|402|3503|The void (Authorization Reversal) transaction is not supported for the card type used for the Authorization you are attempting to void.|
|402|3504|The external processing gateway for which your merchant account is configured does not support partial voids (Authorization Reversals).|
|500|3505|The void (Authorization Reversal) could not be completed.|
|402|3506|The void (Authorization Reversal) amount exceeds the remaining amount of the Authorization.|

## Settlement Errors
|HTTP Status Code|Error Code|Description|
|---------|---------|---------------|
|400|3200|You have submitted an invalidly formatted Authorization ID for this Settlement.|
|404|3201|The Authorization ID included in this Settlement request could not be found.|
|402|3202|You have exceeded the maximum number of Settlements allowed.|
|402|3203|The Authorization is either fully settled or cancelled.|
|402|3204|The requested Settlement amount exceeds the remaining Authorization amount.|
|402|3205|The Authorization you are attempting to settle has expired.|
|402|3206|The external processing gateway has rejected the transaction.|
|402|3207|Due to issuer policies, this type of transaction is not allowed.|

## Refund Errors
|HTTP Status Code|Error Code|Description|
|---------|---------|---------------|
|402|3402|The requested Refund amount exceeds the remaining Settlement amount.|
|402|3403|You have already processed the maximum number of refunds allowed for this Settlement.|
|402|3404|The Settlement has already been fully refunded.|
|402|3405|The Settlement you are attempting to Refund has expired.|
|402|3406|The Settlement you are attempting to Refund has not been batched yet. There are no settled funds available to Refund.|
|400|3407|The Settlement referred to by the transaction response ID you provided cannot be found.|
|400|3408|You have submitted an invalidly formatted response ID for the original Purchase or Settlement.|
|402|3412|The Refund transaction you attempted was not permitted because your merchant account is in overdraft.|
|402|3413|The requested Refund amount exceeds the permissible Visa credit ratio.|
|400|3414|The Refund referred to by the transaction response ID you provided cannot be found.|
|402|3415|You cannot cancel this transaction as it is no longer in a pending state.|
|402|3416|The external processing gateway for which your merchant account is configured does not support partial Settlements.|
|402|3417|There is already another request being processed on the transaction referenced for this request.|
|402|3418|The external processing gateway for which your merchant account is configured does not support partial Credits.|
|402|3419|This type of transaction cannot be refunded.|

# Getting Help

<a name="openservicerequest" title="Opening a Service Request"></a>
## Opening a Service Request

 * How to open service requests in Merchant Portal
 * Adding new payment method
 * Setting up webhooks

# Using the Example API Calls (Console Window)

To configure and test the API examples, first click on one of the API calls in the API Reference section and then click **Switch to Console** in the right-hand pane. 
Using the Console window you can update the headers, the request body, and parts of the API endpoint. For example, for many lookup requests you must update the endpoint to include your request ID (e.g., payment_id), which you do by selecting **URI Parameters** and then updating the respective *id* value. 

![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/ApiaryConsole.png)

You must also update the Header to include your API Key by selecting **Headers** and then updating the **Authorization** value using the Base64 version of your API key.
To get your Base64 encoded API key, sign in to the Merchant Portal and go to **Integrate>API Keys**.
![](https://github.com/paysafegroup/paysafe_api_paymenthub_v1/raw/master/images/API_authorization.png)

When you are ready to test your example, you can choose between the Production and Mock server environment:

- Production server – This calls the resource on Paysafe's Test system.
- Mock server – This environment simply returns the dummy values in the example response irrespective of the parameters you supply. You do not need to use your account ID or Test API key for this request.

To call the API resource, click **Call Resource**. The response is displayed in the Console window.

# Legal and Community
<ul>
<li><a href="https://www.paysafe.com/paysafegroup/privacy-policy/" target="_blank">Privacy Policy</a></li>
<li><a href="https://developer.paysafe.com/en/resources-and-support/terms-of-use/" target="_blank">Terms of Use</a></li>
<li><a href="https://www.paysafe.com/paysafegroup/regulatory-disclosures/" target="_blank">Regulatory Disclosures</a></li>
</ul>

# Release Notes

| Version   | Date           | Details |
|---        |---             |---      |
| v1        | February 2019  | Document release |

# Verify That the Service Is Accessible [GET /monitor]
<a name="verifyservice" title="Verify Service"></a>

This call returns a status of READY if the API is available.

+ Response 200 (application/json)

  + Body
    
            {
                "status" : "READY"
            }

# Group Payment Methods

## Look Up Available Payment Methods [/v1/paymentmethods]

### Look Up Payment Methods [GET /v1/paymentmethods?currencyCode={currencyCode}]
<a name="getpaymentmethods" title="Look Up Payment Methods"></a>


Click on **Look Up Payment Methods** above to see how to look up the payment methods that are enabled for each of your merchant accounts, by currency.

+ Parameters

    + `currencyCode`:`USD`

+ Request Look Up Payment Methods (application/json)
    
    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
+ Response 200 (application/json)

    + Body

            {
                "paymentMethods": [{
                        "paymentMethod": "CARD",
                        "currency": "USD",
                        "accountId": 1009355920
                    },
                    {
                        "paymentMethod": "PAYSAFECARD",
                        "currency": "USD",
                        "accountId": 1009355921
                    },
                    {
                        "paymentMethod": "PAYSAFECASH",
                        "currency": "USD",
                        "accountId": 1009355923
                    }
                ]
            }
            

# Group Payment Handles

## Payment Handle [/v1/paymenthandles]

A Payment Handle is basically a token that represents a payment method that you set up for a customer. Once the Payment Handle is created, you then include the *paymentHandleToken* returned in the Payment Handle request response in a new [payment request](#paymentrequest).  
<br>
> **Note:** A Payment Handle can be used in a [Payment request](#paymentrequest) only if it has the status of **PAYABLE**. 

### Create Payment Handle [POST]
<a name="paymenthandlerequest" title="Create Payment Handle"></a>

Click on **Create Payment Handle** above to see six examples of how to create a Payment Handle object:

* A Payment Handle for a standard credit card authorization
* A Payment Handle for a credit card that is registered for 3D Secure - the response for this request will contain a redirect to present to the customer so they can validate their 3D Secure credentials
* A Payment Handle for a Paysafecard payment
* A Payment Handle for a Paysafecash payment
* A Payment Handle for a credit card Standalone Credit
* A Payment Handle for a credit card Verification

 > **Note:** The status of Payment Handles that require the customer to be redirected to a *redirect_payment* URL will have the *status* of INITIATED until the customer verifies the payment instrument. 
 This is the case, for example, for alternate payment methods like Paysafecash and Paysafecard, and for credit cards that must be authenticated for 3D Secure, where the request amount is more than the maximum configured in the Merchant Portal.


+ Attributes 
    + Include PaymentHandleRequest

+ Request Create Payment Handle for Card without 3D Secure Enabled (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
                "merchantRefNum": "merchantRefNum-101",
                "transactionType": "PAYMENT",
                "card": {
                    "cardNum": "5191330000004415",
                    "cardExpiry": {
                        "month": 10,
                        "year": 2020
                    },
                    "cvv": "111",
                    "holderName": "poorna"
                },
                "paymentType": "CARD",
                "amount": 190,
                "currencyCode": "GBP",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "26359efd-7cfb-4014-a13d-1724e3ff17fa",
              "amount": 190,
              "merchantRefNum": "merchantRefNum-101",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCO3wKcIyLoQbQvw",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ],
              "timeToLiveSeconds": 899,
              "transactionType": "PAYMENT"
            }

+ Request Create Payment Handle for Card with 3D Secure Enabled (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-124",
                "transactionType": "PAYMENT",
                "card": {
                    "cardNum": "4538261230000003",
                    "cardExpiry": {
                        "month": 10,
                        "year": 2020
                    },
                    "cvv": "111",
                    "holderName": "poorna"
                },
                "paymentType": "CARD",
                "amount": 3000,
                "currencyCode": "GBP",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "372b5ee7-6360-4403-b444-164f8f1d2709",
                "amount": 3000,
                "merchantRefNum": "merchantRefNum-124",
                "action": "REDIRECT",
                "currencyCode": "GBP",
                "usage": "SINGLE_USE",
                "status": "INITIATED",
                "paymentType": "CARD",
                "executionMode": "SYNCHRONOUS",
                "customerIp": "172.0.0.1",
                "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "country": "CA",
                    "zip": "M5H 2N2"
                },
                "card": {
                    "cardExpiry": {
                        "month": "10",
                        "year": "2020"
                    },
                    "holderName": "poorna",
                    "cardType": "VI",
                    "cardBin": "453826",
                    "lastDigits": "0003"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ],
                "links": [{
                    "rel": "redirect_payment",
                    "href": "http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709",
                    "method": "GET"
                }],
                "timeToLiveSeconds": 899,
                "transactionType": "PAYMENT"
            }


+ Request Create Payment Handle for Paysafecard (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-201",
                "transactionType": "PAYMENT",
                "paysafecard": {
                    "consumerId": "consumerid001",
                    "minAgeRestriction": 18,
                    "kycLevelRestriction": "SIMPLE",
                    "countryRestriction": "DE"
                },
                "paymentType": "PAYSAFECARD",
                "amount": 500,
                "currencyCode": "USD",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggambling.com/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggambling.com/payment/return/failed",
                        "method": "GET"
                    },
                    {
                        "rel": "default",
                        "href": "https://usgaminggambling.com/payment/",
                        "method": "GET"
                    }
                ]
            }


+ Response 200 (application/json)

    + Body

            {
                "id": "82d57742-e2db-48ea-a726-a60e6f8265a3",
                "paymentType": "PAYSAFECARD",
                "paymentHandleToken": "PHQhlWpTRKzBXubN",
                "merchantRefNum": "5493aaf1a1d6dd13d2b53412f0ec",
                "currencyCode": "USD",
                "dupCheck": true,
                "status": "INITIATED",
                "liveMode": true,
                "usage": "SINGLE_USE",
                "action": "REDIRECT",
                "executionMode": "SYNCHRONOUS",
                "amount": 500,
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "billingDetails": {
                    "street2": "Unit 201",
                    "zip": "M5H 2N2",
                    "city": "Toronto",
                    "country": "CA"
                },
                "customerIp": "172.0.0.1",
                "timeToLiveSeconds": 345599,
                "gatewayResponse": {
                    "id": "11822017-3701-41df-aab5-2d24a28ac5e0",
                    "processor": "PAYSAFECARD"
                },
                "paysafecard": {
                    "consumerId": "merchantclientid",
                    "minAgeRestriction": 18,
                    "kycLevelRestriction": "SIMPLE",
                    "countryRestriction": "DE"
                },
                "returnLinks": [{
                        "rel": "default",
                        "href": "https://usgaminggambling.com/payment/"
                    },
                    {
                        "rel": "on_completed",
                        "href": "https://usgaminggambling.com/payment/return/success"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggambling.com/payment/return/failed"
                    }
                ],
                "txnTime": "2019-01-24T10:39:50Z",
                "updatedTime": "2019-01-24T10:39:50Z",
                "statusTime": "2019-01-24T10:39:50Z",
                "links": [{
                    "rel": "redirect_payment",
                    "href": "https://customer.at.paysafecard.com/rest/payment/panel?mid=1090001806&mtid=pay_1090001806_00LwEhZ8WtIy8PmIhRCUi3JScUti6jKi_EUR&amount=0.01&currency=EUR&customerHash=741e624cf6ae4fbca4338cb5597fe531"
                }]
            }

+ Request Create Payment Handle for Paysafecash (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
                "merchantRefNum": "merchantRefNum-201",
                "transactionType": "PAYMENT",
                "paysafecash": {
                    "consumerId": "consumerid001",
                    "minAgeRestriction": 18,
                    "kycLevelRestriction": "SIMPLE",
                    "countryRestriction": "DE"
                },
                "paymentType": "PAYSAFECASH",
                "amount": 500,
                "currencyCode": "USD",
                "customerIp": "172.0.0.1",
                "billingDetails": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA"
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://usgaminggambling.com/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggambling.com/payment/return/failed",
                        "method": "GET"
                    },
                    {
                        "rel": "default",
                        "href": "https://usgaminggambling.com/payment/",
                        "method": "GET"
                    }
                ]
            }


+ Response 200 (application/json)

    + Body

            {
                "id": "82d57742-e2db-48ea-a726-a60e6f8265a3",
                "paymentType": "PAYSAFECARD",
                "paymentHandleToken": "PHQhlWpTRKzBXubN",
                "merchantRefNum": "5493aaf1a1d6dd13d2b53412f0ec",
                "currencyCode": "USD",
                "dupCheck": true,
                "status": "INITIATED",
                "liveMode": true,
                "usage": "SINGLE_USE",
                "action": "REDIRECT",
                "executionMode": "SYNCHRONOUS",
                "amount": 500,
                "merchantDescriptor": {
                    "dynamicDescriptor": "OnlineStore",
                    "phone": "12345678"
                },
                "billingDetails": {
                    "street2": "Unit 201",
                    "zip": "M5H 2N2",
                    "city": "Toronto",
                    "country": "CA"
                },
                "customerIp": "172.0.0.1",
                "timeToLiveSeconds": 345599,
                "gatewayResponse": {
                    "id": "11822017-3701-41df-aab5-2d24a28ac5e0",
                    "processor": "PAYSAFECARD"
                },
                "paysafecard": {
                    "consumerId": "merchantclientid",
                    "minAgeRestriction": 18,
                    "kycLevelRestriction": "SIMPLE",
                    "countryRestriction": "DE"
                },
                "returnLinks": [{
                        "rel": "default",
                        "href": "https://usgaminggambling.com/payment/"
                    },
                    {
                        "rel": "on_completed",
                        "href": "https://usgaminggambling.com/payment/return/success"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://usgaminggambling.com/payment/return/failed"
                    }
                ],
                "txnTime": "2019-01-24T10:39:50Z",
                "updatedTime": "2019-01-24T10:39:50Z",
                "statusTime": "2019-01-24T10:39:50Z",
                "links": [{
                    "rel": "redirect_payment",
                    "href": "https://customer.at.paysafecard.com/rest/payment/panel?mid=1090001806&mtid=pay_1090001806_00LwEhZ8WtIy8PmIhRCUi3JScUti6jKi_EUR&amount=0.01&currency=EUR&customerHash=741e624cf6ae4fbca4338cb5597fe531"
                }]
            }



+ Request Create Payment Handle for Card for Standalone Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-190",
              "transactionType": "STANDALONE_CREDIT",
              "card": {
                "cardNum": "4538261230000003",
                "cardExpiry": {
                  "month": 10,
                  "year": 2020
                },
                "cvv": "111",
                "holderName": "poorna"
              },
              "paymentType": "CARD",
              "amount": 3000,
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "372b5ee7-6360-4403-b444-164f8f1d2709",
              "amount": 3000,
              "merchantRefNum": "merchantRefNum-190",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "VI",
                "cardBin": "453826",
                "lastDigits": "0003"
              },
              "timeToLiveSeconds": 899,
              "transactionType": "STANDALONE_CREDIT"
            }
            
+ Request Create Payment Handle for Card for Verification (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-196",
              "transactionType": "VERIFICATION",
              "card": {
                "cardNum": "4107857757053670",
                "cardExpiry": {
                  "month": 12,
                  "year": 2034
                },
                "cvv": "222"
              },
              "paymentType": "CARD",
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "16113177-3d68-4c91-8f69-ce41903f1446",
              "merchantRefNum": "merchantRefNum-196",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "timeToLiveSeconds": 899,
              "transactionType": "VERIFICATION",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCfZX0QEvEvSszKy",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "cardType": "VI",
                "cardBin": "410785",
                "lastDigits": "3670"
              }
            }

### Get Payment Handle [GET /v1/paymenthandles/{paymenthandle_id}]
<a name="getpaymenthandle" title="Look Up a Payment Handle"></a>

Click on **Get Payment Handle** above to see how to look up a Payment Handle using the ID returned in the response to the original request.

+ Parameters

    + paymenthandle_id : `26359efd-7cfb-4014-a13d-1724e3ff17fa` - This is the Payment Handle ID returned in the response to the [Payment Handle creation request](#paymenthandlerequest).

+ Request Look Up Payment Handle (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "26359efd-7cfb-4014-a13d-1724e3ff17fa",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-115",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "EXPIRED",
              "timeToLiveSeconds": 0,
              "transactionType": "PAYMENT",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SC0YsGIIgFksiOsQ",
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

### Get Payment Handle Using Merchant Reference Number [GET /v1/paymenthandles?merchantRefNum={merchant_ref_num}]
<a name="getpaymenthandlemerchantrefnum" title="Look Up a Payment Handle Using a Merchant Reference Number"></a>

Click on **Get Payment Handle Using Merchant Reference Number** above to see how to look up a Payment Handle using the merchant reference number used in the original request.

+ Parameter

    + merchant_ref_num : `13995817730005389` - This is the *merchantRefNum* used in the original Payment Handle creation request.

+ Request Look Up Payment Handle Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "cc719995-59ed-4146-a936-b54db72bcaa8",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-130",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "EXPIRED",
              "timeToLiveSeconds": 0,
              "transactionType": "PAYMENT",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SC0YsGIIgFksiOsQ",
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [{
                        "rel": "on_completed",
                        "href": "https://US_commerce_site/payment/return/success",
                        "method": "GET"
                    },
                    {
                        "rel": "on_failed",
                        "href": "https://US_commerce_site/payment/return/failed",
                        "method": "GET"
                    }
                ]
            }

# Group Verifications 

Verification allows merchants to validate a credit card without charging any amount on the card. 

## Verification [/v1/verifications]

### Verification [POST]
<a name="verificationrequest" title="Verify a Credit Card"></a>

Click on **Verification** above to see how to submit a Verification request using Payment Handle Token.

+ Attributes (VerificationResponse)

+ Request Verify a Credit Card (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

    + Body

            {
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "dupCheck": false,
              "description": "Verify card for payment request"
            }
     
+ Response 200 (application/json)

    + Body

            {
                "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
                "paymentHandleToken": "SCUgzJL5jlRIKCiX",
                "merchantRefNum": "20095817730019123",
                "customerIp": "10.10.12.64",
                "currencyCode": "USD",
                "description": "Verify card for payment request",
                "txnTime": "2018-12-11T16:33:49Z",
                "gatewayResponse": {
                    "authCode": "XXXXXX",
                    "avsResponse": "MATCH",
                    "cvvVerification": "NOT_PROCESSED"
                },
                "status": "COMPLETED"
            }

### Get Verification [GET /v1/verifications/{verification_id}]
<a name="getverification" title="Look Up a Verification"></a>

Click on **Get Verification** above to see how to look up a Verification request using the ID returned in the response to the original request.

+ Parameter

   + verification_id : `0c62a67c-e12e-4876-aa1a-20f9ec1f0352` - This is the ID returned in the response to the Verification request.


+ Response 200 (application/json)

    + Body

            {
                "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
                "paymentHandleToken": "SCUgzJL5jlRIKCiX",
                "merchantRefNum": "20095817730019123",
                "customerIp": "10.10.12.64",
                "currencyCode": "USD",
                "description": "Verify card for payment request",
                "txnTime": "2018-12-11T16:33:49Z",
                "gatewayResponse": {
                    "authCode": "XXXXXX",
                    "avsResponse": "MATCH",
                    "cvvVerification": "NOT_PROCESSED"
                },
                "status": "COMPLETED"
            }
            
### Get Verification Using Merchant Reference Number [GET /v1/verifications?merchantRefNum={merchant_ref_num}]
<a name="getverificationmerchantrefnum" title="Look Up a Verification Using a Merchant Reference Number"></a>

Click on **Get Verification Using Merchant Reference Number** above to see how to look up a Verification request using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : 20095817730019123 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Response 200 (application/json)
  
   + Body

            {
              "verifications": [
                {
              "id": "71aea8ae-e801-4df3-9436-c5a61c88d3ad",
              "paymentHandleToken": "SCUgzJL5jlRIKCiX",
              "merchantRefNum": "20095817730019123",
              "customerIp": "10.10.12.64",
              "currencyCode": "USD",
              "description": "Verify card for payment request",
              "txnTime": 2018-12-11T16:33:49Z,
              "gatewayResponse" : {
              "authCode": "XXXXXX",
              "avsResponse" : "MATCH",
              "cvvVerification": "NOT_PROCESSED"
              },
              "status": "COMPLETED"
            }
              ]
            }

# Group Payments

## Payments [/v1/payments]

Payment requests allow you to process a payment using the *paymentHandleToken* that you have [previously created for the payment instrument you want to use](#paymenthandlerequest). The examples below include a *paymentHandleToken* created for a credit card.

### Process Payment [POST]
<a name="paymentrequest" title="Post Payment Using Payment Handle Token"></a>

Click on **Process Payment** above to see two examples of how to create a Payment request using a Payment Handle token:

* A Payment request that will have to be settled later
* A Payment request that authorizes and settles the Payment in a single request by setting the *settleWithAuth* parameter to *true*


+ Attributes 
    + Include PaymentsRequest

+ Request Process a Card Payment Using a Payment Handle Token (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-108",
              "amount": 1900,
              "currencyCode": "GBP",
              "dupCheck": true,
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "customerIp": "10.10.12.64",
              "description": "Magazine subscription"
            }
            
+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-14T15:12:18Z", 
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 1900,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              }
            }

+ Request Process a Card Payment Including Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-108",
              "amount": 1900,
              "currencyCode": "GBP",
              "dupCheck": true,
              "settleWithAuth": true,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "customerIp": "10.10.12.64",
              "description": "Magazine subscription"
            }
            
+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": true,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-14T15:12:18Z",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 0,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              }
            }

### Get Payments [GET /v1/payments/{payment_id}]
<a name="getpayment" title="Look Up a Payment"></a>

Click on **Get Payments** above to see how to look up a Payment using the ID returned in the response to the original request.

+ Parameter

   + payment_id : `3aeb9c63-6386-46a3-9f8e-f452e722228a` - This is the ID returned in the response to the Payments request.

+ Request Look Up Payment (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-14T15:12:18Z",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 1900,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              }
            }
            
### Get Payments Using Merchant Reference number [GET /v1/payments?merchantRefNum={merchant_ref_num}]
<a name="getpaymentmerchantrefnum" title="Look Up a Payment Using a Merchant Reference Number"></a>

Click on **Get Payment Using Merchant Reference Number** above to see how to look up a Payment using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-145` -This is the merchant reference number created by the merchant and submitted as part of the Payments request.

+ Request Look Up Payment Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "payments": [
                {
                  "id": "8190c675-6d68-4cd7-a29c-55b406addaeb",
                  "amount": 1900,
                  "merchantRefNum": "merchantRefNum-145",
                  "settleWithAuth": false,
                  "paymentHandleToken": "SChfCGCURe5NiLIv",
                  "authCode": "107212",
                  "txnTime": "2018-12-14T15:12:18Z",
                  "customerIp": "10.10.12.64",
                  "description": "Magazine subscription",
                  "currencyCode": "GBP",
                  "status": "COMPLETED",
                  "avsResponse": "MATCH",
                  "cvvVerification": "MATCH",
                  "availableToSettle": 40
                }
              ]
            }
            
# Group Void Authorizations 

A Void Authorization request allows you to void (or cancel) an authorization request, provided the authorization has not yet been settled. An authorization is part of a [payment request](#paymentrequest). If *settleWithAuth* is set to *true* in the payment request, then 
the authorization and settlement are completed in the same request, in which case you would not be able to process a Void Authorization.

## Void Authorizations [/v1/voidauths]

### Void Authorization [POST /v1/payments/{payment_id}/voidauths]
<a name="voidauthrequest" title="Void Authorization"></a>

Click on **Void Authorization** above to see how to submit a Void Authorization request. You can void an Authorization **only if** it has not yet been settled.

+ Parameter

    + payment_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Payment request.
    
+ Attributes (voidAuthResponse)

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "amount": 900,
              "merchantRefNum": "13915817720025003"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "50175d73-be3d-4594-b570-9095a17121de",
              "merchantRefNum": "13915817720025003",
              "amount": 900,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "COMPLETED"
            }

### Get Void Authorization [GET /v1/voidauths/{void_auth_id}]
<a name="getvoidauth" title="Look Up a Void Authorization"></a>

Click on **Get Void Authorization** above to see how to look up a Void Authorization using the ID returned in the response to the original request.

+ Parameter

   + void_auth_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Void Authorization request.


+ Request Look Up Void Authorization (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "65bb2b2e-be2f-4ae8-9a2a-f24239309c7d",
              "merchantRefNum": "1391581772002515624",
              "amount": 900,
              "txnTime": "2018-12-10T11:17:23Z",
              "status": "COMPLETED"
            }
            
### Get Void Authorization Using Merchant Reference Number [GET /v1/voidauths?merchantRefNum={merchant_ref_num}]
<a name="getvoidauthmerchantrefnum" title="Look Up a Void Authorization Using a Merchant Reference Number"></a>

Click on **Get Void Authorization Using Merchant Reference Number** above to see how to look up a Void Authorization using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : 1391581772002515624 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Request Look Up Void Authorization Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)
  
   + Body

            {
              "voidAuths": [
                {
                  "id": "65bb2b2e-be2f-4ae8-9a2a-f24239309c7d",
                  "merchantRefNum": "1391581772002515624",
                  "amount": 900,
                  "txnTime": "2018-12-10T11:17:23Z",
                  "status": "COMPLETED"
                }
              ]
            }



# Group Settlements 

## Settlements [/v1/payments/{payment_id}/settlements]

A Settlement request allows you to settle a previous authorization that was not settled in the original Purchase request (i.e., where *settleWithAuth* was set to *false*). 

+ Parameter

    + payment_id : `c64ecbf2-a942-4f7c-b412-70217a0eb16e` - This is the ID returned in the response to the Payments request.

### Process Settlement [POST]
<a name="settlementrequest" title="Process Settlement"></a>

Click on **Process Settlement** above to see two examples of how to process a Settlement request:

* A regular Settlement, where the initial request was an Authorization that now has to be settled
* A Settlement that is split into multiple merchant accounts, for merchant accounts that are configured to do so

+ Attributes
    + Include Settlements

+ Request Process a Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-117",
              "dupCheck":true,
              "amount": 190
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "merchantRefNum": "merchantRefNum-117",
              "dupCheck":true,
              "amount": 190,
              "id": "a07b0597-f106-4790-9661-f0d452619f5d",
              "availableToRefund": 190,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "PENDING"
            }
            
+ Request Process a Settlement with Split Payouts (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

    + Body

            {
                "merchantRefNum": "merchantRef_2016_04_11_05",
                "dupCheck": true,
                "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }

+ Response 200 (application/json)

    + Body

            {
                "id": "d1fb46ee-2736-4ef5-a724-f263ace75373",
                "merchantRefNum": "merchantRef_2016_04_11_05",
                "amount": 5500,
                "availableToRefund": 5500,
                "dupCheck": true,
                "txnTime": "2017-02-14T15:12:18Z",
                "status": "COMPLETED",
                "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }

### Cancel Settlement [PUT /v1/settlements/{settlement_id}]
<a name="cancelsettlement" title="Cancel a Settlement"></a>

Click on **Cancel Settlement** above to see how to cancel a Settlement. You must include the *status* parameter set to *CANCELLED*.

+ Parameter

    + settlement_id : `d9bcfd85-8aa6-469d-80a3-e2ca196544da` - This is the ID returned in the response to the Settlement request. 

+ Request Cancel a Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "CANCELLED"
            }
            

### Get Settlements [GET /v1/settlements/{settlement_id}]
<a name="getsettlement" title="Look Up a Settlement"></a>

Click on **Get Settlements** above to see how to look up a Settlement using the ID returned in the response to the original request.

+ Parameter

   + settlement_id : `ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85` - This is the ID returned in the response to the Settlement request.

+ Request Look Up Settlement (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "merchantRefNum": "merchantRefNum-144",
              "amount": 40,
              "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
              "availableToRefund": 40,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "PENDING"
            }
            
### Get Settlements Using Merchant Reference Number [GET /v1/settlements?merchantRefNum={merchant_ref_num}]
<a name="getsettlementmerchantrefnum" title="Look Up a Settlement Using a Merchant Reference Number"></a>

Click on **Get Settlements Using Merchant Reference Number** above to see how to look up a Settlement using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-144` -This is the merchant reference number created by the merchant and submitted as part of the request.

+ Request Look Up Settlement Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "settlements": [
                {
                  "merchantRefNum": "merchantRefNum-144",
                  "amount": 40,
                  "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
                  "availableToRefund": 40,
                  "txnTime": "2018-12-11T16:33:49Z",
                  "status": "PENDING"
                }
              ]
            }

# Group Refunds

## Refunds [/v1/settlements/{settlement_id}/refunds]

+ Parameter

    + settlement_id : `d9bcfd85-8aa6-469d-80a3-e2ca196544da` - This is the ID returned in the response to the Settlement request or to the Payment request where the authorization was settled in the same request.

### Process Refund [POST]
<a name="refundrequest" title="Process Refund"></a>

Click on **Process Refund** above to see two examples of how to process a Refund request:

* A regular Refund
* A Refund that is split into multiple merchant accounts, for merchant accounts that are configured to do so

+ Attributes
    + Include Refunds

+ Request Process a Refund (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "dupCheck": true
            }
                        
+ Response 200 (application/json)

    + Body

            {
                "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                "merchantRefNum": "merchantRefNum-118",
                "amount": 190,
                "txnTime": "2018-12-11T16:33:49Z",
                "status": "PENDING"
            }
            
+ Request Process a Refund with Split Payouts (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "dupCheck": true,
              "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }
                        
+ Response 200 (application/json)

    + Body

            {
                "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                "merchantRefNum": "merchantRefNum-118",
                "amount": 190,
                "txnTime": "2018-12-11T16:33:49Z",
                "status": "PENDING",
                "splitpay": [{
                    "linkedAccount": "123124124",
                    "amount": 500
                }]
            }

### Cancel Refund [PUT /v1/refunds/{refund_id}]
<a name="cancelrefund" title="Cancel a Refund"></a>

Click on **Cancel Refund** above to see how to cancel a Refund. You must include the *status* parameter set to *CANCELLED*.

+ Parameter

    + refund_id : `c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725` - This is the ID returned in the response to the Refund request
    
+ Request Cancel a Refund (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "txnTime": "2018-12-10T11:19:51Z",
              "status": "CANCELLED"
            }
            
### Get Refund [GET /v1/refunds/{refund_id}]
<a name="getrefund" title="Look Up a Refund"></a>

Click on **Get Refund** above to see how to look up a Refund using the ID returned in the response to the original request.

+ Parameter

    + refund_id : `c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725` - This is the ID returned in the response to the Refund request

+ Request Look Up Refund (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "txnTime": "2018-12-11T16:33:49Z",
              "status": "PENDING"
            }
            
### Get Refunds Using Merchant Reference Number [GET /v1/refunds?merchantRefNum={merchant_ref_num}]
<a name="getrefundmerchantrefnum" title="Look Up a Refund Using a Merchant Reference Number"></a>

Click on **Get Refunds Using Merchant Reference Number** above to see how to look up a Refund using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : `merchantRefNum-118` -This is the merchant reference number created by the merchant and submitted as part of the request.

+ Request Look Up Refund Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "refunds": [
                {
                  "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                  "merchantRefNum": "merchantRefNum-118",
                  "amount": 190,
                  "txnTime": "2018-12-11T16:33:49Z",
                  "status": "PENDING"
                }
              ]
            }
         
# Group Standalone Credits 

## Standalone Credits [/v1/standalonecredits]

A Standalone Credit request allows you to issue credits to cardholders without requiring a previous *settlement_id*.

**Note:** If your merchant category code (MCC) is listed as able to [process Original Credits](#originalcreditrequest), you must not use Standalone Credits.


### Process Standalone Credit [POST]
<a name="standalonecreditrequest" title="Process Standalone Credit"></a>

Click on **Process Standalone Credit** above to see how to process a Standalone Credit request. 

+ Attributes (OriginalCreditResponse)

+ Request Process a Standalone Credit Using a Payment Handle Token (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "currencyCode": "GBP",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Pay surplus"
            }    
            
+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Pay surplus"
            }
            
### Cancel Standalone Credit [PUT /v1/standalonecredits/{standalone_credit_id}]
<a name="cancelstandalonecredit" title="Cancel a Standalone Credit"></a>

Click on **Cancel Standalone Credit** above to see how to cancel a Standalone Credit. You must include the *status* parameter set to *CANCELLED*.

+ Parameter

    + standalone_credit_id : `e075f2ae-dfc4-4f6d-8d89-61158367b6a6`
    

+ Request Cancel a Standalone Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }


+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "status": "CANCELLED"
            }
            

### Get Standalone Credit [GET /v1/standalonecredits/{standalone_credit_id}]
<a name="getstandalonecredit" title="Look Up a Standalone Credit"></a>

Click on **Get Standalone Credit** above to see how to look up a Standalone Credit using the ID returned in the response to the original request.

+ Parameter

    + standalone_credit_id : `e075f2ae-dfc4-4f6d-8d89-61158367b6a6`

+ Request Look Up Standalone Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Pay surplus"
            }
            
### Get Standalone Credit Using Merchant Reference Number  [GET /v1/standalonecredits?merchantRefNum={merchant_ref_num}]
<a name="getstandalonecreditmerchantrefnum" title="Look Up a Standalone Credit Using a Merchant Reference Number"></a>

Click on **Get Standalone Credit Using Merchant Reference Number** above to see how to look up a Standalone Credit using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : "merchantRefNum-151"

+ Request Look Up Standalone Credit Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
                "standaloneCredits": [{
                    "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
                    "amount": 40,
                    "merchantRefNum": "merchantRefNum-151",
                    "paymentHandleToken": "SC9mbfZSITB5OwDJ",
                    "customerIp": "204.91.0.12",
                    "currencyCode": "GBP",
                    "status": "PENDING",
                    "description": "Pay surplus"
                }]
            }
            

# Group Original Credits 

## Original Credits [/v1/originalcredits]

An Original Credit request allows you to issue credits to cardholders without requiring a previous *settlement_id*.

Only merchants with the following MCCs can process Original Credits:
<a name="originalcreditmccs" title="Orignal Credit MCCs"></a>
 * 4829
 * 6012
 * 6051
 * 6211
 * 6540
 * 7299
 * 7994
 * 7995
 * 8999

### Process Original Credit [POST]
<a name="originalcreditrequest" title="Process Original Credit"></a>

Click on **Process Original Credit** above to see how to process an Original Credit request. 

+ Attributes (OriginalCreditResponse)

+ Request Process an Original Credit Using a Payment Handle Token (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "currencyCode": "GBP",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Winning payment from Loto 649"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "txnTime": "2018-12-11T16:33:49Z",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }

### Cancel Original Credit [PUT /v1/originalcredits/{original_credit_id}]
<a name="canceloriginalcredit" title="Cancel an Original Credit"></a>

Click on **Cancel Original Credit** above to see how to cancel an Original Credit. You must include the *status* parameter set to *CANCELLED*.

+ Parameter

   + original_credit_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Original Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.

+ Request Cancel an Original Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }


+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "status": "CANCELLED"
            }
            

### Get Original Credit [GET /v1/originalcredits/{original_credit_id}]
<a name="getoriginalcredit" title="Look Up an Original Credit"></a>

Click on **Get Original Credit** above to see how to look up an Original Credit using the ID returned in the response to the original request.

+ Parameter

   + original_credit_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Original Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.


+ Request Look Up Original Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "txnTime": "2018-12-11T16:33:49Z",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }
            
### Get Original Credit Using Merchant Reference Number [GET /v1/originalcredits?merchantRefNum={merchant_ref_num}]
<a name="getoriginalcreditmerchantrefnum" title="Look Up an Original Credit Using a Merchant Reference Number"></a>

Click on **Get Original Credit Using Merchant Reference Number** above to see how to look up an Original Credit using the merchant reference number used in the original request.

+ Parameter

   + merchant_ref_num : merchantRefNum-151 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Request Look Up Original Credit Using Merchant Reference Number (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"

+ Response 200 (application/json)
  
   + Body

            {
                "originalCredits": [{
                    "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
                    "amount": 40,
                    "merchantRefNum": "merchantRefNum-151",
                    "txnTime": "2018-12-11T16:33:49Z",
                    "paymentHandleToken": "SC9mbfZSITB5OwDJ",
                    "customerIp": "204.91.0.12",
                    "currencyCode": "GBP",
                    "status": "PENDING",
                    "description": "Winning payment from Loto 649"
                }]
            }
            

# Group Customers

## Customers [/v1/customers]

### Create Customer [POST]
<a name="createcustomerrequest" title="Create a Customer"></a>

This is how you submit a customer creation request.

+ Attributes
    + Include Customer Base

+ Request Create a Customer (application/json)
        
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

    + Body

            {
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 10,
                    "day": 24
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888"
            }
            
+ Response 200 (application/json)

    + Body

            {
                "id": "ccb24e28-6e38-47ce-8815-94706c5b608c",
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "day": 24,
                    "month": 10,
                    "year": 1981
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888"
            }

## Create a Customer Using a Payment Handle Token [POST /v1/customers]
<a name="createcustomerrequesttoken" title="Create a Customer Using a Payment handle Token"></a>
This is how you submit a customer creation request using a payment handle token.
You can use this request to convert a single-use payment handle token to a permanent payment handle token.

**Note:** Only the *paymentHandleToken* returned in the *paymentHandles* object in the response can be used for [payment requests with the Payments API](#paymentrequest).

+ Request Create a Customer Using a Single-Use Token (application/json)
    
    + Attributes
    
        + Include Customer Base
        + paymentHandleTokenFrom:`SCURPCc6nEwXcdBQ` - This is the paymentHandle token that is present in the response of Creation of paymentHandle.
        
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            
    + Body 

            {
              "merchantCustomerId": "mycustomer10",
              "locale": "en_US",
              "firstName": "John",
              "middleName": "James",
              "lastName": "Smith",
              "dateOfBirth": {
                "year": 1981,
                "month": 10,
                "day": 24
              },
              "email": "john.smith@email.com",
              "phone": "777-444-8888",
              "ip": "192.0.126.111",
              "gender": "M",
              "nationality": "Canadian",
              "cellPhone": "777-555-8888",
              "paymentHandleTokenFrom": "SCURPCc6nEwXcdBQ"
            }

+ Response 200 (application/json)

    + Body

            {
              "merchantCustomerId": "mycustomer10",
              "locale": "en_US",
              "firstName": "John",
              "middleName": "James",
              "lastName": "Smith",
              "dateOfBirth": {
                "year": 1981,
                "month": 10,
                "day": 24
              },
              "email": "john.smith@email.com",
              "phone": "777-444-8888",
              "ip": "192.0.126.111",
              "gender": "M",
              "nationality": "Canadian",
              "cellPhone": "777-555-8888",
              "paymentHandleTokenFrom": "SCURPCc6nEwXcdBQ"
            }

## Get Customer [GET /v1/customers/{customer_id}]

<a name="getcustomerrequest" title="Look Up a Customer"></a>
This is how you look up a customer using the ID returned in the response to the original customer creation request. 
    
+ Parameters
    + customer_id:`ccb24e28-6e38-47ce-8815-94706c5b608c` (string, required) - This is the unique ID returned in the response to the [customer creation request](#createcustomerrequest).

+ Request Get Customer (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            
+ Response 200 (application/json)

    + Body

            {
                "id": "ccb24e28-6e38-47ce-8815-94706c5b608c",
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "day": 24,
                    "month": 10,
                    "year": 1981
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888"
            }

## Get Customer Using Merchant Customer ID [GET /v1/customers?merchantCustomerId={merchant_customer_id}]
<a name="getcustomerrequest" title="Look Up a Customer"></a>
This is how you look up a customer using the Merchant Customer ID that was used in [the original request](#createcustomerequest). 
    
+ Parameters
    + merchant_customer_id:`mycustomer10` (string, required) - This is a customer ID that the merchant provided with the [customer creation request](#createcustomerrequest) for their own internal customer identification.. 

+ Response 200 (application/json)

    + Body

            {
                "id": "ccb24e28-6e38-47ce-8815-94706c5b608c",
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "day": 24,
                    "month": 10,
                    "year": 1981
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888"
            }

## Get Customer Including Subcomponents [GET /v1/customers/{customer_id}?fields={fields}]
<a name="getcustomerrequestsubcomponents" title="Look Up a Customer Including Subcomponents"></a>
You can look up a customer along with its associated sub-components using one or more comma-separated values from this list:
  * paymentHandles
  * addresses
  
    
+ Parameters
    + customer_id:`ccb24e28-6e38-47ce-8815-94706c5b608c` (string, required) - This is the unique ID returned in the customer creation response.
    + fields:`addresses,paymentHandles` (string, optional) - This is a comma-separated list of sub-components.

+ Request Get Customer (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            
+ Response 200 (application/json)

    + Body

            {
                "id": "326d6b3b-3c47-4ee2-9b6b-3801ec97a09d",
                "merchantCustomerId": "mycustomer1",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smith",
                "dateOfBirth": {
                    "day": 24,
                    "month": 10,
                    "year": 1981
                },
                "email": "john.smith@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888",
                "addresses": [{
                    "id": "3722476e-4891-426b-8dcd-a25ad3d14ffe",
                    "street": "Andhra bank lane",
                    "street2": "Manikonda",
                    "city": "Hyderabad",
                    "state": "TS",
                    "country": "IN",
                    "zip": "500089",
                    "status": "ACTIVE"
                }],
                "paymentHandles": [{
                    "id": "0aee8670-ae5e-44dc-bf9d-73ad84dabbf3",
                    "merchantRefNum": "9c011804-c123-40f3-8cd5-de21aec8d88e",
                    "status": "INITIATED",
                    "usage": "MULTI_USE",
                    "paymentType": "CARD",
                    "action": "REDIRECT",
                    "executionMode": "SYNCHRONOUS",
                    "accountId": "1001535430",
                    "paymentHandleToken": "Cvz7pumqVb8rnJX",
                    "creationDate": 1547726600919,
                    "card": {
                        "lastDigits": "0007",
                        "cardExpiry": {
                            "month": "12",
                            "year": "2024"
                        },
                        "cardBin": "400344",
                        "cardType": "VI",
                        "singleUseToken": "SCR37YxqciqpGeKF",
                        "billingDetailsId": "3722476e-4891-426b-8dcd-a25ad3d14ffe"
                    },
                    "paymentHandleTokenFrom": "SCR37YxqciqpGeKF"
                }]
            }

## Update a Customer [PUT /v1/customers/{customer_id}]

<a name="updatecustomerrequest" title="Update a Customer"></a>
This is how you update a customer.

**Note:** You must provide all of the elements of the customer when you are updating it, including the elements that are not changing. Elements that are part of an existing customer but that are not included in the update request will be set to *null* in the resulting customer.

+ Attributes
    + Include Customer Base

+ Parameters
    + customer_id:`326d6b3b-3c47-4ee2-9b6b-3801ec97a09d` (string, required) - This is the unique ID returned in the response to the [customer creation request](#createcustomerrequest).

+ Request Update a Customer (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

    + Body

            {
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smythe",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 11,
                    "day": 24
                },
                "email": "john.smythe@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888"
            }


            
+ Response 200 (application/json)
    
    + Body

            {
                "id": "326d6b3b-3c47-4ee2-9b6b-3801ec97a09d",
                "merchantCustomerId": "mycustomer10",
                "locale": "en_US",
                "firstName": "John",
                "middleName": "James",
                "lastName": "Smythe",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 11,
                    "day": 24
                },
                "email": "john.smythe@email.com",
                "phone": "777-444-8888",
                "ip": "192.0.126.111",
                "gender": "M",
                "nationality": "Canadian",
                "cellPhone": "777-555-8888"
            }

## Delete a Customer [DELETE /v1/customers/{customer_id}]
<a name="deletecustomerrequest" title="Delete a Customer"></a>

This is how you delete a customer.

+ Parameters
    + customer_id:`a7b218e7-290a-4434-aea2-a1f985fc26c0` (string, required) - This is the customer ID returned in the response (in NETBANX this is called the Consumer ID).

+ Request Delete a Customer (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            
+ Response 200 (application/json)

# Addresses [/addresses]
<a name="addressesrequest" title="Addresses Request"></a>

## Create an Address [POST /v1/customers/{customer_id}/addresses]
<a name="createaddressrequest" title="Create an Address"></a>

This is how you submit an address creation request to add an address to a previously created customer.

+ Attributes

    + Include Address

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the ID of the customer to which you are adding an address.

+ Request Create an Address (application/json)
        
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY

    + Body

            {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA",
                "state": "ON",
                "phone": "647-788-3901",
                "defaultShippingAddressIndicator": true
            }


+ Response 200 (application/json)
    
    + Body

            {
                "id": "6a275b7c-6f11-4ed1-ae77-21071724574a",
                "status": "ACTIVE",
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA",
                "state": "ON",
                "phone": "647-788-3901",
                "defaultShippingAddressIndicator": true
            }

## Get Address [GET /v1/customers/{customer_id}/addresses/{address_id}]
<a name="getaddressrequest" title="Look Up an Address"></a>

This is how you look up an address using the ID returned in the response to the original address creation request.
    
+ Parameters
    + customer_id:`a7b218e7-290a-4434-aea2-a1f985fc26c0` (string, required) - This is the customer ID returned in the response.
    + address_id:`6a275b7c-6f11-4ed1-ae77-21071724574a` (string, required) - This is the address ID returned in the response.

+ Request Get Address (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            
+ Response 200 (application/json)

    + Body

            {
                "id": "6a275b7c-6f11-4ed1-ae77-21071724574a",
                "status": "ACTIVE",
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA",
                "state": "ON",
                "phone": "647-788-3901",
                "defaultShippingAddressIndicator": true
            }

## Update an Address [PUT /v1/customers/{customer_id}/addresses/{address_id}]
<a name="updateaddressrequest" title="Update an Address"></a>

This is how you update an address.

**Note:** You must provide all of the elements of the address when you are updating it, including the elements that are not changing. Elements that are part of an existing address but that are not included in the update request will be set to *null* in the resulting address.

+ Parameters
    + customer_id:`a7b218e7-290a-4434-aea2-a1f985fc26c0` (string, required) - This is the customer ID returned in the response.
    + address_id:`6a275b7c-6f11-4ed1-ae77-21071724574a` (string, required) - This is the address ID returned in the address creation response.

+ Attributes

    + Include Address

+ Request Update an Address (application/json)
        
    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            
    + Body

            {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 2201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA",
                "state": "ON",
                "phone": "647-788-3901",
                "defaultShippingAddressIndicator": true
            }


+ Response 200 (application/json)
    
    + Body

            {
                "id": "6a275b7c-6f11-4ed1-ae77-21071724574a",
                "status": "ACTIVE",
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 2201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA",
                "state": "ON",
                "phone": "647-788-3901",
                "defaultShippingAddressIndicator": true
            }

## Delete an Address [DELETE /v1/customers/{customer_id}/addresses/{address_id}]
<a name="deletecustomerrequest" title="Delete a Customer"></a>

This is how you delete a customer's address.

+ Parameters
    + customer_id:`a7b218e7-290a-4434-aea2-a1f985fc26c0` (string, required) - This is the customer ID returned in the response (in NETBANX this is called the Consumer ID).
    + address_id:`6a275b7c-6f11-4ed1-ae77-21071724574a` (string, required) - This is the address ID returned in the address creation response. 

+ Request Delete a Customer (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            
+ Response 200 (application/json)

# Customer Payment Handles [/paymenthandles]
<a name="paymenthandlerequest" title="Payment Handle Request"></a>

## Create a Payment Handle for a Customer [POST /v1/customers/{customer_id}/paymenthandles]
<a name="createcustomerpaymenthandlerequest" title="Create a Customer Payment Handle"></a>

This is how you submit a Payment Handle creation request to associate a Payment Handle with an existing customer. The *paymentHandleToken* returned in the response can be used for [payment requests in the Payments API](#paymentrequest).

**Note:** Although the *billingDetails* parameter is optional, it is recommended that you include it when you create the customer Payment Handle 
because a Payment request that uses the *paymentHandleToken* in the response will fail AVS checks unless there is a billing address associated with it. 
If you do not include it when creating the customer Payment Handle, you should then [update the Payment Handle](#) with the *billingDetailsId* before using it for transaction requests.

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.

+ Attributes 
    + Include PaymentHandleRequest Customer

+ Request Create a Payment Handle for a Customer (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
        
    + Body

            {
                "merchantRefNum": "xzcxzcwqeqwewewqer",
                "paymentType": "CARD",
                "currencyCode": "GBP",
                "customerIp": "10.10.12.64",
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                },
                "billingDetails": {
                    "street": "Andhra bank lane",
                    "street2": "Manikonda",
                    "city": "Hyderabad",
                    "state": "TS",
                    "country": "IN",
                    "zip": "500089"
                },
                "card": {
                    "cardNum": "4222222222222",
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    },
                    "cvv": "111"
                }
            }

+ Response 200 (application/json)
    
    + Body

            {
                "id": "218d68c7-77c8-4d37-9d06-0a4bb5272adb",
                "merchantRefNum": "ad9c23c2-509b-43ae-bf5d-64554c9fc378",
                "status": "INITIATED",
                "usage": "MULTI_USE",
                "paymentType": "CARD",
                "action": "NONE",
                "paymentHandleToken": "Cy4WEGJ9IWIkcUn",
                "billingDetails": {
                    "street": "Andhra bank lane",
                    "street2": "Manikonda",
                    "city": "Hyderabad",
                    "state": "TS",
                    "country": "IN",
                    "zip": "500089"
                },
                "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                },
                "card": {
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    }
                }
            }

## Create a Customer Payment Handle Using a Single-Use Payment Handle Token [POST /v1/customers/{customer_id}/paymenthandles]
<a name="createpaymenthandlerequestsut" title="Create a Payment Handle Using a Single-Use Payment Handle Token"></a>

This is how you submit a payment handle creation request using a single-use payment handle token. The *paymentHandleToken* returned in the response can be used for [payment requests in the Payments API](#paymentrequest).

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.

+ Attributes 

    + `paymentHandleTokenFrom`:`SC7nLsLzHWVqI62i` (string, required) - This is 
        _length<=36_

+ Request Create a Customer Payment Handle Using Single-Use Payment Handle Token (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
        
    + Body
    
             {
                 "paymentHandleTokenFrom": "SC7nLsLzHWVqI62i"
             }
        
+ Response 200 (application/json)

    + Body

            {
                "id": "218d68c7-77c8-4d37-9d06-0a4bb5272adb",
                "merchantRefNum": "ad9c23c2-509b-43ae-bf5d-64554c9fc378",
                "status": "INITIATED",
                "usage": "MULTI_USE",
                "paymentType": "CARD",
                "action": "NONE",
                "paymentHandleTokenFrom": "SC7nLsLzHWVqI62i",
                "paymentHandleToken": "Cy4WEGJ9IWIkcUn",
                "card": {
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    }
                },
                "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                "billingDetails": {
                    "street": "Andhra bank lane",
                    "street2": "Manikonda",
                    "city": "Hyderabad",
                    "state": "TS",
                    "country": "IN",
                    "zip": "500089"
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                }
            }


## Get Customer Payment Handle [GET /v1/customers/{customer_id}/paymenthandles/{paymenthandle_id}]
<a name="getcustomerpaymenthandlerequest" title="Look Up a Customer Payment Handle"></a>

This is how you look up a Payment Handle using the ID returned in the response to the original request.
    
+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.
    + paymenthandle_id:`218d68c7-77c8-4d37-9d06-0a4bb5272adb` (string, required) - This is the Payment Handle ID returned in the response to the [Customer Payment Handle creation request](#createcustomerpaymenthandlerequest).

+ Request Look Up a Customer Payment Handle (application/json)
    
    + Headers
    
            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            
+ Response 200 (application/json)

    + Body

            {
                "id": "218d68c7-77c8-4d37-9d06-0a4bb5272adb",
                "merchantRefNum": "ad9c23c2-509b-43ae-bf5d-64554c9fc378",
                "status": "INITIATED",
                "usage": "MULTI_USE",
                "paymentType": "CARD",
                "action": "NONE",
                "paymentHandleToken": "Cy4WEGJ9IWIkcUn",
                "card": {
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    }
                },
                "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                "billingDetails": {
                    "street": "Andhra bank lane",
                    "street2": "Manikonda",
                    "city": "Hyderabad",
                    "state": "TS",
                    "country": "IN",
                    "zip": "500089"
                },
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                }
            }


## Update a Customer Payment Handle [PUT /v1/customers/{customer_id}/paymenthandles/{paymenthandle_id}]
<a name="updatecustomerpaymenthandlerequest" title="Update a Customer Payment Handle"></a>

This is how you update a Customer Payment Handle. 

**Note:** You must provide all of the elements of the Payment Handle when you are updating it, including the elements that are not changing. 
Elements that are part of an existing Payment Handle but that are not included in the update request will be set to null in the resulting Payment Handle, with the exception of the *cardNum* element.

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.
    + paymenthandle_id:`218d68c7-77c8-4d37-9d06-0a4bb5272adb` (string, required) - This is the Payment Handle ID returned in the response to the [Customer Payment Handle creation request](#createcustomerpaymenthandlerequest).

+ Attributes 
    + Include PaymentHandleRequest Customer

+ Request Update a Payment Handle for a Customer (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
        
    + Body

            {
                "merchantRefNum": "xzcxzcwqeqwewewqer",
                "paymentType": "CARD",
                "currencyCode": "GBP",
                "customerIp": "10.10.12.64",
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                },
                "billingDetails": {
                    "street": "Andhra bank lane",
                    "street2": "Manikonda",
                    "city": "Hyderabad",
                    "state": "TS",
                    "country": "IN",
                    "zip": "500089"
                },
                "card": {
                    "cardNum": "4222222222222",
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    },
                    "cvv": "111"
                }
            }

+ Response 200 (application/json)
    
    + Body

            {
                "id": "218d68c7-77c8-4d37-9d06-0a4bb5272adb",
                "merchantRefNum": "ad9c23c2-509b-43ae-bf5d-64554c9fc378",
                "status": "INITIATED",
                "usage": "MULTI_USE",
                "paymentType": "CARD",
                "action": "NONE",
                "paymentHandleToken": "Cy4WEGJ9IWIkcUn",
                "billingDetails": {
                    "street": "Andhra bank lane",
                    "street2": "Manikonda",
                    "city": "Hyderabad",
                    "state": "TS",
                    "country": "IN",
                    "zip": "500089"
                },
                "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                },
                "card": {
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "12",
                        "year": "2021"
                    }
                }
            }

## Update a Multi-Use Customer Payment Handle with a Single-Use Payment Handle [PUT /v1/customers/{customer_id}/paymenthandles/{paymenthandle_id}]
<a name="updatemultiusepaymenthandlerequest" title="Update a Customer Multi-Use Payment Handle with a Single-Use Payment Handle"></a>

This is how you update a multi-use Customer Payment Handle using single-use payment handle token.

**Note:** You must provide all of the elements of the payment handle while creating single use payment handle when you are updating multi-use payment handle with it, including the elements that are not changing. Elements that are part of an existing payment handle but that are not included in the update request will be set to null in the resulting Payment Handle, with the exception of the *cardNum* element.

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.
    + paymenthandle_id:`218d68c7-77c8-4d37-9d06-0a4bb5272adb` (string, required) - This is the Payment Handle ID returned in the response to the [Customer Payment Handle creation request](#createcustomerpaymenthandlerequest).

+ Attributes 

    + `paymentHandleTokenFrom`:`SC7nLsLzHWVqI62i` (string, required) - This is the *paymentHandleToken* returned in the response while creating the single-use payment handle.
        _length<=36_

+ Request Update a Multi-Use Customer Payment Handle with a Single-Use Payment Handle (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
        
    + Body

             {
                 "paymentHandleTokenFrom":"SC7nLsLzHWVqI62i"
             }

+ Response 200 (application/json)

    + Body

            {
                "id": "218d68c7-77c8-4d37-9d06-0a4bb5272adb",
                "merchantRefNum": "ad9c23c2-509b-43ae-bf5d-64554c9fc378",
                "status": "INITIATED",
                "usage": "MULTI_USE",
                "paymentType": "CARD",
                "action": "NONE",
                "paymentHandleToken": "Cy4WEGJ9IWIkcUn",
                "merchantDescriptor": {
                    "dynamicDescriptor": "Casino slots payin",
                    "phone": "189134336"
                },
                "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                "card": {
                    "lastDigits": "2222",
                    "cardExpiry": {
                        "month": "01",
                        "year": "2032"
                    }
                }
            }


## Delete a Customer Payment Handle [DELETE /v1/customers/{customer_id}/paymenthandles/{paymenthandle_id}]
<a name="deletecardrequest" title="Delete a Card"></a>

This is how you delete a Customer Payment Handle. 

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) to which you are adding the Payment Handle.
    + paymenthandle_id:`218d68c7-77c8-4d37-9d06-0a4bb5272adb` (string, required) - This is the Payment Handle ID returned in the response to the [Customer Payment Handle creation request](#createcustomerpaymenthandlerequest).

+ Request Delete a Customer Payment Handle (application/json)

    + Headers        

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
            
+ Response 200 (application/json)

# Single-Use Tokens [/singleusecustomertokens]

## Create a Single-Use Customer Token [POST /v1/customers/{customer_id}/singleusecustomertokens]
<a name="createcustomersut" title="Create a Single-Use Customer Token"></a>

This is how you submit a Single-Use Customer Token creation request. The *paymentHandleToken* returned in the response can be [used for payment requests](#paymentrequest). 
The payment handle tokens are single use and are valid till limited time. 

+ Parameters
    + customer_id:`a5f1889d-f1be-4bbf-941d-fd9b8d09d5b1` (string,required) - This is the [ID of the customer](#createcustomerrequest) for which you are creating the single-use token.

+ Attributes
        + Include PaymentHandleRequest Customer
        + paymentTypes:`["CARD"]` (enum, required) - This specifies the payment type for which you are creating the single-use token.
            + Members
                + CARD 
    
+ Request Create a Single-Use Customer Token (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
        
    + Body

            {
                "paymentTypes": ["CARD"]
            }
        
+ Response 200  (application/json)

    + Body

             {
                 "id": "f39ebd23-e203-498f-9981-dfbc49882959",
                 "profileId": "59cce04e-e429-4016-9d3f-1e579f3aa2ad",
                 "timeToLiveSeconds": 899,
                 "status": "ACTIVE",
                 "singleUseCustomerToken": "SPFAB1cA5iwdu48H",
                 "paymentTypes": [
                     "CARD"
                 ],
                 "locale": "en_US",
                 "firstName": "John",
                 "middleName": "James",
                 "lastName": "Smith",
                 "dateOfBirth": {
                     "day": 24,
                     "month": 10,
                     "year": 1981
                 },
                 "email": "john.smith@email.com",
                 "phone": "777-444-8888",
                 "ip": "192.0.126.111",
                 "nationality": "Canadian",
                 "addresses": [{
                     "id": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                     "nickName": "Home",
                     "street": "100 Queen",
                     "street2": "Unit 201",
                     "city": "Toronto",
                     "state": "ON",
                     "country": "CA",
                     "zip": "M5H 2N2",
                     "phone": "647-788-3901",
                     "status": "ACTIVE",
                     "defaultShippingAddressIndicator": true
                 }],
                 "paymentHandles": [{
                     "id": "f258f338-ff2f-4bee-9560-0d476ed7c1b4",
                     "status": "INITIATED",
                     "usage": "SINGLE_USE",
                     "paymentType": "CARD",
                     "paymentHandleToken": "SClcqO9awdvdgjoe",
                     "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                     "card": {
                         "lastDigits": "0000",
                         "cardExpiry": {
                             "month": "10",
                             "year": "2020"
                         },
                         "cardBin": "403711",
                         "cardType": "VI",
                         "holderName": "Dilip"
                     }
                 }]
             }

## Get Single-Use Customer Token [GET /v1/singleusecustomertokens/{singleusecustomertoken_id}]
<a name="getcustomersut" title="Look Up a Card"></a>

This is how you look up a Single Use Customer Token using the ID returned in the response to the original request.
    
+ Parameters
    + singleusecustomertoken_id:`f39ebd23-e203-498f-9981-dfbc49882959` (string, required) - This is the Single-Use Customer Token ID returned in the response to the [Single-Use Customer Token creation request](#createcustomersut).

+ Response 200  (application/json)

    + Body

             {
                 "id": "f39ebd23-e203-498f-9981-dfbc49882959",
                 "profileId": "59cce04e-e429-4016-9d3f-1e579f3aa2ad",
                 "timeToLiveSeconds": 899,
                 "status": "ACTIVE",
                 "singleUseCustomerToken": "SPFAB1cA5iwdu48H",
                 "paymentTypes": [
                     "CARD"
                 ],
                 "locale": "en_US",
                 "firstName": "John",
                 "middleName": "James",
                 "lastName": "Smith",
                 "dateOfBirth": {
                     "day": 24,
                     "month": 10,
                     "year": 1981
                 },
                 "email": "john.smith@email.com",
                 "phone": "777-444-8888",
                 "ip": "192.0.126.111",
                 "nationality": "Canadian",
                 "addresses": [{
                     "id": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                     "nickName": "Home",
                     "street": "100 Queen",
                     "street2": "Unit 201",
                     "city": "Toronto",
                     "state": "ON",
                     "country": "CA",
                     "zip": "M5H 2N2",
                     "phone": "647-788-3901",
                     "status": "ACTIVE",
                     "defaultShippingAddressIndicator": true
                 }],
                 "paymentHandles": [{
                     "id": "f258f338-ff2f-4bee-9560-0d476ed7c1b4",
                     "status": "INITIATED",
                     "usage": "SINGLE_USE",
                     "paymentType": "CARD",
                     "paymentHandleToken": "SClcqO9awdvdgjoe",
                     "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                     "card": {
                         "lastDigits": "0000",
                         "cardExpiry": {
                             "month": "10",
                             "year": "2020"
                         },
                         "cardBin": "403711",
                         "cardType": "VI",
                         "holderName": "Dilip"
                     }
                 }]
             }

## Search Single-Use Customer Token [POST /v1/singleusecustomertokens/search]
<a name="createpaymenthandlerequest" title="Create a Payment Handle"></a>

This is how you can search for a Single-Use Customer Token. The *paymentHandleToken* returned in the response can be [used for payment requests](#paymentrequest).

+ Attributes
        + Include PaymentHandleRequest Customer

+ Request Search Single-Uset Customer Tokens (application/json)

    + Headers

            Authorization: Basic YOUR-BASE64-ENCODED-API-KEY
        
    + Body



+ Response 200  (application/json)

    + Body

             {
                 "id": "f39ebd23-e203-498f-9981-dfbc49882959",
                 "profileId": "59cce04e-e429-4016-9d3f-1e579f3aa2ad",
                 "timeToLiveSeconds": 899,
                 "status": "ACTIVE",
                 "singleUseCustomerToken": "SPFAB1cA5iwdu48H",
                 "paymentTypes": [
                     "CARD"
                 ],
                 "locale": "en_US",
                 "firstName": "John",
                 "middleName": "James",
                 "lastName": "Smith",
                 "dateOfBirth": {
                     "day": 24,
                     "month": 10,
                     "year": 1981
                 },
                 "email": "john.smith@email.com",
                 "phone": "777-444-8888",
                 "ip": "192.0.126.111",
                 "nationality": "Canadian",
                 "addresses": [{
                     "id": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                     "nickName": "Home",
                     "street": "100 Queen",
                     "street2": "Unit 201",
                     "city": "Toronto",
                     "state": "ON",
                     "country": "CA",
                     "zip": "M5H 2N2",
                     "phone": "647-788-3901",
                     "status": "ACTIVE",
                     "defaultShippingAddressIndicator": true
                 }],
                 "paymentHandles": [{
                     "id": "f258f338-ff2f-4bee-9560-0d476ed7c1b4",
                     "status": "INITIATED",
                     "usage": "SINGLE_USE",
                     "paymentType": "CARD",
                     "paymentHandleToken": "SClcqO9awdvdgjoe",
                     "billingDetailsId": "786cf0cd-4296-43ce-8a57-5f4675e3fafd",
                     "card": {
                         "lastDigits": "0000",
                         "cardExpiry": {
                             "month": "10",
                             "year": "2020"
                         },
                         "cardBin": "403711",
                         "cardType": "VI",
                         "holderName": "Dilip"
                     }
                 }]
             }

# Data Structures

## accordD
+ accordD (object)
    + Properties
        + `financingType`:`DEFERRED_PAYMENT` (enum) - This is the type of financing offered.
            + Members
                + DEFERRED_PAYMENT - Deferred payment financing
                + EQUAL_PAYMENT - Equal payment financing
        + `plan`:`124` (string) - This is the plan number for this financing transaction.
            _length<=3_
        + `gracePeriod`:`12` (number) - This is the grace period, in months, associated with deferred payment transactions.
            _max=99_
        + `term`:`12` (number) - This is the number of payments, in months, for equal payment transactions.
            _max=99_

## `Acquirer Data`

+ `acquirerData` (object) - This is additional information about your card acquirer, required **only when** you are using Credorax (CRX) as your acquirer. Contact your account manager for more information.

    _Read Only_
    
    + Properties
    - `authId`:`f06bccd6-de90-4b73-b10f-30266763bc60` (string) - This is the ID returned in the response to a previous successful Authorization or Settlement request.
        _length<=36_
    - `code`:`CRX` (enum) - This is the code for your card acquirer.
        _length<=10_
    - `externalSubMerchantId`:`ID123` (string) - This is the external merchant ID of the acquirer data.

## Address
+ `id`:`5d4db3bc-34c9-417f-a051-0d992ad9284e` (string) - This is the ID of request, returned in the response.
    _Read Only, length<=36_
+ nickName:`Home` (string) - This is an alias defined by the customer for this address (e.g., "home address").
    _length<=50_
+ street:`100 Queen` (string, required) - This is the first line of the customer's street address. **Note:** This is required only when the address is to be used in association with a bank account.
    _length<=50_
+ street2:`Unit 201` (string) - This is the second line of the customer's street address, if required.
    _length<=50_
+ city:`Toronto` (string, required) - This is the city where the address is located. **Note:** This is required only when the address is to be used in association with a bank account.
    _length<=40_
+ zip:`M5H 2N2` (string, required) - This is the zip, postal, or post code of the customer's address.
    _length<=10_
+ country:`CA` (string, required) - This is the country where the address is located. See [Country Codes](#countrycodes).
    _length=2_
+ state:`ON` (string) - This is the state/province/region in which the customer lives.
    _length<=40_
+ phone:`647-788-3901` (string) - This is the recipient's phone number.
    _length<=40_
+ defaultShippingAddressIndicator:`true` (boolean) - Flag to mark this address as the default shipping address.

## Addresses
+ addresses (array)
    + (object)
        + Properties
            + `id`:`5d4db3bc-34c9-417f-a051-0d992ad9284e` (string) - This is the ID of request, returned in the response.
                _Read Only, length<=36_
            + nickName:`Home` (string) - This is an alias defined by the customer for this address (e.g., "home address").
                _length<=50_
            + street:`100 Queen` (string, required) - This is the first line of the customer's street address. **Note:** This is required only when the address is to be used in association with a bank account.
                _length<=50_
            + street2:`Unit 201` (string) - This is the second line of the customer's street address, if required.
                _length<=50_
            + city:`Toronto` (string, required) - This is the city where the address is located. **Note:** This is required only when the address is to be used in association with a bank account.
                _length<=40_
            + zip:`M5H 2N2` (string, required) - This is the zip, postal, or post code of the customer's address.
                _length<=10_
            + country:`CA` (string, required) - This is the country where the address is located. See [Country Codes](#countrycodes).
                _length=2_
            + state:`ON` (string) - This is the state/province/region in which the customer lives.
                _length<=40_
            + phone:`647-788-3901` (string) - This is the recipient's phone number.
                _length<=40_
            + defaultShippingAddressIndicator:`true` (boolean) - Flag to mark this address as the default shipping address.

## Authentications Object
+ authentication (object) - These are the 3D Secure authentication details.
    + `id`:`5d4db3bc-34c9-417f-a051-0d992ad9284e` (string) - This is the ID of authentication, returned in the response.
        _Read Only, length<=36_
    + `eci`:`5` (number) - This is the [e-commerce indicator](#authenticationobject).
    + `cavv`:`AAABBhkXYgAAAAACBxdiENhf7A+=` (string) - This is the Cardholder Authentication Verification Value, indicating that the transaction has been authenticated.
        _length<=80_
    + `xid`:`aWg4N1ZZOE53TkFrazJuMmkyRDA=` (string) - This is the transaction identifier returned by the card issuer.
        _length<=40_
    + `status`:`COMPLETED` (enum) -This is the status of authentication request.
        _Read Only_
        + Members
            + COMPLETED
            + FAILED
    + `merchantRefNum`:`merchantABC-123-authentications` (string) - This is the merchant reference number for the authentication request.
        _length<=255_
    + `threeDEnrollment`:`Y` (enum) - This indicates whether or not the cardholder is enrolled in 3D Secure.
        + Members
            + Y - Cardholder authentication available
            + N - Cardholder not enrolled in authentication
            + U - Cardholder authentication unavailable
    + `threeDResult`:`Y` (enum) - This indicates the outcome of the Authentication.
        + Members
            + Y - The cardholder successfully authenticated with their card issuer.
            + A - The cardholder authentication was attempted.
            + N - The cardholder failed to successfully authenticate with their card issuer.
            + U - Authentication with the card issuer was unavailable.
            + E - An error occurred during authentication.
    + `signatureStatus`:`Y` (enum) - This is the 3D Secure signature verification result value.
        + Members
            + Y - All transaction and signature checks satisfied.
            + N - At least one transaction or signature check failed.
    + Include Authentication Errors

## Authentication Errors
+ error (object) -This is the error details of authentication.
    + `code`:`5016` (string) - This is the error code.
    + `message`:`Account not found.` (string) - This is the description of the error.
    + `fieldErrors` (array) - This is a list of fields that have issues.
        + `field`:`amount` (string) - Field name.
        + `error`:`Contain invalid characters` (string)  - Error associated with the field name.

## Billing Details
+ billingDetails (object) - These are the customer's billing details.
    + street:`100 Queen` (string)  - This is the first line of the street address in the billing address.
        _length<=50_
    + street2:`Unit 201` (string) - This is the second line of the street address in the billing address, if required (e.g., apartment number).
        _length<=50_
    + city:`Toronto` (string) - This is the city in the billing address.
        _length<=40_
    + zip:`MSH 2N2` (string) - This is the postal/zip code in the billing address.
        _length<=10_
    + country:`CA` (string) - This is the country where the address is located. See [Country Codes](#countrycodes).
        _length=2_
    + state:`ON` (string) - This is the state or province of the billing address. For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions.
        _length<=40_
    + phone:`444-9999` (string) - This is the customer's telephone number.
        _length<=40_
    + `nickName`:`Home` (string) - This is the nickname the merchant has for the billing address.
        _length<=50_

## Customer Base
+ `id`:`5d4db3bc-34c9-417f-a051-0d992ad9284e` (string) - This is the ID of the request, returned in the response.
    _Read Only, length<=36_
+ merchantCustomerId:`mycustomer10` (string, required) - This is a customer ID that the merchant provides with the request for their own internal customer identification. This value must be unique for each customer belonging to a merchant.
    _length<=100_
+ locale:`en_US` (enum, required) - This indicates the language of the customer.
    - en_US
    - fr_CA
    - en_GB
+ firstName:`John` (string) - This is the customer's first name.
    _length<=80_
+ middleName:`James` (string) - This is the customer's middle name.
    _length<=80_
+ lastName:`Smith` (string) - This is the customer's last name.
    _length<=80_
+ Include Date of Birth
+ email:`john.smith@email.com` (string) - This is the customer's email address.
    _length<=255_
+ phone:`777-444-8888` (string) - This is the customer's phone number.
    _length<=40_
+ ip:`192.0.126.111` (string) - This is the customer’s IP address.
    _length<=46_
+ gender:`M` (enum) - This is the customer’s gender.
    - F
    - M
+ nationality:`Canadian` (string) - This is the customer’s nationality.
    _length<=30_
+ cellPhone:`777-555-8888` (string) - This is the customer’s cell phone number.
    _length<=40_
+ status:`ACTIVE` (enum) - This is the status of the customer, returned in the response.
    _Default: ACTIVE_
    - ACTIVE
    - INITIAL


## Date of Birth
+ `dateOfBirth` (object, required) - This is the customer's date of birth. 

    + Properties
        + `day`:`29` (number, required) - This is the day of birth.
            _length=2_
        + `month`:`12` (number, required) - This is the month of birth.
            _length=2_
        + `year`:`2020` (number, required) - This is the year of birth.
            _length=4_

## Error Attributes
+ `error` (object) 
    _Read Only_
    + Properties
        + `code`:`1001` (string) - This is the error code.
        + `message`:`An internal error occurred.` (string) - This is the description of the error.
        + `riskReasonCode`:`text` (string) - If applicable, this is the corresponding system reason code.
        + `details` (array) - If applicable, this is a collection of detailed descriptions.
        + `fieldErrors` (array) - If applicable, this is a list of fields that have issues.
            + `field`:`street` (string) - This is the field name. 
            + `error`:`Unexpected characters` (string) This is the error associated with the field name.
        + `links` (array) - If applicable, this is a list of links to the related resource.
            + `rel` (string) - This is the description or relation of the link, e.g., default, self, first, prev, next, last.
            + `href` (string) - This is the actual URL of the link.

## Gateway Response
+ `gatewayResponse` (object) - This is the raw response returned by an acquirer. It is returned only if your account is configured accordingly.
    _Read Only_

    + Properties
        + code (string) - This is acquirer identification code, such as DJN, CRX, etc.
            _Read Only_
        + responseCode (string) - This is the raw response returned by the acquirer.
            _Read Only_
        + avsCode (string) - This is the raw AVS code returned by the acquirer.
            _Read Only_
        + balanceResponse (string) - This is the balance remaining on a gift card, if a gift card was used for the original transaction.
            _Read Only_
        + mid (string) - This is the acquirer MID that was sent to the clearing house.
            _Read Only_
        + terminalId (string) - This is the merchant's terminal ID.
            _Read Only_
        + batchNumber (string) - This is the batch number.
            _Read Only_
        + seqNumber (string) - This is the merchant's sequence number.
            _Read Only_
        + effectiveDate (string) - This is the date of the bank deposit associated with the transaction.
            _Read Only_
        + financingType (string) - This is the type of financing offered.
            _Read Only_
        + plan (string) - This is the plan number for this financing transaction.
            _Read Only_
        + gracePeriod (string) - This is the grace period, in months, associated with deferred payment transactions.
            _Read Only_
        + term (string) - This is the number of payments, in months, for equal payment transactions.
            _Read Only_
        + responseId (string) - This is the response ID assigned by Credorax.
            _Read Only_
        + requestId (string) - This is the request ID assigned by Paysafe.
            _Read Only_
        + description (string) - This is a description of the response.
            _Read Only_
        + authCode (string) - This is the authorization code.
            _Read Only_
        + txnDateTime (string) - This is the transaction date and time.
            _Read Only_
        + referenceNbr (string) - This is the bank net transaction Id/Merch Tran Ref
            _Read Only_
        + responseReasonCode (string) - This is the raw response reason code returned by Credorax.
            _Read Only_
        + cvv2Result (string) - This is the raw cvv2 result code.
            _Read Only_

## Level2Level3

+ `level2Level3` (object) - This allows merchants who are enabled to provide additional [L2/L3 transaction data](#level2level3object). Not all processing gateways support this parameter. Contact your account manager for more information.
    + exemptLocalTax:true (boolean) - This indicates whether or not local tax is exempted for the request. 
    + localTaxAmount:1500 (number) - This is the local sales tax applied to the purchase.
        _length<=99999999999_
    + nationalTaxAmount:0 (number) - This is the national tax included in the transaction amount.
        _length<=99999999999_
    + freightAmount:0 (number) - This is the freight or shipping portion of the total transaction amount.
        _length<=99999999999_
    + dutyAmount:0 (number) - This is the duty associated with the import of the purchased goods.
        _length<=99999999999_
    + destinationZip:90210 (string) - This is the postal/zip code of the address to which the purchased goods will be delivered.
        _length<=10_
    + destinationCountry:US (string) - This is the country to which the goods are being shipped.
        _length=2_
    + shipFromZip:90211 (string) - This is the postal/zip code of the address from which the purchased goods are being shipped.
        _length<=10_
    + Include Line Items
            
## Line Items

+ `lineItems` (object) - This is more [detailed information](#lineitemsobject) about the items that are being purchased.
    + description:Disney Cruise Line (string, optional) - This is a description of the item(s) being purchased.
        _length<=50_
    + productCode:DCL (string) - This is a merchant-defined description code of the item being purchased.
        _length<=12_
    + quantity:4 (number) - This is the quantity of the item.
        _length<=99999999999_, _max 4 decimals_
    + unitAmount:120000 (number) - This is the unit price of the item being purchased, in minor units. The currency will be based on the account setting.
        _length<=99999999999_
    + taxRate:5 (number) - This is the tax rate used to calculate the tax amount.
        _length<=100_, _max 2 decimals_
    + taxAmount:24000 (number) - This is the amount of any value-added taxes that can be associated with the purchased item, in minor units.
        _length<=99999999999_
    + totalAmount:504000 (number) - This is the total amount of the line item, typically calculated as price multiplied by quantity, in minor units.
        _length<=99999999999_

## Metadata Object
+ metadata (object) 
    _Read Only_
    + Properties
        + `key`:`Data` (string) - This is a description of the data being added to the order.
            _length<=50_
        + `value`:`Data to add` (string) - This is the value for the key/value pair.
            _length<=100_

## OriginalCreditResponse (object)
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., lookups.
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _length<=255_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string, required) - This is the payment token generated by Paysafe that will be used for the request.
    _length<=36_
+ `amount`:`1000` (string, required) - This is the amount of the request, in minor units. 
    _Max =99999999999_
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD.
    _Read Only, max=3_
+ `dupCheck`:`true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    + Default: true
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status`:`PENDING` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The authorization request has been fully reversed.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ `description`:`Purchase Credit` (string) - This is a description of the transaction, provided by the merchant.
    _length<=255_
+ `customerIp`:`204.91.0.12` (string) - This is the customer's IP address.
    _length<=39_

## Partial Auth
+ partialAuth (object)
    + `requested`:`true` (boolean) - This specifies whether or not a partial authorization was requested.
        + Default: false
    + `amountDue`:`1000` (number) - This is the amount of the full authorization that is not covered by the Payment request.
        _max=99999999999_
    + `originalAmount`:`2000` (number) - This is the actual amount of the full authorization.
        _max=99999999999_

## Payment Methods Get
+ paymentMethods (object)
    + `paymentMethod`:`CARD` (enum) - This is the payment type associated with this payment method.
        _Read Only_
        + Members
            + CARD
            + PAYSAFECASH
            + PAYSAFECARD
    + currencyCode:`USD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD.
        _Read Only, max=3_
    + `accountId`: `1009355920` (string) - This is the merchant account for which the payment method and currency are enabled.
        _Read Only, length<=10_
            

## PaymentHandleRequest (object)

+ `id`:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the Payment Handle. 
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _length<=255_
+ `transactionType`:`PAYMENT` (enum, required) - This specifies the transaction type for which the Payment Handle is created.
    + Members
        + PAYMENT - Payment Handle is created to continue the Payment.
        + STANDALONE_CREDIT - Payment Handle is created to continue the Standalone Credit.
        + ORIGINAL_CREDIT - Payment Handle is created to continue the Original Credit.
        + VERIFICATION - Payment Handle is created to continue the Verification request.
+ `status`:`PAYABLE` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + INITIATED - The transaction was initiated with the downstream provider.
        + PAYABLE - The merchant can use the Payment Handle for a Payment request.
        + PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
        + FAILED - The transaction failed due to either an error or being declined. 
        + EXPIRED - The Payment Handle expired because the merchant did not proceed with the Payment request. 
        + COMPLETED - The Payment request was initiated successfully using the Payment Handle.
+ `usage`:`SINGLE_USE` (enum) - This specifies how the Payment Handle will be used for Payments.
    _Read Only_
    + Members
        + SINGLE_USE - The Payment Handle can be used for one transaction only and expires if not used.
        + MULTI_USE - The Payment Handle can be used multiple times.
+ `paymentType`:`CARD` (enum, required) - This is the payment type associated with this Payment Handle.
    + Members
        + CARD
        + PAYSAFECASH
        + PAYSAFECARD
+ `action`:`NONE` (enum) - This specifies the next step of the user journey once they proceed to the Payment.
    _Read Only_
    + Members
        + NONE - No action is required, e.g., for a standard credit card Payment.
        + REDIRECT -The user must be redirected in order to complete a Payment, e.g., when an alternate payment method like Paysafecard is used.
+ `executionMode`:`SYNCHRONOUS` (enum) - This specifies the action of the merchant server in order to complete the Payment.
    + Members
        + ASYNCHRONOUS - The Payment request is not completed immediately and the merchant [must rely on webhooks](#paymentswebhooks) to retrieve the status of the Payment request.
        + SYNCHRONOUS - The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.
+ `amount`:`1000` (string) - This is the amount of the request, in minor units. **Note:** This field is mandatory if *transactionType* is included.
    _Max =99999999999_
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD.
    _Read Only, max=3_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string, required) - This is the payment token generated by Paysafe that will be used by merchants for Payment API requests.
    _Read Only, length<=36_
+ Include Payment Instrument
+ Include Billing Details
+ `returnLinks` (object) - The URL endpoints to redirect the customer to after a redirection to an alternative payment or 3D Secure site. You can customize the return URL based on the transaction status. 
    + `rel`(enum) -This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. 
        + default (string, required) - The default return URL that will be used if specific status return URL is not defined.
        + on_completed (string) - Will be returned to this URL if the payment is completed.
        + on_failed (string) - Will be returned to this URL if the payment fails.
    + `href` - The actual URL
    + `method` - The HTTP method
+ links (object) - This is an array of links related to the resource.
    + `rel`: `redirect_payment` (enum)
    + `href`:`http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709`
    + `method`:`GET`
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _length<=39_
+ `timeToLiveSeconds`:`1212121212` (number) - This is the period of time, in seconds, the *paymentHandleToken* is valid before expiration. 
    _Read Only, length<=899_

## PaymentHandleRequest Customer

+ `id`:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the Payment Handle. 
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _length<=255_
+ `status`:`PAYABLE` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + INITIATED - The transaction was initiated with the downstream provider.
        + PAYABLE - The merchant can use the Payment Handle for a Payment request.
        + PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
        + FAILED - The transaction failed due to either an error or being declined. 
        + EXPIRED - The Payment Handle expired because the merchant did not proceed with the Payment request. 
        + COMPLETED - The Payment request was initiated successfully using the Payment Handle.
+ `usage`:`SINGLE_USE` (enum) - This specifies how the Payment Handle will be used for Payments.
    _Read Only_
    + Members
        + SINGLE_USE - The Payment Handle can be used for one transaction only and expires if not used.
        + MULTI_USE - The Payment Handle can be used multiple times.
+ `paymentType`:`CARD` (enum, required) - This is the payment type associated with this Payment Handle.
    + Members
        + CARD
        + PAYSAFECASH
        + PAYSAFECARD
+ `executionMode`:`SYNCHRONOUS` (enum) - This specifies the action of the merchant server in order to complete the Payment.
    + Members
        + ASYNCHRONOUS - The Payment request is not completed immediately and the merchant [must rely on webhooks](#paymentswebhooks) to retrieve the status of the Payment request.
        + SYNCHRONOUS - The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.
+ `amount`:`1000` (string) - This is the amount of the request, in minor units. **Note:** This field is mandatory if *transactionType* is included.
    _Max =99999999999_
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD.
    _Read Only, max=3_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string, required) - This is the payment token generated by Paysafe that will be used by merchants for Payment API requests.
    _Read Only, length<=36_
+ Include Payment Instrument
+ Include Billing Details
+ `returnLinks` (object) - The URL endpoints to redirect the customer to after a redirection to an alternative payment or 3D Secure site. You can customize the return URL based on the transaction status. 
    + `rel`(enum) -This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. 
        + default (string, required) - The default return URL that will be used if specific status return URL is not defined.
        + on_completed (string) - Will be returned to this URL if the payment is completed.
        + on_failed (string) - Will be returned to this URL if the payment fails.
    + `href` - The actual URL
    + `method` - The HTTP method
+ links (object) - This is an array of links related to the resource.
    + `rel`: `redirect_payment` (enum)
    + `href`:`http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709`
    + `method`:`GET`
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _length<=39_
+ `timeToLiveSeconds`:`1212121212` (number) - This is the period of time, in seconds, the *paymentHandleToken* is valid before expiration. 
    _Read Only, length<=899_

## PaymentHandleRequest Object
+ paymentHandleRequest (object)
    + `id`:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the Payment Handle. 
        _Read Only, length<=36_
    + `paymentHandleTokenFrom`:`7576835c-0396-11e9-8eb2-f2801f1b9fd1` (string) - This is an existing Payment Handle token, from which payment instrument and profile details can be retrieved.
        _length<=36_
    + `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
        _length<=255_
    + `transactionType`:`PAYMENT` (enum, required) - This specifies the transaction type for which the Payment Handle is created.
        + Members
            + PAYMENT - Payment Handle is created to continue the Payment.
            + STANDALONE_CREDIT - Payment Handle is created to continue the Standalone Credit.
            + ORIGINAL_CREDIT - Payment Handle is created to continue the Original Credit.
            + VERIFICATION - Payment Handle is created to continue the Verification request.
    + `status`:`PAYABLE` (enum) - This is the status of the transaction request.
        _Read Only_
        + Members
            + RECEIVED - Paysafe has received the request and is waiting for the downstream processor’s response.
            + INITIATED - The transaction was initiated with the downstream provider.
            + PAYABLE - The merchant can use the Payment Handle for a Payment request.
            + PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
            + FAILED - The transaction failed due to either an error or being declined. 
            + CANCELLED - The authorization request has been fully reversed.
            + EXPIRED - The Payment Handle expired because the merchant did not proceed with the Payment request. 
            + COMPLETED - The Payment request was initiated successfully using the Payment Handle.
    + `usage`:`SINGLE_USE` (enum) - This specifies how the Payment Handle will be used for Payments.
        _Read Only_
        + Members
            + SINGLE_USE - The Payment Handle can be used for one transaction only and expires if not used.
            + MULTI_USE - The Payment Handle can be used multiple times.
    + `paymentType`:`CARD` (enum, required) - This is the payment type associated with this Payment Handle.
        + Members
            + CARD
            + PAYSAFECASH
            + PAYSAFECARD
    + `action`:`NONE` (enum) - This specifies the next step of the user journey once they proceed to the Payment.
        + Members
            + NONE
            + REDIRECT
    + `executionMode`:`SYNCHRONOUS` (enum) - This specifies the action of the merchant server in order to complete the Payment.
        + Members
            + ASYNCHRONOUS - The Payment request is not completed immediately and the merchant [must rely on webhooks](#paymentswebhooks) to retrieve the status of the Payment request.
            + SYNCHRONOUS - The status of the Payment request will be returned synchronously to the merchant, e.g., a credit card request.
    + `amount`:`1000` (string) - This is the amount of the request, in minor units. **Note:** This field is mandatory if *transactionType* is included.
        _Max =99999999999_
    + `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD.
        _Read Only, max=3_
    + `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string) - This is the payment token generated by Paysafe that will be used by merchants for Payment API requests.
        _Read Only, length<=36_
    + Include Payment Instrument
    + Include Profile
    + Include Billing Details
    + `returnLinks` (object) - The URL endpoints to redirect the customer to after a redirection to an alternative payment or 3D Secure site. You can customize the return URL based on the transaction status. 
        + `rel` (enum) -This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. 
            + default (string, required) - The default return URL that will be used if specific status return URL is not defined.
            + on_completed (string) - Will be returned to this URL if the payment is completed.
            + on_failed (string) - Will be returned to this URL if the payment fails.
        + `href` - The actual URL
        + `method` - The HTTP method
    + `links` (object) - This is an array of links related to the resource.
        + `rel`:`redirect_payment` (enum)
        + `href`:`http://api.paysafe.com/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709`
        + `method`:`GET`
    + `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
        _length<=39_
    + `timeToLiveSeconds`:`899` (number) - This is the period of time, in seconds, the *paymentHandleToken* is valid before expiration. 
        _Read Only, length<=899_

## `Payment Instrument`

+ One of

    + card (object, required) - This is the payment token that represents the [card](#cardobject) used for the request. Only one payment instrument object (e.g., *card* or *paysafecash*) can be included in the request.

        + Properties

            + paymentToken:`LTEyMzYzMjQ3ODg` (string, required) - This is the payment token representing the card.
                _length<=80_
            + cvv:`123` (string, optional) - This is the 3- or 4-digit security code that appears on the card following the card number.
                _length=3-4_

    + card (object, required) - These are the details of the [card](#cardobject) used for the request. Only one payment instrument object (e.g., *card* or *paysafecash*) can be included in the request.

        + Properties

            + cardNum:`4111111111111111` (string, required) - This is the card number used for the request.
                _length=8-20_
                
            + cardExpiry (object, required) - This is the card's [expiry date](#cardexpiryobject).
                + month:12 (number, required) - This is the card expiry month.
                    _length=2_
                + year:2020 (number, required) - This is the card expiry year.
                    _length=4_
            + cvv:`123` (string) - This is the 3- or 4-digit security code that appears on the card following the card number.
                _length=3-4_
            + `merchantDescriptor` (object) - This is the merchant descriptor that will be displayed on the customer's card statement.
                + `dynamicDescriptor`:`OnlineStore` (string) - This is a merchant descriptor that will be displayed on a customer’s statement.
                    _length<=20_
                + `phone`:`999-8888` (string) - This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s statement.
                    _length<=13_
            + holdername:`Jane Smith` (string) - This is the name of the card holder.
                _Read Only_
            + type (enum) - This is type of card used for the request.
                _Read Only_
                - AM – American Express
                - DI – Discover
                - JC – JCB
                - MC – Mastercard
                - MD – Maestro
                - SO – Solo
                - VI – Visa
                - VD – Visa Debit
                - VE – Visa Electron
            + lastDigits:`1111` (string) - These are the last four digits of the card used for the request.
                _Read Only, length=4_
            + nickName:`Jane's Card` (string) - This is the nickname the merchant has for the card holder.
                _length<=50_
            + cardBin:`411111` (string) - This is the card BIN (typically the first 6 digits).
                _Read Only, length=6_
        
    + paysafecard (object, required) - These are the details of the [paysafecard](#paysafecardobject) used for the request. Only one payment instrument object (e.g., *card* or *paysafecash*) can be included in the request.
        + Properties
            + `consumerId`:`merchantclientid` (string, required) - This is the merchant's unique identifier of the customer. For security purposes, if any personal data is used (e.g., customer's user name, email address, etc.), it has to be encrypted or hashed.
            + `ageRestriction`:`18` (number) - This is the minimum age restriction for the transaction.
            + `kycLevelRestriction`:`SIMPLE` (string) - This is the KYC level that will be required for the transaction. Possible values are FULL and SIMPLE.
            + `countryRestriction`:`DE` (string) - This is the code of the country to which the transaction will be restricted. See [Country Codes](#countrycodes).
                _length=2_

    + paysafecash (object, required) - These are the details of the [paysafecash](#paysafecashobject) used for the request. Only one payment instrument object (e.g., *card* or *paysafecash*) can be included in the request.
        + Properties
            + `consumerId`:`merchantclientid` (string, required) - This is the merchant's unique identifier of the customer. For security purposes, if any personal data is used (e.g., customer's user name, email address, etc.), it has to be encrypted or hashed.
            + `ageRestriction`:`18` (number) - This is the minimum age restriction for the transaction.
            + `kycLevelRestriction`:`SIMPLE` (string) - This is the KYC level that will be required for the transaction. Possible values are FULL and SIMPLE.
            + `countryRestriction`:`DE` (string) - This is the code of the country to which the transaction will be restricted. See [Country Codes](#countrycodes).
                _length=2_

## PaymentsRequest (object)

+ `id`:`3aeb9c63-6386-46a3-9f8e-f452e722228a` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., looking up the Payment. 
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _length<=255_
+ `amount`:`1000` (number, required) - This is the amount of the request, in minor units.
    _max=99999999999_
+ `dupCheck`:`false` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.
    + Default: true
+ `settleWithAuth`:`true` (boolean) - This indicates whether the request is an Authorization only (no Settlement) or a Purchase (Authorization and Settlement).
    + Default: true
+ `preAuth`:`false`  (boolean) - This indicates whether the Authorization request should be sent as a Pre-Authorization. You should use the *preAuth* element in cases where you are not sure that you can fully settle the Authorization within 4 days. Contact your account manager for more information.
+ Include Partial Auth
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string) - This is the payment token generated by Paysafe that will be used for the Payment request.
    _length<=36_
+ `availableToSettle`:`0` (number) -This is the amount of of the Authorization remaining to settle, in minor units.
    _Read Only_
+ `childAccountNum`:`3216549877` (string) - This is the child merchant account number. It is returned only if the transaction was processed via a master account.
    _length<=10_
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _length<=39_
+ `description`:`Consumer Purchase` (string) - This is a description of the transaction, provided by the merchant.
    _length<=255_
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status`:`COMPLETED` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response.
        + COMPLETED - The request was completed.
        + HELD - The request has been placed on hold due to risk considerations.
        + FAILED - The transaction failed, due to either an error or being declined.
        + CANCELLED - The request authorization request has been reversed.
        + PENDING - The transaction awaiting payment service provider's response.
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD.
    _Read Only, max=3_
+ Include Level2Level3
+ Include Gateway Response
+ Include accordD
+ Include Recipient
+ `riskReasonCode`:`1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.
+ Include Splitpay
+ Include Stored Credential
+ settlements (array) - This is the list of all Settlements. This will be returned only if *settleWithAuth* = *true* in the request.
+ Include Acquirer Data
+ Include Error Attributes
+ Include Metadata Object
+ `statusReason` - This is reason for the status. This is present in case of ERROR, FAILURE, HELD status.
    _length<=255_
+ Include Authentications Object

## Profile

+ `profile` (object) 
    + `id`:`de39b080-03aa-11e9-8eb2-f2801f1b9fd1` (string) -  This is the ID returned in the response. **Note:** If you do not include the profile ID, you must provide other customer details like firstName, lastName, and email. 
        _length<=36_
    + `status`:`ACTIVE` (enum) - This is the status of the customer profile, returned in the response.
        + Members
            + ACTIVE
    + `merchantCustomerId`:`mycustomer10` (string) - This is the reference number for the customer created by the merchant and submitted as part of the request. It must be unique for each customer.
        _length<=255_
    + `firstName`:`Jane` (string) - This is the customer’s first name.
        _length<=80_
    + `lastname`:`Smyth` (string) - This is the customer's last name.
        _length<=80_
    + `locale`:`ca_en` (enum) - This indicates the customer's locale.
        + Members
            + en_US
            + fr_CA
            + en_GB
    + Include Date of Birth
    + `email`:`jane.smyth@email.com` (string) - This is the customer's email address.
        _length<=255_
    + `phone`:`12345678` (string) - This is the customer's phone number.
        _length<=40_
    + `mobile`:`4446666` (string) - This is the customer's mobile phone number. 
        _length<=40_
    + `gender`:`M` (enum) - This is the customer’s gender.
        - F
        - M
    + `nationality`:`Indian` (string) - This is the customer’s nationality.
        _length<=30_

## Recipient (object)
+ `recipient` (object) - The recipient is deemed to be the person or party who has the contractual relationship with the merchant/financial institution.
    + `dateOfBirth` (object) - This is the date of birth of the recipient.
        + `day`:`24` (number) - This is the day of birth.
        + `month`:`12` (number) - This is the month of birth.
        + `year`:`1990` (number) - This is the year of birth.
    + `zip`:`EC4Y 0HQ` - This is the zip/postal code of the recipient.
        _length<=10_
    + `lastName` - This is the last name of the recipient.
        _length<=255_
    + `accountNumber` - This is the account number of the recipient.
        _length<=25_

## Refunds
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
    _Read Only, length<=36_
+ `merchantRefNum`:`P1234` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _length<=255_
+ `amount`:`100` (number) - This is the amount of the request, in minor units. If this value is not provided, the full remaining amount on the Settlement will be refunded. 
    _max=99999999999_
+ `dupCheck`:`true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    + Default: true
+ `childAccountNum`:`1234567898` (string) - This is the child merchant account number. It is returned only when the transaction is processed via a master account.
    _length<=10`
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status`:`PENDING` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The request has been cancelled.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ Include Error Attributes
+ Include Splitpay
+ `riskReasonCode`:`1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.        
+ Include Gateway Response

## Settlements
+ `id`: `25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
    _Read Only, length<=36_
+ `merchantRefNum`: `P1234` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _length<=255_
+ `amount`: `100` (number) - This is the amount of the request, in minor units. If this value is not provided, the full remaining amount on the Authorization will be settled. 
    _max=99999999999_
+ `dupCheck`: `true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    + Default: true
+ `availableToRefund`:`25` (number) - This is the amount of of the Authorization remaining to refund, in minor units.
    _Read Only, max=99999999999_
+ `childAccountNum` : `1234567898` (string) - This is the child merchant account number. It is returned only when the transaction is processed via a master account.
    _length<=10`
+ `status`:`PENDING` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The request has been cancelled.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ Include Error Attributes
+ Include Splitpay
+ `riskReasonCode`: `1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.        
+ Include Gateway Response

## Splitpay
+ splitpay (array, optional) - For Splitpay transactions only, an array containing the linked accounts and the amount shared with each. You must include either *amount* or *percent*. However, you cannot include both values.
    + (object)
        + Properties
            + linkedAccount:`123124124` (string, required) - This is the ID of the linked account. This account must already be linked to the merchant account.
            + One of
                + amount:`505` (number) - This is the amount to transfer to the linked account in minor currency units.
                + percent:`5` (number) - This is the percentage of the total transaction amount to transfer to that account.

## statusAttributes (enum) - This is the status of the request.
+ RECEIVED - Our system has received the request and is waiting for the downstream processor’s response.
+ INITIATED - The transaction was initiated with the downstream provider.
+ PAYABLE - The merchant can proceed with the Payment request.
+ PROCESSING - The Payment Handle was authorized by customer, awaiting PSP response.
+ FAILED - The transaction failed, due to either an error or being declined. 
+ CANCELLED - The authorization request has been fully reversed.
+ EXPIRED - The Payment Handle expired due to merchant not proceeding with Payment request.
+ COMPLETED - The Payment request was initiated successfully using the Payment Handle.

## `Stored Credential`
+ storedCredential (object) - This object is used to identify authorization requests that use stored credentials for a consumer's authorization request, in order to improve authorization rates and reduce fraud. Stored credentials can be used in two cases: using a payment token from the Customer Vault for an authorization, and using a card number stored by the merchant for an authorization.

    + Properties
        + type:`ADHOC` (enum) - This specifies the type of request being made. 
            + ADHOC – Ad hoc consumer-initiated request.
            + TOPUP – Unscheduled merchant iniitated request when a consumer balance is below a set limit.
            + RECURRING –  Scheduled merchant initiated recurring request.
            
            + Default: ADHOC
        + occurrence:`RECURRING` (enum) - This specifies whether the stored credential request is initial or recurring. 
            + INITIAL – Used when this is the first time the consumer uses this credit card.
            + SUBSEQUENT – Used when the consumer uses this credit card for subsquent requests.
            
            + Default: INITIAL

## VerificationResponse (object)
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e,g., looking up the Verification.
    _Read Only, length<=36_
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string, required) - This is the payment token generated by Paysafe that will be used for the Verification request.
    _length<=36_
+ `merchantRefNum`:`P1234` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _length<=255_
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _length<=39_
+ `dupCheck`:`true` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
    + Default: true
+ `description`:`Consumer Card Verification` (string) - This is a description of the transaction, provided by the merchant.
    _length<=255_
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The authorization request has been fully reversed.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD, returned in the request response.
    _Read Only, max=3_
+ `riskReasonCode`:`1001` (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.
+ Include Gateway Response
+ Include Error Attributes

## voidAuthResponse (object)
+ `id`:`25f6dadf-176a-415f-95c9-6ff39ff697ba` (string) This is the ID returned in the response. This ID can be used for future associated requests, e,g., lookups.
    _Read Only, length<=36_
+ `merchantRefNum`:`P1234` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request.
    _length<=255_
+ `amount`:`100` (number, required) - This is the amount of the request, in minor units.
    _max=99999999999_
+ `txnTime`:`2018-12-11T16:33:49Z` (string) - This is the date and time the transaction was processed.
    _Read Only_
+ `status` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Our system has received the request and is waiting for the downstream processor’s response. 
        + INITIATED - The transaction was initiated with the downstream provider.
        + PENDING - The transaction awaiting payment service provider's response.
        + FAILED - The transaction failed, due to either an error or being declined. 
        + CANCELLED - The request has been cancelled.
        + EXPIRED - The request expired. 
        + COMPLETED - The request was completed.
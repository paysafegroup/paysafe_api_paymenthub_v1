FORMAT: 1A
HOST: https://api.test.paysafe.com/paymenthub/

# Paysafe Payments API 

# QUESTIONS
 * The CANCELLED status for payment handle talks about an auth request being reversed. Is this correct?
 * Can you include both *consumerOperation* and *transactionType*? Doc says you must include at least one of them, but not that they are mutually exclusive.
 * In Confluence, the paymentType has PAYSAFECASH and PAYSAFECARD, but the Apiary document has PAYSAFE_CASH and PAYSAFE_CARD, so wondering which is right.
 * track1 and track2 are included in the Apiary example, but not in the *card* object in Confluence.
 * Apiary has *card* element but Confluence card object has *cardType* element.
 * Related, can someone verify that the list of card types is accurate?
 * savePaymentInstrument is mentioned in the profile but not documented anywhere that I can see in Confluence or in the Apiary document.
 * The elements in *profile* are different when you compare the Confluence object and the object defined in the Apiary document.
 * The behaviour when including profile ID is not clear in the Apiary document provided (e.g., will profile fields provided overwrite existing profile fields?).
 * Where do all the values for the *profile* elements come from? I see that *profile* is part of the *paymentHandle* object but it's not clear how/when to use it.
 * billingDetails object in Apiary contains *phone*, but it does not in Confluence object.
 * Length of *timeToLiveSeconds* element?
 * Where does *metadata* object appear in API?
 * In Apiary payment handle examples, the first example (create payment handle witout 3DS) and the second example (create payment handle with 3DS enabled) have exactly the same parameters. What makes them different?
 * In the examples below, when you look up a payment handle using the *merchantRefNum* parameter, there is no *paymentToken* included in the response (whereas it is included when you look it up using the *id*). Is this accurate?
 * Max for merchantRefNum for payment handles is 100, while it is set to 255 for payments. Is this accurate?
 * What is length of externalSubMerchantId element?
 * Merchant 3DS config done in Merchant Portal by merchant.
 * Does *partialAuth* default to *false*?
 * Is *paymentHandleToken* not required for a payment request?
 * The *paymentHandle* object is listed in the table of parameters for the payment request object. Is this returned in some responses (it's not in the Confluence or Apiary examples)? Is the whole object returned? And when?
 * Is there any validation if the IP address provided in the Payment Handle does not match the IP address provided in the Payment request?

# Release Notes

| Version   | Date          | Details |
|---        |---            |---      |
| v1        | January 2019  | Document release |

# Overview

**UPDATE THIS SECTION WITH NEW MATERIAL**

Text
* Bullet points

<a name="apikey" title="Authentication"></a>
# Authentication

In order for you to use the Paysafe Payments RESTful API, Paysafe must first set you up on their system
and provide you with an API key. Your API key will have the following format:

 * Key Username – MerchantXYZ
 * Key Password – B-tst1-0-51ed39e4-312d02345d3f123120881dff9bb4020a89e8ac44cdfdcecd702151182fdc952272661d290ab2e5849e31bb03deede7e

> **Note:** This is not the same the username and password you use to access the Merchant Portal. Your Production API key will be different from your Test API key. Contact your account manager for details. You must keep your API keys safe and ensure that it is used appropriately for your needs.

The case-sensitive API key is sent using HTTP Basic Authentication. To use HTTP Basic Authentication, you must send the API key credentials using the Authorization header with every request. The Authorization header is constructed as follows:

 1. The Key Username and Key Password are combined into a string separated by a colon, e.g.,“Key Username:Key Password”.
 2. The resulting string literal is then encoded using Base64.
 3. The authorization method and a space (i.e., “Basic”) are then put before the encoded string.

For example, using the Key Username and Password examples above, the header is formed as follows:

``Authorization: Basic
TWVyY2hhbnRYWVo6Qi10c3QxLTAtNTFlZDM5ZTQtMzEyZDAyMzQ1ZDNmMTIzMTIwODgxZGZmOWJiNDAyMGE4OWU4YWM0NGNkZmRjZWNkNzAyMTUxMTgyZmRjOTU yMjcyNjYxZDI5MGFiMmU1ODQ5ZTMxYmIwM2RlZWRlN2U=``

For additional details, please refer to [http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication).

> **IMPORTANT:** The API key that you will use for the Paysafe Payments API is **different from** the API key used for all the other Developer Center APIs.

**BE SURE TO PROVIDE CLEAR INSTRUCTIONS HERE ON HOW THEY WILL GET THEIR API KEY FOR THIS API**

# URLs

##  Test URL
In order to test your integration with Paysafe, use the following Test URL:

`https://api.test.paysafe.com`

For example:

`https://api.test.paysafe.com/paymenthub/v1/payments/{payment_id}`

## Production URL
In order to process live requests with Paysafe, use the following Production URL:

`https://api.paysafe.com`

For example:

`https://api.paysafe.com/paymenthub/v1/payments/{payment_id}`


<a name="pagination" title="Pagination"></a>
# Pagination

In the case where an API GET request returns multiple results, Paysafe returns the first 10 records by default and uses HATEOAS links to provide page navigation. In addition to the default behavior, it is also possible to control the number of results and starting point by passing in query parameters as follows:

|    Name       | Description   |
|---            |---            |
| limit         | This is the total number of records to return. Max = 50. Default = 10. |
| offset        | This is the starting position, where 0 is the first record. Default = 0. |
| startDate     | This is the start date in UTC. Default = 30 days before the *endDate*.|
| endDate       | This is the end date in UTC. Default = current date and time. |

**IS THIS THE BEHAVIOUR FOR THE NEW PAYMENTS API?**

<a name="globalinvalidcharacters" title="Global Invalid Characters"></a>
# Global Invalid Characters

You must not include any of the characters in the following table as values in any of your request parameters. If you do, your request will result in an error.

|    Character    |    HEX    |    Description                     |
|-----------------|-----------|------------------------------------|
| "               | 22        | Double quotes (or speech marks)    |
| ;               | 3B        | Semicolon                          |
| ^               | 5E        | Caret, circumflex                  |
| *               | 2A        | Asterisk                           |
| <               | 3C        | Less than (or open angled bracket) |
| /               | 2F        | Slash or divide                    |
| [               | 5B        | Opening bracket                    |
| ]               | 5D        | Closing bracket                    |
| \               | 5C        | Backslash                          |

**IS THIS ACCURATE FOR THE NEW PAYMENTS API?**

# API

The Payments API allows merchants to process payment requests across a wide variety of payment methods with a simple integration a single API using the REST protocol. The protocol uses JSON for all requests and responses.

The following request types are supported:

**UPDATE LINKS BELOW TO APPROPRIATE SECTIONS ONCE THEY ARE CREATED**

  * [Payment Methods](#)
  * [Payment Handles](#)
  * [Payments](#)
  * [Settlements](#)
  * [Refunds](#)
  * [Standalone Credits](#)
  * [Original Credits](#)
  * [Void Authorizations](#voidauths)
  
**API Endpoint**

`https://api.paysafe.com/paymenthub/v1/payments/{payment_id}`

**Resource Patterns**

|Endpoint URL                                   |Description                            |Action |
|---                                            |---                                    |---    |
|/paymentmethods                                |Look Up Payment Methods for a Merchant |POST   |
|/paymenthandles                                |Create a Customer Payment Handle       |POST   |
|/paymenthandles/{payment_handle_id}            |Look Up a Payment Handle               |GET    |
|/payments                                      |Submit a Payment Request               |POST   |
|/payments/{payment_id}                         |Look Up a Payment                      |GET    |
|/payments/{payment_id}/settlements             |Settle an Authorization                |POST   |
|/settlements/{settlement_id}                   |Cancel a Settlement                    |PUT    |
|/settlements/{settlement_id}                   |Look Up a Settlement                   |GET    |
|/payments/{settlement_id}/refunds              |Submit a Refund                        |POST   |
|/refunds/{refund_id}                           |Cancel a Refund                        |PUT    |
|/refunds/{refund_id}                           |Look Up a Refund                       |GET    |
|/standalonecredits                             |Submit a Standalone Credit             |POST   |
|/standalonecredits/{standalone_credit_id}      |Cancel a Standalone Credit             |PUT    |
|/standalonecredits/{standalone_credit_id}      |Look Up a Standalone Credit            |GET    |
|/originalcredits                               |Submit an Original Credit              |POST   |
|/originalcredits/{original_credit_id}          |Cancel an Original Credit              |PUT    |
|/originalcredits/{original_credit_id}          |Look Up an Original Credit             |GET    |
|/payments/{payment_id}/voidauths               |Void (Reverse) an Authorization        |POST   |
|/voidauths/{void_auth_id}                      |Look Up a Void Authorization           |GET    |


# Getting Started

Paysafe Payment Hub encapsulates integration with multiple payment methods into a single API 
that simplifies the development effort for a new payment method integration to bare minimum 
or even none in certain cases.

The following payment methods are supported

- Card Payments
- Skrill
- Neteller
- PaysafeCard
- PaysafeCash
- Guaranteed ACH
- Sightline Prepaid Cards


<a name="isostandards" title="ISO Standards"></a>
# ISO Standards

<a name="currencycodes" title="Currency Codes"></a>
## Currency Codes

**Note**
 * The table below lists the currencies in which transaction requests are processed, but note that they may be settled in a different currency.
 * Not all currencies are supported by all banks. Contact your account manager for more information about which currencies are supported for your merchant account.

|Currency |Code |
|--- |--- |
|Argentine Peso |ARS |
|Australian Dollar  |AUD |
|Azerbaijanian Manat    |AZN |
|Bahraini Dinar |BHD  |
|Belarusian Ruble   |BYR  |
|Bolivian Boliviano |BOB  |
|Bosnia and Herzegovina Convertible Mark |BAM  |
|Brazilian Real |BRL  |
|Bulgarian Lev  |BGN  |
|Canadian Dollar    |CAD  |
|Chilean Peso   |CLP  |
|China Yuan Renminbi    |CNY  |
|Columbian Peso |COP  |
|Costa Rican Colon  |CRC  |
|Croatian Kuna  |HRK  |
|Czech Koruna   |CZK  |
|Danish Krone   |DKK  |
|Dominican Peso |DOP  |
|East Caribbean Dollar  |XCD  |
|Egyptian Pound |EGP  |
|Ethiopian Birr |ETB  |
|Euro   |EUR  |
|Fiji Dollar    |FJD  |
|Georgian Lari  |GEL  |
|Guatemala Quetzal  |GTQ  |
|Haiti Goude    |HTG  |
|Honduran Lempira   |HNL  |
|Hong Kong Dollar   |HKD  |
|Hungarian Forint   |HUF  |
|Iceland Krona  |ISK  |
|Indian Rupee   |INR  |
|Indonesia Rupiah   |IDR  |
|Iranian Rial   |IRR  |
|Jamaican Dollar    |JMD  |
|Japanese Yen   |JPY  |
|Jordanian Dinar    |JOD  |
|Kazakhstan Tenge   |KZT  |
|Kenyan Shilling    |KES  |
|Korean Won |KRW  |
|Kuwaiti Dinar  |KWD  |
|Latvian Lats   |LVL  |
|Lebanese Pound |LBP  |
|Libyan Dinars  |LYD  |
|Lithuanian Litas   |LTL  |
|Malawi Kwacha  |MWK  |
|Malaysian Ringgit  |MYR  |
|Mauritius Rupee    |MUR  |
|Mexican Peso   |MXN  |
|Moldovan Leu   |MDL  |
|Moroccan Dirham    |MAD  |
|New Israeli Shekel |ILS  |
|New Zealand Dollar |NZD  |
|Nigerian Naira |NGN  |
|Norwegian Krone    |NOK  |
|Omani Rial |OMR  |
|Pakistan Rupee |PKR  |
|Panamanian Balboa  |PAB  |
|Paraguayan Guarani |PYG  |
|Peruvian Sol   |PEN  |
|Philippine Peso    |PHP  |
|Polish Zloty   |PLN  |
|Pound Sterling |GBP  |
|Qatari Rial    |QAR  |
|Romanian New Leu   |RON  |
|Russian Ruble  |RUB  |
|Saudi Arabian Riyal    |SAR  |
|Serbian Dinar  |RSD  |
|Singapore Dollar   |SGD  |
|South African Rand |ZAR  |
|Sri Lanka Rupee    |LKR  |
|Swedish Krona  |SEK  |
|Swiss Franc    |CHF  |
|Syrian Pound   |SYP  |
|Taiwan New Dollar  |TWD  |
|Thai Baht  |THB  |
|Trinidad and Tobago Dollar |TTD  |
|Tunisian Dinar |TND  |
|Turkish Lira   |TRY  |
|Ukranian Hryunia   |UAH  |
|UAE Dirham |AED  |
|Uruguay Peso   |UYU  |
|US Dollar  |USD  |
|Venezuelan Bolivar |VEF  |
|Viet Nam Dong  |VND  |

<a name="provincecodes" title="Province Codes"></a>
## Province Codes

|Province               |Code   |
|---                    |---    |
|Alberta                |AB     |
|British Columbia       |BC     |
|Manitoba               |MB     |
|New Brunswick          |NB     |
|Newfoundland           |NL     |
|Nova Scotia            |NS     |
|Northwest Territories  |NT     |
|Nunavut                |NU     |
|Ontario                |ON     |
|Prince Edward Island   |PE     |
|Quebec                 |QC     |
|Saskatchewan           |SK     |
|Yukon                  |YT     |

<a name="statecodes" title="State Codes"></a>
## State Codes

|State                  |Code   |
|---                    |---    |
|Alabama                |AL     |
|Alaska                 |AK     |
|American Samoa         |AS     |
|Arizona                |AZ     |
|Arkansas               |AR     |
|Armed Forces Americas  |AA     |
|Armed Forces Europe    |AE     |
|Armed Forces Pacific   |AP     |
|California             |CA     |
|Colorado               |CO     |
|Connecticut            |CT     |
|Delaware               |DE     |
|District of Columbia   |DC     |
|Florida                |FL     |
|Georgia                |GA     |
|Guam                   |GU     |
|Hawaii                 |HI     |
|Idaho                  |ID     |
|Illinois               |IL     |
|Indiana                |IN     |
|International          |IT     |
|Iowa                   |IA     |
|Kansas                 |KS     |
|Kentucky               |KY     |
|Louisiana              |LA     |
|Maine                  |ME     |
|Maryland               |MD     |
|Massachusetts          |MA     |
|Michigan               |MI     |
|Minnesota              |MN     |
|Mississippi            |MS     |
|Missouri               |MO     |
|Montana                |MT     |
|Nebraska               |NE     |
|Nevada                 |NV     |
|New Hampshire          |NH     |
|New Jersey             |NJ     |
|New Mexico             |NM     |
|New York               |NY     |
|North Carolina         |NC     |
|North Dakota           |ND     |
|Northern Mariana Is.   |MP     |
|Ohio                   |OH     |
|Oklahoma               |OK     |
|Oregon                 |OR     |
|Palau                  |PW     |
|Pennsylvania           |PA     |
|Puerto Rico            |PR     |
|Rhode Island           |RI     |
|South Carolina         |SC     |
|South Dakota           |SD     |
|Tennessee              |TN     |
|Texas                  |TX     |
|U.S. Virgin Islands    |VI     |
|United States Federal  |US     |
|Utah                   |UT     |
|Vermont                |VT     |
|Virginia               |VA     |
|Washington             |WA     |
|West Virginia          |WV     |
|Wisconsin              |WI     |
|Wyoming                |WY     |


<a name="countrycodes" title="Country Codes"></a>
## Country Codes
| Country                       | Code |
|---                                |---       |
| Afghanistan                       | AF |
| Åland Islands                     | AX |
| Albania                           | AL |
| Algeria                           | DZ |
| American Samoa                    | AS |
| Andorra                           | AD |
| Angola                            | AO |
| Anguilla                          | AI |
| Antarctica                        | AQ |
| Antigua and Barbuda               | AG |
| Argentina                         | AR |
| Armenia                           | AM |
| Aruba                             | AW |
| Australia                         | AU |
| Austria                           | AT |
| Azerbaijan                        | AZ |
| Bahamas                           | BS |
| Bahrain                           | BH |
| Bangladesh                        | BD |
| Barbados                          | BB |
| Belarus                           | BY |
| Belgium                           | BE |
| Belize                            | BZ |
| Benin                             | BJ |
| Bermuda                           | BM |
| Bhutan                            | BT |
| Bolivia                           | BO |
| Bonaire, Sint Eustatius and Saba  | BQ |
| Bosnia and Herzegovina            | BA |
| Botswana                          | BW |
| Bouvet Island                     | BV |
| Brazil                            | BR |
| British Indian Ocean Territory    | IO |
| Brunei Darussalam                 | BN |
| Bulgaria                          | BG |
| Burkina Faso                      | BF |
| Burundi                           | BI |
| Cambodia                          | KH |
| Cameroon                          | CM |
| Canada                            | CA |
| Cape Verde                        | CV |
| Cayman Islands                    | KY |
| Central African Republic          | CF |
| Chad                              | TD |
| Chile                             | CL |
| China                             | CN |
| Christmas Island                  | CX |
| Cocos (Keeling) Islands           | CC |
| Colombia                          | CO |
| Comoros                           | KM |
| Congo                             | CG |
| Congo, Democratic Republic of     | CD |
| Cook Islands                      | CK |
| Costa Rica                        | CR |
| Côte D’Ivoire                     | CI |
| Croatia                           | HR |
| Cuba                              | CU |
| Curaçao                           | CW |
| Cyprus                            | CY |
| Czech Republic                    | CZ |
| Denmark                           | DK |
| Djibouti                          | DJ |
| Dominica                          | DM |
| Dominican Republic                | DO |
| Ecuador                           | EC |
| Egypt                             | EG |
| El Salvador                       | SV |
| Equatorial Guinea                 | GQ |
| Eritrea                           | ER |
| Estonia                           | EE |
| Ethiopia                          | ET |
| Falkland Islands                  | FK |
| Faroe Islands                     | FO |
| Fiji                              | FJ |
| Finland                           | FI |
| France                            | FR |
| French Guiana                     | GF |
| French Polynesia                  | PF |
| French Southern Territories       | TF |
| Gabon                             | GA |
| Gambia                            | GM |
| Georgia                           | GE |
| Germany                           | DE |
| Ghana                             | GH |
| Gibraltar                         | GI |
| Greece                            | GR |
| Greenland                         | GL |
| Grenada                           | GD |
| Guadeloupe                        | GP |
| Guam                              | GU |
| Guatemala                         | GT |
| Guernsey                          | GG |
| Guinea                            | GN |
| Guinea-Bissau                     | GW |
| Guyana                            | GY |
| Haiti                             | HT |
| Heard and McDonald Islands        | HM |
| Honduras                          | HN |
| Hong Kong                         | HK |
| Hungary                           | HU |
| Iceland                           | IS |
| India                             | IN |
| Indonesia                         | ID |
| Iran  (Islamic Republic of)       | IR |
| Iraq                              | IQ |
| Ireland                           | IE |
| Isle of Man                       | IM |
| Israel                            | IL |
| Italy                             | IT |
| Jamaica                           | JM |
| Japan                             | JP |
| Jersey                            | JE |
| Jordan                            | JO |
| Kazakhstan                        | KZ |
| Kenya                             | KE |
| Kiribati                          | KI |
| Korea, Democratic People’s Republic | KP |
| Korea, Republic of                | KR |
| Kuwait                            | KW |
| Kyrgyzstan                        | KG |
| Lao People’s Democratic Republic  | LA |
| Latvia                            | LV |
| Lebanon                           | LB |
| Lesotho                           | LS |
| Liberia                           | LR |
| Libyan Arab Jamahiriya            | LY |
| Liechtenstein                     | LI |
| Lithuania                         | LT |
| Luxembourg                        | LU |
| Macau                             | MO |
| Macedonia                         | MK |
| Madagascar                        | MG |
| Malawi                            | MW |
| Malaysia                          | MY |
| Maldives                          | MV |
| Mali                              | ML |
| Malta                             | MT |
| Marshall Islands                  | MH |
| Martinique                        | MQ |
| Mauritania                        | MR |
| Mauritius                         | MU |
| Mayotte                           | YT |
| Mexico                            | MX |
| Micronesia, Federated States of   | FM |
| Moldova, Republic of              | MD |
| Monaco                            | MC |
| Mongolia                          | MN |
| Montenegro                        | ME |
| Montserrat                        | MS |
| Morocco                           | MA |
| Mozambique                        | MZ |
| Myanmar                           | MM |
| Namibia                           | NA |
| Nauru                             | NR |
| Nepal                             | NP |
| New Caledonia                     | NC |
| New Zealand                       | NZ |
| Nicaragua                         | NI |
| Niger                             | NE |
| Nigeria                           | NG |
| Niue                              | NU |
| Norfolk Island                    | NF |
| Northern Mariana Islands          | MP |
| Norway                            | NO |
| Oman                              | OM |
| Pakistan                          | PK |
| Palau                             | PW |
| Palestinian Territory, Occupied   | PS |
| Panama                            | PA |
| Papua New Guinea                  | PG |
| Paraguay                          | PY |
| Peru                              | PE |
| Philippines                       | PH |
| Pitcairn                          | PN |
| Poland                            | PL |
| Portugal                          | PT |
| Puerto Rico                       | PR |
| Qatar                             | QA |
| Reunion                           | RE |
| Romania                           | RO |
| Russian Federation                | RU |
| Rwanda                            | RW |
| Saint Barthélemy                  | BL |
| Saint Helena                      | SH |
| Saint Kitts and Nevis             | KN |
| Saint Lucia                       | LC |
| Saint Martin                      | MF |
| Saint Vincent and the Grenadines  | VC |
| Samoa                             | WS |
| San Marino                        | SM |
| Sao Tome and Principe             | ST |
| Saudi Arabia                      | SA |
| Senegal                           | SN |
| Serbia                            | RS |
| Seychelles                        | SC |
| Sierra Leone                      | SL |
| Singapore                         | SG |
| Sint Maarten                      | SX |
| Slovakia (Slovak Republic)        | SK |
| Slovenia                          | SI |
| Solomon Islands                   | SB |
| Somalia                           | SO |
| South Africa                      | ZA |
| South Georgia and the South Sandwich Islands | GS |
| South Sudan                       | SS |
| Spain                             | ES |
| Sri Lanka                         | LK |
| St. Pierre and Miquelon           | PM |
| Sudan                             | SD |
| Suriname                          | SR |
| Svalbard and Jan Mayen Islands    | SJ |
| Swaziland                         | SZ |
| Sweden                            | SE |
| Switzerland                       | CH |
| Syrian Arab Republic              | SY |
| Taiwan                            | TW |
| Tajikistan                        | TJ |
| Tanzania, United Republic of      | TZ |
| Thailand                          | TH |
| The Netherlands                   | NL |
| Timor-Leste                       | TL |
| Togo                              | TG |
| Tokelau                           | TK |
| Tonga                             | TO |
| Trinidad and Tobago               | TT |
| Tunisia                           | TN |
| Turkey                            | TR |
| Turkmenistan                      | TM |
| Turks and Caicos Islands          | TC |
| Tuvalu                            | TV |
| Uganda                            | UG |
| Ukraine                           | UA |
| United Arab Emirates              | AE |
| United Kingdom                    | GB |
| United States                     | US |
| United States Minor Outlying Islands | UM |
| Uruguay                           | UY |
| Uzbekistan                        | UZ |
| Vanuatu                           | VU |
| Vatican City State (Holy See)     | VA |
| Venezuela                         | VE |
| Vietnam                           | VN |
| Virgin Islands (British)          | VG |
| Virgin Islands (U.S.)             | VI |
| Wallis and Futuna Islands         | WF |
| Western Sahara                    | EH |
| Yemen                             | YE |
| Zambia                            | ZM |
| Zimbabwe                          | ZW |

# Common Objects

<a name="accorddobject" title="AccordD Object"></a>
## accordD
|Element            |Type                       |Description                        |
|---                |---                        |---       |
|financingType      |enum                       |This is the type of financing offered.<ul><li>DEFERRED_PAYMENT &ndash; Deferred payment financing</li><li>EQUAL_PAYMENT &ndash; Equal payment financing</li></ul>|
|plan               |string<br/>`length<=3`     |This is the plan number for this financing transaction.|
|gracePeriod        |number<br/>`max=99`        |This is the grace period, in months, associated with deferred payment transactions.|
|term               |number<br/>`max=99`        |This is the number of payments, in months, for equal payment transactions.|

```apib
    {
    "accordD":{
        "financingType":"DEFERRED_PAYMENT",
        "plan":"123",
        "gracePeriod":"12"
    }
    }
```

<a name="acquirerdataobject" title="Acquirer Data Object"></a>
## acquirerData

This is additional information about the card acquirer required when you are performing an Original Credit request. This object is required **only when** you are using Credorax (CRX) as your acquirer for Original Credits. Contact your account manager for details.

|Element            |Type                       |Description                        |
|---                |---                        |---       |
|authId             |string<br/>`length<=36`    |This is the ID returned in the response to a previous successful payment request.|
|code               |string</br>`length<=10`    |This is the code for your card acquirer.|
|externalSubMerchantId |string                  |This is the external merchant ID of the acquirer data.|

```apib
    {
    "acquirerData":{
        "authId":"f06bccd6-de90-4b73-b10f-30266763bc60",
        "code":"CRX"
    }
    }
```

<a name="authenticationobject" title="Authentications Object"></a>
## authentication

|Element                |Type                           |Description|
|---                    |---                            |---       |
|id                     |string<br/>`length<=36`        |This is the ID returned in the response. |
|eci                    |number                         |This is the E-Commerce Indicator (ECI). This value will be returned only on payer authentication transactions, or for enrollments where the issuer is non-participating and the card scheme supports it. This value must be appended to the authorization request, where it enables the interchange benefits granted to merchants processing payer Authentication transactions.<br/>**Visa**<br/><ul><li>5 &ndash; Identifies a successfully authenticated transaction.</li><li>6 &ndash; Identifies an attempts authenticated transaction.</li><li>7 &ndash; Identifies a non-authenticated transaction.</li></ul><br/>**Mastercard**<br/><br/><ul><li>1 &ndash; Identifies a non-authenticated transaction.</li><li>2 &ndash; Identifies a successfully authenticated transaction.</li></ul>|
|cavv                   |string<br/>`length<=80`        |This is the Cardholder Authentication Verification Value, indicating that the transaction has been authenticated. This value should be appended to the authorization request signifying that the transaction has been successfully authenticated.|
|xid                    |string<br/>`length<=40`        |This is the transaction identifier returned by the card issuer.|
|status                 |enum                           |This is the status of the Enrollment Lookup request. Possible values are:<br/><ul><li>COMPLETED - The transaction has been completed.</li><li>FAILED - The authentication request failed. Check the error code for details.</li></ul>|
|merchantRefNum         |string<br/>`length<=255`       |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|threeDEnrollment       |enum                           |This indicates whether or not the cardholder is enrolled in 3D Secure. Possible values are:<br/><ul><li>Y &ndash; Cardholder authentication available</li><li>N &ndash; Cardholder not enrolled in authentication</li><li>U &ndash; Cardholder authentication unavailable</li></ul>|
|threeDResult           |enum                           |This indicates the outcome of the Authentication.<br/><ul><li>Y &ndash; The cardholder successfully authenticated with their card issuer.</li><li>A &ndash; The cardholder authentication was attempted.</li><li>N &ndash; The cardholder failed to successfully authenticate with their card issuer.</li><li>U &ndash; Authentication with the card issuer was unavailable.</li><li>E &ndash; An error occurred during authentication.</li></ul><br/>See [3D Secure Results](https://developer.paysafe.com/en/rest-apis/3ds/test-and-go-live/3d-secure-results/) for more information on these Authentication outcome values.|
|signatureStatus        |enum                           |This is the 3D Secure signature verification result value.<br/><ul><li>Y &ndash; All transaction and signature checks satisfied.</li><li>N &ndash; At least one transaction or signature check failed.</li></ul>|
|error                  |[complex](#errorobject)        |       |


<a name="billingdetailsobject" title="Billing Details Object"></a>
## billingDetails
 * Max for *nickName*?

|Element            |Type                       |Description                        |
|---                |---                        |---       |
|id                 |string<br/>`length<=36`    |This is the ID of the billing address, returned in the response. |
|nickName           |string<br/>`length<=??`    |This is the nickname the merchant has for the billing address. |
|street             |string<br/>`length<=50`    |This is the first line of the customer's street address.|
|street2            |string<br/>`length<=50`    |This is the second line of the customer's street address, if required (e.g., apartment number).|
|city               |string<br/>`length<=40`    |This is the city where the address is located.|
|state              |string<br/>`length<=40`    |This is the state/province/region in which the customer lives.<br/>For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions.|
|zip                |string<br/>`length<=10`    |This is the zip, postal, or post code of the customer's address.|
|country            |string<br/>`length=2`      |This is the country where the address is located. See [Country Codes](#countrycodes).|


<a name="cardobject" title="card Object"></a>
## card

* Other APIs use "card" and not "cardType"
* Max for holderName?
* What does status apply to? What are possible values?
* Max for nickName?

When providing card information, merchants can provide either card details or a payment token for a customer already created in the system.

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|paymentToken       |string <br/>`length<=80`   |If the payment token is provided, no other card information is necessary. |
|cvv                |string<br/>`length=3-4`    |This is the 3- or 4-digit security code that appears on the card following the card number.|

**OR**

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|cardNum            |string <br/>`length=8-20`  |This is the card number used for the request. |
|lastDigits         |string<br/>`length=4`      |This is the last four digits of the card used for the request, returned in the response.|
|cardExpiry         |[cardExpiry](#cardexpiryobject)|This is the card's expiry date.|
|cvv                |string<br/>`length=3-4`    |This is the 3- or 4-digit security code that appears on the card following the card number.|
|holderName         |string                     |This is the name of the card holder. |
|status             |enum                       |       |
|nickName           |string<br/>`length<=`      |This is the nickname the merchant has for the card holder. |
|cardType           |enum                       |This is the type of card used for the request, returned in the response. Possible values are:<br/><ul><li>AM &ndash; American Express</li><li>DI &ndash; Discover</li><li>JC &ndash; JCB</li><li>MC &ndash; Mastercard</li><li>MD &ndash; Maestro</li><li>SO &ndash; Solo</li><li>VI &ndash; Visa</li><li>VD &ndash; Visa Debit</li><li>VE &ndash; Visa Electron</li></ul>
|cardBin            |string<br/>`length=6`      |This is the card BIN (typically the first 6 digits).|

```apib
    {
    "card": {
        "cardNum": "4111111111111111",
        "cardExpiry": {
            "month": 2,
            "year": 2019
        }
    }
    }
```


<a name="cardexpiryobject" title="cardExpiry Object"></a>
## cardExpiry

|Element                 |Type                   |Description|
|---                     |---                    |---|
|month                   |number<br/>`length=2`  |This is the card expiry month. |
|year                    |number<br/>`length=4`  |This is the card expiry year.|

```apib
    {
    "cardExpiry":{
        "month": "12",
        "year": "2020"
    }
    }
```

<a name="dateofbirthobject" title="Date of Birth Object"></a>
## dateOfBirth
|Element            |Type                           |Description    |
|---                |---                            |---            |
|year               |number<br/>`length=4 min=1900` |This is the year of birth.|
|month              |number<br/>`length=2 max=12`   |This is the month of birth.|
|day                |number<br/>`length=2 max=31`   |This is the day of birth.|

```apib
            { 
               "dateOfBirth": {
                  "year": 1980,
                  "month": 12,
                  "day": 25
                }
            }
```

<a name="gatewayresponseobject" title= "Gateway Response Object"></a>
## gatewayResponse

This is a read-only raw response returned by an acquirer. 

| Element            | Type   | Description                                                                                         |
|--------------------|--------|-----------------------------------------------------------------------------------------------------|
| code               | String | This is acquirer identification code, such as DJN, CRX, etc.                                        |
| responseCode       | String | This is the raw response returned by the acquirer.                                                  |
| avsCode            | String | This is the raw AVS code returned by the acquirer.                                                  |
| balanceResponse    | String | This is the balance remaining on a gift card, if a gift card was used for the original transaction. |
| mid                | String | This is the acquirer MID that was sent to the clearing house.                                       |
| terminalId         | String | This is the merchant's terminal ID.                                                                 |
| batchNumber        | String | This is the batch number.                                                                           |
| seqNumber          | String | This is the merchant's sequence number.                                                             |
| effectiveDate      | String | This is the date of the bank deposit associated with the transaction.                               |
| financingType      | String | This is the type of financing offered.                                                              |
| plan               | String | This is the plan number for this financing transaction.                                             |
| gracePeriod        | String | This is the grace period, in months, associated with deferred payment transactions.                 |
| term               | String | This is the number of payments, in months, for equal payment transactions.                          |
| responseId         | String | This is the response ID assigned by Credorax.                                                       |
| requestId          | String | This is the request ID assigned by Paysafe.                                                         |
| description        | String | This is a description of the response.                                                              |
| authCode           | String | This is the authorization code.                                                                     |
| txnDateTime        | String | This is the transaction date and time.                                                              |
| referenceNbr       | String | This is the Bank net transaction ID/Merch Tran Ref                                                  |
| responseReasonCode | String | This is the raw response reason code returned by Credorax.                                          |
| cvv2Result         | String | This is the raw cvv2 result code.                                                                   |

<a name="level2level3object" title="level2level3 Object"></a>
## level2level3

Level 2 and Level 3 (L2/L3) credit card processing refers to certain B2B card transactions for which the merchant might be eligible for lower credit card interchange rates. The lower rates may be available for 
merchants who provide more detailed information when processing card-not-present transactions. In order to be eligible for L2/L3 transactions:
 * Your merchant account must be properly configured by Paysafe.
 * The BIN of the credit card used for the transaction must be eligible – typically, these are government-issued credit cards.


|Element                |Type                               | Description|
|---                    |---                                |---            |
| exemptLocalTax        |boolean                            | This indicates whether or not local tax is exempted for the request. If set to true, then the localTaxAmount parameter will be ignored.<br/>**Note:** This value defaults to *false*. |
| localTaxAmount        |integer<br/>`length<=99999999999`  | This is the local sales tax applied to the purchase.|
| nationalTaxAmount     |number<br/>`length<=99999999999`   | This is the national tax included in the transaction amount. |
| freightAmount         |number<br/>`length<=99999999999`   | This is the freight or shipping portion of the total transaction amount. |
| dutyAmount            |number<br/>`length<=99999999999`   | This is the duty associated with the import of the purchased goods. |
| destinationZip        |number<br/>`length<=10`            | This is the postal/zip code of the address to which the purchased goods will be delivered. This field can be identical to the shipFromZip if the customer is present and takes immediate possession of the goods. |
| destinationCountry    |number<br/>`length=2`              | This is the country to which the goods are being shipped. See [Country Codes](#countrycodes). |
| shipFromZip           |number<br/>`length<=10`            | This is the postal/zip code of the address from which the purchased goods are being shipped. |
| lineItems             |[lineItems](#lineitemsobject)      | This is more detailed information about the items that are being purchased.| 

```apib
    {
    "level2Level3": {
        "localTaxAmount": 15000,
        "nationalTaxAmount": 0,
        "freightAmount": 0,
        "dutyAmount": 0,
        "destinationZip": "90210",
        "destinationCountry": "US",
        "shipFromZip": "90210",
        "lineItems": [
            {
                "description": "Disney Cruise Line - Adult",
                "productCode": "DCL-A",
                "quantity": 2,
                "unitAmount": 120000,
                "taxRate": 5,
                "taxAmount": 12000,
                "totalAmount": 252000
            },
            {
                "description": "Disney Cruise Line - Kids",
                "productCode": "DCL-K",
                "quantity": 1,
                "unitAmount": 60000,
                "taxRate": 5,
                "taxAmount": 3000,
                "totalAmount": 63000
            }
        ]
    }
    }
```

<a name="lineitemsobject" title="lineItems Object"></a>
##lineItems

|Element                |Type                               | Description|
|---                    |---                                |---            |
|description            |string<br/>`length<=50`            |This is a description of the item(s) being purchased.|
|productCode            |string<br/>`length<=12`            |This is a merchant-defined description code of the item being purchased.|
|quantity               |number<br/>`length<=99999999999`<br/>`max 4 decimals` |This is the quantity of the item.|
|unitAmount             |number<br/>`length<=99999999999`   |This is the unit price of the item being purchased, in minor units. The currency will be based on the account setting.|
|taxRate                |number<br/>`length<=100`<br/>`max 2 decimals`    |This is the tax rate used to calculate the tax amount. For example, if the tax rate is 10.5%, this value should be 10.5.|
|taxAmount              |number<br/>`length<=99999999999`   |This is the amount of any value-added taxes that can be associated with the purchased item, in minor units. The currency will be based on the account setting. **Note:** Our system will not validate the accuracy of this value. The merchant's application must calculate this value correctly.|
|totalAmount            |number<br/>`length<=99999999999`   |This is the total amount of the line item, typically calculated as price multiplied by quantity, in minor units. The currency will be based on the account setting. **Note:** Our system will not validate the accuracy of this value. The merchant's application must calculate this value correctly.|

```apib
    {
    "lineItems": {
        "description": "Disney Cruise Line",
        "productCode": "DCL",
        "quantity": 4,
        "unitAmount": 120000,
        "taxRate": 5,
        "taxAmount": 24000,
        "totalAmount": 504000
    }
    }
```

<a name="merchantdescriptorobject" title="merchantDescriptor Object"></a>
## merchantDescriptor
|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|dynamicDescriptor  |string <br/>`length<=20`   |This is a merchant descriptor that will be displayed on a customer’s card statement.|
|phone              |string <br/>`length<=13`   |This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s card statement.|

```apib
    {
    "merchantDescriptor":{
        "dynamicDescriptor":"OnlineStore",
        "phone":"12345678"
  }
  }
```

<a name="metadataobject" title="metadata Object"></a>
## metadata

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|key                |string <br/>`length<=50`   |This is a description of the data being added to the order.|
|value              |string <br/>`length<=100`  |This is the value for the key/value pair.|

<a name="originalcreditsobject" title="originalcredits Object"></a>
## originalcredits
 * dupCheck not supported? 
 * no txnTime returned?
 * Other elements missing when compared with original credits object from Card Payments API.

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|paymentHandleToken |string                                 |This is the payment token generated by Paysafe that will be used by merchants for original credit requests.|
|currencyCode       |string<br/>`length=3`                  |This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes)|
|card               |[card](#cardobject)                    |These are the details of the card used.|
|billingDetails     |[billingDetails](#billingdetailsobject)|These are the billing details for the request.|
|customerIp         |string<br/>`length<=39`                |This is the customer's IP address.|
|description        |string<br/>`length<=255`               |This is a description of the transaction, provided by the merchant.|

```apib
{
  "merchantRefNum":"merchant ABC-444",
  "amount":10098,
  "paymentHandleToken": "SC9mbfZSITB5OwDJ",
  "currencyCode": "GBP",
  "customerIp":"204.91.0.12",
  "description":"Winning payment from Loto"
}    
```

<a name="partialauthobject" title="partialAuth Object"></a>
## partialAuth
 * Is *amountDue* definition below accurate? 

|Element            |Type                       |Description                        |
|---                |---                        |---                                |
|requested          |boolean                    |This specifies whether or not a partial authorization was requested. |
|amountDue          |number                     |This is the amount of the full authorization that is not covered by the payment request. |
|originalAmount     |number                     |This is the actual amount of the full authorization. |


<a name="paymenthandleobject" title="Payment Handle Object"></a>
## Payment Handle
* For the row beneath paymentHandleToken (where I now have a link to the card object) I need to add links to the objects for Skrill, Neteller, paysafecash, and paysafecard. Not sure where they are.


|Element                |Type                       |Description                        |
|---                    |---                        |---       |
|id                     |string<br/>`length<=32`    |This is the ID returned in the response. This ID can be used to retrieve the Payment Handle.|
|paymentHandleTokenFrom |string<br/>`length<=36`    |This is the existing payment handle ID, from which the payment instrument and profile details are retrieved. |
|merchantRefNum         |string<br/>`length<=100`   |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request. |
|consumerOperation      |enum                       |This is the action the customer wants to  take with the payment instrument. Possible values are:<br/><ul><li>ADD &ndash; the customer wants to save the payment instrument to the profile.</li><li>EDIT &ndash; The customer wants to edit the payment instrument that is attached to the profile.</li><li>DELETE &ndash; The customer wants to delete the payment instrument from the profile.</li></ul>|
|singleUseProfileToken  |string                     |This is the single-use token of the profile on which the consumer operation is to be done.<br/>**Note:** This field is mandatory if *consumerOperation* is included.|
|transactionType        |enum                       |This specifies the transaction type for which the payment handle is created. Possible values are: <ul><li>PAYMENT</li><li> STANDALONE_CREDIT</li><li>ORIGINAL_CREDIT</li><li>VERIFICATION</li></ul>|
|status                 |enum                       |This is the status of the request. Possible values are:<ul><li>RECEIVED &ndash; Paysafe has received the request and is waiting for the downstream processor’s response.</li><li>INITIATED &ndash; The request was initiated with the downstream provider.</li><li>PAYABLE &ndash; The merchant can use the payment handle for a payment request.</li><li>PROCESSING &ndash; The payment handle was authorized by customer, awaiting PSP response.</li><li>FAILED &ndash; The transaction failed due to either an error or being declined.</li><li>CANCELLED &ndash; The authorization request has been fully reversed.</li><li>EXPIRED &ndash; The payment handle expired because the merchant did not proceed with the payment transaction.</li><li>COMPLETED &ndash; The payment request was initiated successfully using the payment handle.</li></ul>      |
|usage                  |enum                       |This specifies how the payment handle will be used for payments. Possible values are:<ul><li>SINGLE_USE &ndash; The payment handle can be used for one transaction only and expires if not used.</li><li>MULTI_USE &ndash; The payment handle can be used multiple times.</li></ul>|
|paymentType            |enum                       |This is the payment type associated with this payment handle. Possible values are:<ul><li>CARD</li><li>SKRILL</li><li>NETELLER</li><li>PAYSAFECASH</li><li>PAYSAFECARD</li></ul>|
|action                 |enum                       |This specifies the next step of the user journey once they proceed to the payment. Possible values are:<ul><li>NONE &ndash; No action is required, e.g., for a standard credit card payment.</li><li>REDIRECT &ndash; The user must be redirected in order to complete a payment, e.g., when an alternate payment method like NETELLER is used.</li><li>AUTHENTICATE &ndash; The user must be redirected to authenticate ownership of the payment account.</li></ul>|
|executionMode          |enum                       |This specifies the action of the merchant server in order to complete the payment. Possible values are:<ul><li>SYNCHRONOUS &ndash; The status of the payment request will be returned synchronously to the merchant, e.g., a credit card request.</li><li>ASYNCHRONOUS &ndash; The payment request is not completed immediately and the merchant must rely on webhooks to retrieve the status of the payment request.</li></ul>|
|amount                 |number<br/>`max=99999999999` |This is the amount of the request, in minor units.<br/>Note: This field is mandatory if *transactionType* is included. |
|currencyCode           |string<br/>`length=3`      |This is the currency of the merchant account, e.g., USD or CAD. See [Currency Codes](#currencycodes)|
|paymentHandleToken     |string                     |This is the payment token generated by Paysafe that will be used by merchants for payments requests.|
|card \|                | [card](#cardobject) \|         |These are details of the payment instrument used in the request. |
|billingDetails         |[billingDetails](#billingdetailsobject)         |These are billing details for the request.|
|profile                |[profile](#profileobject)  |This is the customer's profile. |
|merchantDescriptor     |[merchantDescriptor](#merchantdescriptorobject) |This is the merchant descriptor that will be displayed on the customer's card or bank statement.<br/>**Note:** Not all processing gateways support this parameter. Contact your account manager for more information.    |
|returnLinks            |[returnLinks](#returnlinksobject)         |These are links to which to redirect the customer, where applicable. |
|customerIp             |string<br/>`length<=39`    |This is the customer's IP address. |
|timeToLiveSeconds      |number                     |This is the period of time the single-use token is valid before expiration, in seconds, returned in the response.|

<a name="paymentsobject" title="Payments Object"></a>
## Payments

 * What happens when merchantDescriptor from paymentHandle conflicts with merchantDescriptor provided here?
 * acquirerData looks like it's only relevant for Original Credits (so shouldn't be here)

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.|
|dupCheck           |boolean                                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|settleWithAuth     |boolean                                |This indicates whether the request is an Authorization only (no Settlement), or a Purchase (Authorization and Settlement).<br/><ul><li>false &ndash; The request is not settled</li><li>true &ndash; The request is settled</li></ul><br/>**Note:** Defaults to *true*.|
|preAuth            |boolean                                |This indicates whether the Authorization request should be sent as a Pre-Authorization.<br/>**Note:** You should use the *preAuth* element in cases where you are not sure that you can fully settle the Authorization within 4 days. Contact your account manager for more information.|
|partialAuth        |[partialAuth](#partialauthobject)      |This is an authorization that is approved for an amount lower than the requested amount. The reminder of the amount could be paid by other means.|
|paymentHandleToken |string<br/>`length<=36`                |This is the payment handle token that represents the payment instrument to be used in the payment request. |
|paymentHandle      |[paymentHandle](#paymenthandleobject)  |These are details about the payment handle from which the token is derived. |
|authCode           |string<br/>`length<=50`                |This is the Authorization code assigned by the issuing bank and returned in the response.|
|availableToSettle  |number                                 |This is the amount of of the Authorization remaining to settle, in minor units.|
|childAccountNum    |string<br/>`length<=10`                |This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|customerIp         |string<br/>`length<=39`                |This is the customer's IP address.|
|description        |string<br/>`length<=255`               |This is a description of the transaction, provided by the merchant.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2019-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>HELD &ndash; The transaction has been placed on hold due to risk considerations.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li><li>PENDING &ndash; The request is pending.</li></ul>|
|currencyCode       |string<br/>`length=3`                  |This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes)|
|level2level3       |[level2level3](#level2level3object)    |This allows merchants who are enabled to provide additional L2/L3 transaction data.<br/>**Note:** Not all processing gateways support this parameter. Contact your account manager for more information.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) | This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|
|accordD            |[accordD](#accorddobject)              |These are parameters for financing plans supported for certain merchant configurations.<br/>Include this element **only when** instructed to do so by your account manager.|
|recipient          |[recipient](#recipientobject)          |In certain cases, this allows additional data to be included with a payment request. |
|riskReasonCode     |array                                  |An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|splitpay           |[splitpay](#splitpayobject)            |This enables you to use the Split Payouts functionality when authorizing with a Settlement.|
|storedCredentialDetails |[storedCredentialDetails](#storedcredentialobject) | This object is used to identify requests that use stored credentials that the merchant has on file for the consumer, in order to improve authorization rates and reduce fraud. |
|merchantDescriptor |[merchantDescriptor](#merchantdescriptorobject) |This is the merchant descriptor that will be displayed on the customer's card statement.<br/>**Note:** Not all processing gateways support this parameter. Contact your account manager for more information.|
|settlements        |array                                  |This is a read-only list of all settlements. This will be returned only if *settleWithAuth* = *true* in the request. |
|acquirerData       |[acquirerData](#acquirerdataobject)    |This is additional information about the card acquirer required when you are performing an Original Credit request. This object is required **only when** you are using Credorax (CRX) as your acquirer for Original Credits. Contact your account manager for details.|
|error              |[error](#errorobject)                  |       |
|statusReason       |string                                 |This is reason for the status. This is present in the case where *status* is ERROR, FAILURE, or HELD. |
|authentication     |[authentication](#authenticationobject)|These are 3D Secure details.|


<a name="profileobject" title="Profile Object"></a>
## profile

* What are possible values for locale?
* Field lengths in Confluence still need to be specified so I can use them here. 

|Element            |Type                               |Description    |
|---                |---                                |---            |
|id                 |string <br/>`length<=36`           |This is the ID returned in the response.|
|status             |enum                               |This is the status of the customer profile. Possible values are:<br/><ul><li>ACTIVE &ndash; The temporary profile ID can be used to retrieve the saved payment instrument.</li></ul> |
|merchantCustomerId |string <br/>`length<=100`          |This is a customer ID that the merchant provides with the request for their own internal customer identification.|
|locale             |enum                               |This indicates the customer's locale. Possible values are:<ul><li>???</li></ul>|
|firstName          |string <br/>`length<=80`           |This is the customer’s first name. |
|lastName           |string <br/>`length<=80`           |This is the customer’s last name. |
|email              |string<br/>`length<=255`           |This is the customer's email address.|
|phone              |string<br/>`length<=40`            |This is the customer's phone number.|
|dateOfBirth        |[dateOfBirth](#dateofbirthobject)  |These are the addresses associated with saved payment instruments for the customer. |

```apib
            {
              "merchantCustomerId":"mycustomer1",
              "locale" : "en_US",
              "firstName" : "John",
              "lastName" : "Smith",
              "email" : "john.smith@somedomain.com",
              "phone" : "713-444-5555"
             }
```

<a name="recipientobject" title="recipient Object"></a>
## recipient 

* I included extra information about the *recipient* object from the Card Payments API. Please advise if it no longer holds.

The recipient is deemed to be the person or party who has the contractual relationship with the merchant/financial institution. This may be different from the cardholder, e.g., in the case of a parent topping up a child's savings account. Therefore, the fields should not be collected on the same page as cardholder information, but instead be passed in the background from the merchant’s records.

**Note:** You can include *recipient* elements in your [authorization request](#authrequest) **only if** your Merchant Category Code is **6012** and your registered trading address is in the United Kingdom. All fields are optional. However, scheme fines may apply if data is consistently not supplied and chargebacks persist. If you have any questions, contact your account manager.
If you are using a payment token for an Authorization request and there is already recipient data for the consumer profile associated with the payment token, then if you include the *recipient* object in the Authorization, this data will override the recipient data already in the profile.

If you [look up an authorization request](#getauth)  that used the *visaAdditionalAuthData* parameter (now deprecated), the response will contain the relevant data in both the *recipient* and the *visaAdditionalAuthData* objects.

|Element                    |Type                       |Description                        |
|---                        |---                        |---                                |
|dateOfBirth                |[dateOfBirth](#dateofbirthobject) |This is the recipient's date of birth. |
|zip                        |string<br/>`length<=10`    |This is the recipient's postcode.<br/>**Note:** The last 3 characters are not sent to the banking network.|
|lastName                   |string<br/>`length<=255`   |This is the recipient's last name.<br/>**Note:** Only the first 6 characters are sent to the banking network.|
|accountNumber              |string<br/>`length<=25`    |This is the recipient's account number, e.g., a loan agreement number or customer ID. In the case where the recipient account is a prepaid card, the card number may be sent in full.<br/>**Note:** Only the first 6 and last 4 characters are sent to the banking network and will be masked accordingly within the back office and any other reports, to comply with PCI regulations.|

```apib
    {
    "recipient": {
        "dateOfBirth": {
            "day": 29,
            "month": 1,
            "year": 2001
        },
        "zip": "CB24 9AD",
        "lastName": "Smith",
        "accountNumber": "ABC1234567890"
    }
    }
```

<a name="refundsobject" title="refunds Object"></a>
## refunds
|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br>`max=99999999999`            |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit. Therefore, a transaction of 10.139 Tunisian dinar would be processed as 10.14.|
|dupCheck           |boolean                                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|childAccountNum    |string<br/>`length<=10`                |This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2014-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>PENDING &ndash; Our system has received the request but it has not yet been batched.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li></ul>|
|error              |[error](#errorobject)                  |       |
|splitpay           |[splitpay](#splitpayobject)            |This enables you to use the Split Payouts functionality when processing a refund.|
|riskReasonCode     |array                                  |An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) | This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|

```apib
{
    "merchantRefNum":"refund_id:1231",
    "amount":10098
}
```

<a name="returnlinksobject" title="returnLinks Object"></a>
## returnLinks

|Element    |Type          |Description|
|---        |---           |---|
|rel        |string        |This is the link type that allows different endpoints to be targeted depending on the end state of the transaction.|
|href       |string        |This is the URI of the resource.|

```apib
    {
    "links": [
        {
        "rel": "self",
        "href": "https://api.test.paysafe.com/cardpayments/v1/accounts/99000/settlements/00ec4b4f-f601-4430-8fb6-f90271cf9291"
        }
        ]
        }
```

<a name="settlementsobject" title="settlements Object"></a>
## settlements
|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units.For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit. Therefore, a transaction of 10.139 Tunisian dinar would be processed as 10.14.|
|dupCheck           |boolean                                |This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.<br/>**Note:** This value defaults to *true*.|
|availableToRefund  |number<br/>`max=99999999999`           |This is the amount of this Settlement that is available to Refund, in minor units. For example, US $10.99 would be 1099.|
|childAccountNum    |string<br/>`length<=10`                |This is the child merchant account number. It is returned only if the transaction was processed via a master account.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2014-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>PENDING &ndash; Our system has received the request but it has not yet been batched.</li><li>PROCESSING &ndash; The Settlement batch has started.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The transaction request has been cancelled.</li></ul>|
|error              |[error](#errorobject)                  |       |
|splitpay           |[splitpay](#splitpayobject)            |This enables you to use the Split Payouts functionality when settleing an Authorization.|
|riskReasonCode     |array                                  |An array of integers is returned, displaying the detailed Risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.|
|gatewayResponse    |[gatewayResponse](#gatewayresponseobject) | This is the read-only raw response returned by an acquirer. It is returned only if your account is configured accordingly.|


```apib
{
    "merchantRefNum":"merchantRef_2014_04_11_05",
    "amount":100
}
```

<a name="splitpayobject" title="splitpay Object"></a>
## splitpay

|Element            |Type    |Required |Description |
|---                |---     |---      |---        |
|linkedAccount      |string  |Yes      |This is the ID of the linked account.
|amount             |number  |         |This is the amount to transfer to the linked account in minor currency units. The total amount to all linked accounts cannot exceed the transaction total. Either this or percent must be specified.|
|percent            |number  |         |This is the percentage of the total transaction amount to transfer to the linked account, to two decimal places. The total percentage to all linked accounts cannot exceed 100%. Either this or amount must be specified.|

```apib
  {
  "splitpay": [
    {
    "linkedAccount": "123124124",
    "percent": 5
    },
    {
    "linkedAccount": "767862873",
    "amount": 500
    }]
  }
```

<a name="standalonecreditsobject" title="standalonecredits Object"></a>
## standalonecredits
 * dupCheck not supported? 
 * no txnTime returned?
 * Other elements missing when compared with original credits object from Card Payments API.

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.<br/>**Note:** If the merchant account is set up for a currency that has 3 decimal units, our system will half round up the least significant digit.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|paymentHandleToken |string                                 |This is the payment token generated by Paysafe that will be used by merchants for original credit requests.|
|currencyCode       |string<br/>`length=3`                  |This is the currency of the merchant account, e.g., USD or CAD, returned in the request response. See [Currency Codes](#currencycodes)|
|card               |[card](#cardobject)                    |These are the details of the card used.|
|billingDetails     |[billingDetails](#billingdetailsobject)|These are the billing details for the request.|
|customerIp         |string<br/>`length<=39`                |This is the customer's IP address.|
|description        |string<br/>`length<=255`               |This is a description of the transaction, provided by the merchant.|

```apib
{
  "merchantRefNum":"merchant ABC-444",
  "amount":10098,
  "paymentHandleToken": "SC9mbfZSITB5OwDJ",
  "currencyCode": "GBP",
  "customerIp":"204.91.0.12",
  "description":"Winning payment from Loto"
}    
```

<a name="storedcredentialobject" title="storedCredential Object"></a>
## storedCredential
* I included information for the *storedCredential* object from the Card Payments API. Please advise if it no longer holds. 

The *storedCredential* object is used to identify [authorization requests](#authrequest) that use stored credentials for a consumer, in order to improve authorization rates and reduce fraud. Stored credentials can be used in two cases: 
 - Using a payment token &ndash; An authorization request that uses a *paymentToken* from the [Customer Vault API](https://developer.paysafe.com/en/vault/api/)
 - Using a card number &ndash; An authorization request that uses a credit card number stored by the merchant 

**Notes:** 
 - If you use a *paymentToken* in the authorization request but do not include the *storedCredential* object, Paysafe will provide default information taken from Customer Vault data.
 - You cannot include both the *storedCredential* object and the *recurring* parameter in the same authorization request. Paysafe recommends using the *storedCredential* object.
 - The *cvv* parameter of the [card object](#cardobject) is required when the *occurrence* parameter is set to *INITIAL*. However, *cvv* is not required when the *occurrence* parameter is set to *SUBSEQUENT*.
 - The *storedCredential* object cannot be used for Apple Pay or Google Pay transactions.

|Element                 |Type                   |Description|
|---                     |---                    |---|
|type                    |enum                   |This specifies the type of request being made. Possible values are: <ul><li>ADHOC &ndash; Ad hoc consumer-initiated request</li><li>TOPUP &ndash; Unscheduled merchant-iniitated request when a consumer balance is below a set limit </li><li>RECURRING &ndash; Scheduled, merchant-initiated recurring request</li></ul><br/>**Note:** This value defaults to *ADHOC*.|
|occurrence              |enum                   |This specifies whether this stored credential request is initial or recurring. Possible values are: <ul><li>INITIAL &ndash; Used when this is the first time the consumer uses this credit card</li><li>SUBSEQUENT &ndash; Used when the consumer uses this credit card for subsquent requests </li></ul><br/>**Note:** This value defaults to *INITIAL*.|

```apib
{
    "storedCredential": {
        "type": "RECURRING",
        "occurrence": "SUBSEQUENT"
    }
}
```

<a name="voidauthsobject" title="Void Authorizations Object"></a>
## Void Authorizations

 * No *dupCheck* for this request?
 * I have copied over the status values from an existing API. Are these applicable here as well?

|Element            |Type                                   |Description                        |
|---                |---                                    |---                                |
|id                 |string <br/>`length<=36`               |This is the ID returned in the response. This ID can be used for future associated requests.|
|merchantRefNum     |string <br/>`length<=255`              |This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.|
|amount             |number<br/>`max=99999999999`           |This is the amount of the request, in minor units. For example, to process US $10.99, this value should be 1099. To process 1000 Japanese yen, this value should be 1000. To process 10.139 Tunisian dinar, this value should be 10139.|
|txnTime            |UTC formatted date                     |This is the date and time the request was processed. For example:<br/>2019-01-26T10:32:28Z|
|status             |enum                                   |This is the status of the transaction request. Possible values are:<ul><li>RECEIVED &ndash; Our system has received the request and is waiting for the downstream processor’s response.</li><li>COMPLETED &ndash; The transaction has been completed.</li><li>HELD &ndash; The transaction has been placed on hold due to risk considerations.</li><li>FAILED &ndash; The transaction failed, due to either an error or being declined.</li><li>CANCELLED &ndash; The request has been fully voided (reversed).</li><li>PENDING &ndash; The request is pending.</li></ul>|


# Group Payment Methods

## Fetch Available Payment Methods [/v1/paymentmethods]

### Payment Methods [POST]

This API will provide all the available payment methods for the Merchant. Merchant can have his own configuration defined at Paysafe side, which will be used to filter the payment methods based on amount and currency.

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
                "currency" : "CAD",
                "amount" : "200"
            } 

+ Response 200 (application/json)

    + Body

            {
                "currency" : "CAD",
                "paymentMethods": [
                {
                  "name": "Card",
                  "type": "scheme",
                  "operationsSupported" : ["payment", "settlement", "refund"],
                  "details": [
                    {
                      "key": "cardNumber",
                      "type": "number"
                    },
                    {
                      "key": "securityCode",
                      "type": "number"
                    },
                    {
                      "key": "encryptedExpiryMonth",
                      "type": "number"
                    },
                    {
                      "key": "encryptedExpiryYear",
                      "type": "number"
                    },
                    {
                      "key": "holderName",
                      "optional": "true",
                      "type": "text"
                    }
                  ]
                },
                {
                  "name" : "Skrill",
                  "type" : "wallet",
                  "operationsSupported" : ["payment", "settlement", "refund"]
                },
                {
                  "name" : "Neteller",
                  "type" : "wallet",
                  "operationsSupported" : ["payment", "settlement", "refund"]
                },
                {
                  "name" : "Paysafecash",
                  "type" : "wallet",
                  "operationsSupported" : ["payment", "settlement", "refund"]
                },
                {
                  "name" : "Paysafecard",
                  "type" : "wallet",
                  "operationsSupported" : ["payment", "settlement", "refund"]
                }
              ]
            }
            

# Group Payment Handles

## Payment Handle [/v1/paymenthandles]

PaymentHandle is a contract of a Payment, which contains customer's payment instrument and other details like amount, payment method, customer profile, etc. This accepts a variety of payment methods with a single API. 
<br>
> **Note:** A payment handle can be used in a [payment request](#paymentrequests) only if it has the status of **PAYABLE**. 

### Create Payment Handle [POST]

Creates a new Payment Handle object.

+ Attributes 
    + Include PaymentHandleRequest

+ Request Create Payment Handle for Card without 3D Secure Enabled (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-101",
              "transactionType": "PAYMENT",
              "card": {
                "cardNum": "5191330000004415",
                "cardExpiry": {
                  "month": 10,
                  "year": 2020
                },
                "cvv": "111",
                "holderName": "poorna"
              },
              "paymentType": "CARDS",
              "amount": 190,
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig/payment/return/failed",
                  "method": "GET"
                }
              ]
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "26359efd-7cfb-4014-a13d-1724e3ff17fa",
              "amount": 190,
              "merchantRefNum": "merchantRefNum-101",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCO3wKcIyLoQbQvw",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig/payment/return/failed",
                  "method": "GET"
                }
              ],
              "timeToLiveSeconds": 299,
              "transactionType": "PAYMENT"
            }

+ Request Create Payment Handle for Card with 3D Secure Enabled (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-124",
              "transactionType": "PAYMENT",
              "card": {
                "cardNum": "4538261230000003",
                "cardExpiry": {
                  "month": 10,
                  "year": 2020
                },
                "cvv": "111",
                "holderName": "poorna"
              },
              "paymentType": "CARDS",
              "amount": 3000,
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig/payment/return/failed",
                  "method": "GET"
                }
              ]
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "372b5ee7-6360-4403-b444-164f8f1d2709",
              "amount": 3000,
              "merchantRefNum": "merchantRefNum-124",
              "action": "REDIRECT",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "INITIATED",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "VI",
                "cardBin": "453826",
                "lastDigits": "0003"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig/payment/return/failed",
                  "method": "GET"
                },
                {
                  "rel": "payment_redirect",
                  "href": "http://hyd-dev-ms1.in.paysafe.com:8287/cardadapter/v1/card/redirect/372b5ee7-6360-4403-b444-164f8f1d2709",
                  "method": "GET"
                }
              ],
              "timeToLiveSeconds": 299,
              "transactionType": "PAYMENT"
            }

+ Request Create Payment Handle for Card for Standalone Credit (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-190",
              "transactionType": "STANDALONE_CREDIT",
              "card": {
                "cardNum": "4538261230000003",
                "cardExpiry": {
                  "month": 10,
                  "year": 2020
                },
                "cvv": "111",
                "holderName": "poorna"
              },
              "paymentType": "CARDS",
              "amount": 3000,
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "372b5ee7-6360-4403-b444-164f8f1d2709",
              "amount": 3000,
              "merchantRefNum": "merchantRefNum-190",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCyGZDlUuZ9zxjyd",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "holderName": "poorna",
                "cardType": "VI",
                "cardBin": "453826",
                "lastDigits": "0003"
              },
              "timeToLiveSeconds": 299,
              "transactionType": "STANDALONE_CREDIT"
            }
            
+ Request Create Payment Handle for Card for Verification (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Body

            {
              "merchantRefNum": "merchantRefNum-196",
              "transactionType": "VERIFICATION",
              "card": {
                "cardNum": "4107857757053670",
                "cardExpiry": {
                  "month": 12,
                  "year": 2034
                },
                "cvv": "222"
              },
              "paymentType": "CARDS",
              "currencyCode": "GBP",
              "customerIp": "172.0.0.1",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "zip": "M5H 2N2",
                "country": "CA"
              }
            }

+ Response 200 (application/json)

    + Body

            {
              "id": "16113177-3d68-4c91-8f69-ce41903f1446",
              "merchantRefNum": "merchantRefNum-196",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "PAYABLE",
              "timeToLiveSeconds": 299,
              "transactionType": "VERIFICATION",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SCfZX0QEvEvSszKy",
              "billingDetails": {
                "nickName": "Home",
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "cardType": "VI",
                "cardBin": "410785",
                "lastDigits": "3670"
              }
            }

### Get Payment Handle [GET /v1/paymenthandles/{paymenthandle_id}]

This is how you look up a payment handle, using the unique payment handle ID returned in the response to the initial payment handle creation request.

+ Parameter

 + paymenthandle_id : `26359efd-7cfb-4014-a13d-1724e3ff17fa` - This is the payment handle ID returned in the response to the payment handle creation request.

+ Response 200 (application/json)

    + Body

            {
              "id": "26359efd-7cfb-4014-a13d-1724e3ff17fa",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-115",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "EXPIRED",
              "timeToLiveSeconds": 0,
              "transactionType": "PAYMENT",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SC0YsGIIgFksiOsQ",
              "paymentToken": "SC0YsGIIgFksiOsQ",
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig/payment/return/failed",
                  "method": "GET"
                }
              ]
            }

### Get Payment Handle by Merchant Reference Number [GET /v1/paymenthandles?merchantRefNum={merchant_ref_num}]

Fetch an existing payment handle object, using the merchant genereated unique id used during payment handle creation request.

+ Parameter

    + merchant_ref_num : `13995817730005389` - This is the *merchantRefNum* used in the original payment handle creation request.

+ Response 200 (application/json)

    + Body

            {
              "id": "cc719995-59ed-4146-a936-b54db72bcaa8",
              "amount": 1900,
              "merchantRefNum": "merchantRefNum-130",
              "action": "NONE",
              "currencyCode": "GBP",
              "usage": "SINGLE_USE",
              "status": "EXPIRED",
              "timeToLiveSeconds": 0,
              "transactionType": "PAYMENT",
              "paymentType": "CARD",
              "executionMode": "SYNCHRONOUS",
              "customerIp": "172.0.0.1",
              "paymentHandleToken": "SC0YsGIIgFksiOsQ",
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H 2N2"
              },
              "card": {
                "cardExpiry": {
                  "month": "12",
                  "year": "2034"
                },
                "holderName": "poorna",
                "cardType": "MC",
                "cardBin": "519133",
                "lastDigits": "4415"
              },
              "returnLinks": [
                {
                  "rel": "on_completed",
                  "href": "https://usgaminggamblig/payment/return/success",
                  "method": "GET"
                },
                {
                  "rel": "on_failed",
                  "href": "https://usgaminggamblig/payment/return/failed",
                  "method": "GET"
                }
              ]
            }

# Group Payments

## Payments [/v1/payments]
<a name="paymentrequests" title="Payments"></a>

Payments is used to authorize an amount. The authorized amount must be settled in a subsequent settlement transaction.
For Purchase requests. i.e., requests which authorizes and settles in the same request, set the settleWithAuth  parameter to true.


### Create Payment with Payment Handle Token [POST]

- An Payment request that will have to be settled later
- A purchase/sale request, which authorizes and settles the payment in a single request by setting the settleWithAuth parameter to true


+ Attributes 
    + Include PaymentsRequest

+ Request Submit a Card Payment with a Payment Handle (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-108",
              "amount": 190,
              "currencyCode": "GBP",
              "dupCheck": true,
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "customerIp": "10.10.12.64",
              "description": "Magazine subscription"
            }
            
+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 190,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-09T11:05:24+0000",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 1900,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              },
              "merchantDescriptor": {
                "dynamicDescriptor": "54321",
                "phone": "333-123456789"
              }
            }

### Get Payments [GET /v1/payments/{payment_id}]

Click on Get Payments above to see how to fetch the payments by payment_id.

+ Parameter

   + payment_id : `3aeb9c63-6386-46a3-9f8e-f452e722228a` - This is the ID returned in the response to the Payments request.

+ Response 200 (application/json)

    + Body

            {
              "id": "3aeb9c63-6386-46a3-9f8e-f452e722228a",
              "amount": 190,
              "merchantRefNum": "merchantRefNum-108",
              "settleWithAuth": false,
              "paymentHandleToken": "SCZJg09GWSv36NLB",
              "txnTime": "2018-12-09T11:05:24+0000",
              "customerIp": "10.10.12.64",
              "dupCheck": true,
              "description": "Magazine subscription",
              "currencyCode": "GBP",
              "status": "COMPLETED",
              "availableToSettle": 1900,
              "gatewayResponse": {
                "authCode": "135880",
                "avsResponse": "MATCH",
                "cvvVerification": "MATCH"
              },
              "merchantDescriptor": {
                "dynamicDescriptor": "54321",
                "phone": "333-123456789"
              }
            }
            
### Get Payments by Merchant Reference number [GET /v1/payments?merchantRefNum={merchant_ref_num}]

Click on above to fetch the payments by merchant refernce number.

+ Parameter

   + merchant_ref_num : `merchantRefNum-145` -This is the merchant reference number created by the merchant and submitted as part of the request.

+ Response 200 (application/json)

    + Body

            {
              "payments": [
                {
                  "id": "8190c675-6d68-4cd7-a29c-55b406addaeb",
                  "amount": 40,
                  "merchantRefNum": "merchantRefNum-145",
                  "settleWithAuth": false,
                  "paymentHandleToken": "SChfCGCURe5NiLIv",
                  "authCode": "107212",
                  "txnTime": 1544108515000,
                  "customerIp": "10.10.12.64",
                  "description": "Magazine subscription",
                  "currencyCode": "GBP",
                  "status": "COMPLETED",
                  "avsResponse": "MATCH",
                  "cvvVerification": "MATCH",
                  "availableToSettle": 40,
                  "merchantDescriptor": {
                    "dynamicDescriptor": "54321",
                    "phone": "333-123456789"
                  }
                }
              ]
            }
            
# Group Settlements 

## Settlements [/v1/payments/{payment_id}/settlements]

Settlement with dupCheck and merchentRefNum

+ Parameter

    + payment_id : `c64ecbf2-a942-4f7c-b412-70217a0eb16e` - This is the ID returned in the response to the Payments request.

### Post Settlement [POST]

- A regular Settlement, where the initial request was an Authorization that now has to be settled
- A partial Settlement, where only part of the initial Authorization is settled, leaving the balance to be settled later
- A Settlement that is split into multiple merchant accounts, for merchant accounts that are configured to do so

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Attributes(SettlementResponse)
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-117",
              "amount": 190
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "merchantRefNum": "merchantRefNum-117",
              "amount": 190,
              "id": "a07b0597-f106-4790-9661-f0d452619f5d",
              "availableToRefund": 190,
              "txnTime": "2018-12-09T10:56:36+0000",
              "status": "PENDING"
            }
            

### Cancel a Settlement [PUT /v1/settlement/{settlement_id}]

- Settlement with dupCheck and merchentRefNum
- Partial Settlement with amount in Request Body 

+ Parameter

    + settlement_id : `d9bcfd85-8aa6-469d-80a3-e2ca196544da` - This is the ID returned in the response to the Settlement request. 

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
              "txnTime": "2018-12-09T11:17:29+0000",
              "status": "CANCELLED"
            }
            

### Get Settlements [GET /v1/settlements/{settlement_id}]

Click on Get Settlements above to see how to fetch the settlements by settlement_id.

+ Parameter

   + settlement_id : `ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85` - This is the ID returned in the response to the Payments request.

+ Response 200 (application/json)

    + Body

            {
              "merchantRefNum": "merchantRefNum-144",
              "amount": 40,
              "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
              "availableToRefund": 40,
              "txnTime": "2018-12-09T10:56:36+0000",
              "status": "PENDING"
            }
            
### Get Settlements by Merchant Reference number [GET /v1/settlements?merchantRefNum={merchant_ref_num}]

Click on above to fetch the Settlements by merchant refernce number.

+ Parameter

   + merchant_ref_num : `merchantRefNum-144` -This is the merchant reference number created by the merchant and submitted as part of the request.

+ Response 200 (application/json)

    + Body

            {
              "settlements": [
                {
                  "merchantRefNum": "merchantRefNum-144",
                  "amount": 40,
                  "id": "ea49ab6c-cf9b-4efd-bde8-2fa3bb5ccd85",
                  "availableToRefund": 40,
                  "txnTime": "2018-12-09T10:56:36+0000",
                  "status": "PENDING"
                }
              ]
            }

# Group Refunds

## Refunds [/v1/payments/{settlement_id}/refunds]

The settlement details in case of Card payment method can be sent through Request Body

+ Parameter

    + settlement_id : `d9bcfd85-8aa6-469d-80a3-e2ca196544da`

### Post Refund [POST]

- A regular Refund
- A Refund that is split into multiple merchant accounts, for merchant accounts that are configured to do so

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Attributes(RefundResponse)
    
    + Body

            {
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "dupCheck": true
            }
                        
+ Response 200 (application/json)

    + Body
            
            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "txnTime": "2018-12-09T11:41:09+0000",
              "status": "PENDING"
            }
            
### Cancel Refund [PUT /v1/refunds/{refund_id}]

Click on Cancel a Refund above to see how to submit a Cancel Refund request.

+ Parameter

    + refund_id : `c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725` - This is the ID returned in the response to the Refund request
    
+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }
                        
+ Response 200 (application/json)

    + Body

            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "txnTime": "2018-12-10T11:19:51Z",
              "status": "CANCELLED"
            }
            
### Get Refund [GET /v1/refunds/{refund_id}]

Click on above to fetch the Refunds by Id.

+ Parameter

    + refund_id : `c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725` - This is the ID returned in the response to the Refund request

+ Response 200 (application/json)

    + Body

            {
              "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
              "merchantRefNum": "merchantRefNum-118",
              "amount": 190,
              "txnTime": "2018-12-09T11:41:09+0000",
              "status": "PENDING"
            }
            
### Get Refunds by Merchant Reference number [GET /v1/refunds?merchantRefNum={merchant_ref_num}]

Click on above to fetch the Refunds by merchant refernce number.

+ Parameter

   + merchant_ref_num : `merchantRefNum-118` -This is the merchant reference number created by the merchant and submitted as part of the request.

+ Response 200 (application/json)

    + Body

            {
              "refunds": [
                {
                  "id": "c7ef07b2-0069-4f58-b9e2-0f4cdbc6c725",
                  "merchantRefNum": "merchantRefNum-118",
                  "amount": 190,
                  "txnTime": "2018-12-09T11:41:09+0000",
                  "status": "PENDING"
                }
              ]
            }
         
# Group Standalone Credits 

## Standalone Credits [/v1/standalonecredits]

Standalone Credits allow merchants to issue credits to cardholders without requiring a previous Authorization/Settlement.

### Post Standalone Credit [POST]

- Credit with original Card information with Payment Handle Token


+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Attributes (OriginalCreditResponse)
    
    + Body

            {
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "currencyCode": "GBP",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Winning payment from Loto 649"
            }    
            
+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "lastDigits": "0003"
              },
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H2N2"
              },
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }
            
### Cancel Standalone Credit [PUT /v1/standalonecredits/{standalone_credit_id}]

Click on Cancel a Standalone Credit above to see how to submit a Cancel Standalone Credit request.

+ Parameter

    + standalone_credit_id : `e075f2ae-dfc4-4f6d-8d89-61158367b6a6`
    

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }


+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "status": "CANCELLED"
            }
            

### Get Standalone Credit [GET /v1/standalonecredits/{standalone_credit_id}]

Click on Get Standalone Credit above to see how to look up a Standalone Credit request using the ID returned in the response to the original request.

+ Parameter

    + standalone_credit_id : `e075f2ae-dfc4-4f6d-8d89-61158367b6a6`

+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "lastDigits": "0003"
              },
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H2N2"
              },
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }
            
### Get Standalone Credit Using Merchant Reference Number  [GET /v1/standalonecredits?merchantRefNum={merchantRefNum}]

Click on Get Standalone Credit Using Merchant Reference Number above to see how to look up a Standalone Credit using the merchant reference number used in the original request.

+ Parameter

   + merchantRefNum : "merchantRefNum-151"

+ Response 200 (application/json)

    + Body

            {
              "standaloneCredits": [
                {
                  "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
                  "amount": 40,
                  "merchantRefNum": "merchantRefNum-151",
                  "card": {
                    "cardExpiry": {
                      "month": "10",
                      "year": "2020"
                    },
                    "lastDigits": "0003"
                  },
                  "billingDetails": {
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "country": "CA",
                    "zip": "M5H2N2"
                  },
                  "customerIp": "204.91.0.12",
                  "currencyCode": "GBP",
                  "status": "PENDING",
                  "description": "Winning payment from Loto 649"
                }
              ]
            }
            


# Group Original Credits 

## Original Credits [/v1/originalcredits]

Original Credits allow merchants with specific merchant category codes (MCCs) to issue winnings as credits to cardholders, without requiring a previous Authorization/Settlement.

### Original Credit [POST]

- An Original Credit request using a Payment Handle token.

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Attributes (OriginalCreditResponse)
    
    + Body

            {
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "currencyCode": "GBP",
              "paymentHandleToken": "SC9mbfZSITB5OwDJ",
              "customerIp": "204.91.0.12",
              "description": "Winning payment from Loto 649"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "amount": 40,
              "merchantRefNum": "merchantRefNum-151",
              "card": {
                "cardExpiry": {
                  "month": "10",
                  "year": "2020"
                },
                "lastDigits": "0003"
              },
              "billingDetails": {
                "street": "100 Queen",
                "street2": "Unit 201",
                "city": "Toronto",
                "country": "CA",
                "zip": "M5H2N2"
              },
              "customerIp": "204.91.0.12",
              "currencyCode": "GBP",
              "status": "PENDING",
              "description": "Winning payment from Loto 649"
            }

### Cancel an Original Credit [PUT /v1/originalcredits/{original_credit_id}]

Click on Cancel an Original Credit above to see how to submit a Cancel Original Credit request.

+ Parameter

   + original_credit_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Original Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
              "status": "CANCELLED"
            }


+ Response 200 (application/json)

    + Body

            {
              "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
              "status": "CANCELLED"
            }
            

### Get Original Credit [GET /v1/originalcredits/{original_credit_id}]

Click on Get Original Credit above to see how to look up an Original Credit request using the ID returned in the response to the original request.

+ Parameter

   + original_credit_id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Original Credit request. Example: 86dcb68d-cbd0-4878-8da7-ffc0e6554513.


+ Response 200 (application/json)

    + Body

            {
              "id": "86dcb68d-cbd0-4878-8da7-ffc0e6554513",
              "merchantRefNum": "13995817730005399",
              "txnTime": "2017-07-06T19:59:17Z",
              "status": "PENDING",
              "amount": 1000,
              "card": {
                "type": "VI",
                "lastDigits": "1111",
                "cardExpiry": {
                  "month": 2,
                  "year": 2019
                }
              },
              "profile": {
                "firstName": "Joe",
                "lastName": "Smith",
                "email": "Joe.Smith@canada.com"
              },
              "billingDetails": {
                "street": "100 Queen Street West",
                "city": "Toronto",
                "state": "ON",
                "country": "CA",
                "zip": "M5H2N2"
              },
              "customerIp": "204.91.0.12",
              "description": "Winning payment from Loto",
              "currencyCode": "CAD",
              "accountId": "123456789",
              "links": [
                {
                  "rel": "self",
                  "href": "https://api.test.paysafe.com/cardpayments/v1/originalcredits/86dcb68d-cbd0-4878-8da7-ffc0e6554513"
                }
              ]
            }
            
### Get Original Credit Using Merchant Reference Number [GET /v1/originalcredits?merchantRefNum={merchantRefNum}]

Click on Get Original Credit Using Merchant Reference Number above to see how to look up an Original Credit request using the merchant reference number used in the original request.

+ Parameter

   + merchantRefNum : merchantRefNum-151 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Response 200 (application/json)
  
   + Body

            {
              "standaloneCredits": [
                {
                  "id": "e075f2ae-dfc4-4f6d-8d89-61158367b6a6",
                  "amount": 40,
                  "merchantRefNum": "merchantRefNum-151",
                  "card": {
                    "cardExpiry": {
                      "month": "10",
                      "year": "2020"
                    },
                    "lastDigits": "0003"
                  },
                  "billingDetails": {
                    "street": "100 Queen",
                    "street2": "Unit 201",
                    "city": "Toronto",
                    "country": "CA",
                    "zip": "M5H2N2"
                  },
                  "customerIp": "204.91.0.12",
                  "currencyCode": "GBP",
                  "status": "PENDING",
                  "description": "Winning payment from Loto 649"
                }
              ]
            }
            
# Group Void Authorizations 

Void Authorization allow merchants to cancel/void authorisation. 

### Void an Authorization [POST /v1/payments/{PAYMENT_ID}/voidauths]

- Click on Void an Authorization above to see how to submit a Void Authorization request. You can void an Authorization only if it has not yet been settled.

+ Parameter

    + PAYMENT_ID : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the Payment request.
    
+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
            
    + Attributes (voidAuthResponse)
            
    + Body

            {
              "amount": 900,
              "merchantRefNum": "13915817720025003"
            }
     
+ Response 200 (application/json)

    + Body

            {
              "id": "50175d73-be3d-4594-b570-9095a17121de",
              "merchantRefNum": "13915817720025003",
              "amount": 900,
              "txnTime": "2018-12-10T11:00:53+0000",
              "status": "COMPLETED"
            }

### Get Void Authorization [GET /v1/voidauths/{VOID_AUTH_ID}]

Click on Get Void Authorization above to see how to look up a Void Authorization request using the ID returned in the response to the original request.

+ Parameter

   + VOID_AUTH_ID : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` - This is the ID returned in the response to the void authorisation request.


+ Response 200 (application/json)

    + Body

            {
              "id": "65bb2b2e-be2f-4ae8-9a2a-f24239309c7d",
              "merchantRefNum": "1391581772002515624",
              "amount": 900,
              "txnTime": "2018-12-10T11:17:23Z",
              "status": "COMPLETED"
            }
            
### Get Void Authorization Using Merchant Reference Number [GET /v1/voidauths?merchantRefNum={MERCHANT_REF_NUM}]

Click on Get Void Authorization Using Merchant Reference Number above to see how to look up a Void Authorization request using the merchant reference number used in the original request.

+ Parameter

   + MERCHANT_REF_NUM : 1391581772002515624 - This is the merchant reference number created by the merchant and submitted as part of the request. 

+ Response 200 (application/json)
  
   + Body

            {
              "voidAuths": [
                {
                  "id": "65bb2b2e-be2f-4ae8-9a2a-f24239309c7d",
                  "merchantRefNum": "1391581772002515624",
                  "amount": 900,
                  "txnTime": "2018-12-10T11:17:23Z",
                  "status": "COMPLETED"
                }
              ]
            }



## Create Customer [/v1/customers]

### Create Customer Profile [POST]

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
                "firstName": "John",
                "lastName": "Smith",
                "phone" : "123-456-7890",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 10,
                    "day": 24
                },
                "address": {
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 200",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA",
                    "state": "ON"
                },
                "email": "john.smith@email.com"
            }

+ Response 200 (application/json)

    + Body

            {
                "customerId": "Gt56fR6",
                "firstName": "John",
                "lastName": "Smith",
                "phone" : "123-456-7890",
                "dateOfBirth": {
                    "year": 1981,
                    "month": 10,
                    "day": 24
                },
                "address": {
                    "addressId": "DF45FDtrR",
                    "nickName": "Home",
                    "street": "100 Queen",
                    "street2": "Unit 200",
                    "city": "Toronto",
                    "zip": "M5H 2N2",
                    "country": "CA",
                    "state": "ON"
                },
                "email": "john.smith@email.com"
            }

## Single User Customer Tokens [/v1/singleusecustomertokens]

### Create Single Use Customer Tokens [POST]

The API allows creation of single use customer token needed for cases where saved payment handles for a customer needs to be displayed in UI.

+ Request (application/json)

    + Headers

            Authorization: "Basic YOUR-BASE64-ENCODED-API-KEY"
    
    + Body

            {
               "customerId" : "e979132e-a1f7-454b-a764-2aada299b3be",
               "paymentTypes" : [ "CARD", "ACH"]
            }


+ Response 200 (application/json)

    + Body

            {
             "id" : "86dcb68d-cbd0-4878-8da7-ffc0e6554513",     
             "customerId" : "e979132e-a1f7-454b-a764-2aada299b3be",
             "paymentTypes" : [ "CARD", "ACH"],
             "timeToLiveSeconds" : "899",
             "status" : "ACTIVE",
             "merchantCustomerId" : "mycustomer1",
             "locale" : "en_US",
             "firstName" : "John",
             "lastName" : "Smith",
             "email" : "john.smith@somedomain.com",
             "phone" : "713-444-5555",
             "addresses": [
                {
                  "id": "6a275b7c-6f11-4ed1-ae77-21071724574a",
                  "status": "ACTIVE",
                  "nickName": "Home",
                  "street": "100 Queen",
                  "street2": "Unit 201",
                  "city": "Toronto",
                  "zip": "M5H 2N2",
                  "country": "CA",
                  "state": "ON",
                  "recipientName": "Jane Smith",
                  "phone": "647-788-3901"
                }
              ],
             "paymentHandles" : [
              {
                "id" : "52c54707-a536-4c3d-b2e9-ebdba8c1bd3e",
                "timeToLiveSeconds" : "899",
                "usage": "LOOKUP",
                "paymentType": "CARD",
                "paymentHandleToken" : "hdhfsafhdfsahg",
                "card": {
                    "lastDigits": "1111",
                    "cardExpiry": {
                        "month" : "12",
                        "year" : "2020"
                    },
                    "holderName": "TEST CUSTOMER",
                    "cardBin": "453091",
                    "cardType": "VI"
                },
                "billingAddressId": "6a275b7c-6f11-4ed1-ae77-21071724574a"
             }]
            }

### Get Saved Payment Handles using single use Customer Token Id [GET /v1/singleusecustomertokens/{id}]

The operation allows look up of saved payment handles using a single use customer token. The payment handles are created with usage set to LOOKUP in a PENDING state.
The payment handles returned can be converted into a single Use payment handle when a user clicks on the pay button and the flow continues as with a non-saved flow.

Note: This API will be accessible with public API key. 

+ Parameter

   + id : `86dcb68d-cbd0-4878-8da7-ffc0e6554513` 


+ Response 200 (application/json)

    + Body
            
            {
             "id" : "86dcb68d-cbd0-4878-8da7-ffc0e6554513",     
             "customerId" : "e979132e-a1f7-454b-a764-2aada299b3be",
             "paymentTypes" : [ "CARD", "ACH"],
             "timeToLiveSeconds" : "899",
             "status" : "ACTIVE",
             "merchantCustomerId" : "mycustomer1",
             "locale" : "en_US",
             "firstName" : "John",
             "lastName" : "Smith",
             "email" : "john.smith@somedomain.com",
             "phone" : "713-444-5555",
             "addresses": [
                {
                  "id": "6a275b7c-6f11-4ed1-ae77-21071724574a",
                  "status": "ACTIVE",
                  "nickName": "Home",
                  "street": "100 Queen",
                  "street2": "Unit 201",
                  "city": "Toronto",
                  "zip": "M5H 2N2",
                  "country": "CA",
                  "state": "ON",
                  "recipientName": "Jane Smith",
                  "phone": "647-788-3901"
                }
              ],
             "paymentHandles" : [
              {
                "id" : "52c54707-a536-4c3d-b2e9-ebdba8c1bd3e",
                "timeToLiveSeconds" : "899",
                "usage": "LOOKUP",
                "paymentType": "CARD",
                "paymentHandleToken" : "hdhfsafhdfsahg",
                "card": {
                    "lastDigits": "1111",
                    "cardExpiry": {
                        "month" : "12",
                        "year" : "2020"
                    },
                    "cardBin": "453091",
                    "cardType": "VI",
                    "holderName": "TEST CUSTOMER"
                },
                "billingAddressId": "6a275b7c-6f11-4ed1-ae77-21071724574a"
             }]
            }

# Data Structures

## accordD
+ accordD (object)
    + Properties
        + `financingType`:`DEFERRED_PAYMENT` (enum) - This is the type of financing offered.
            + Members
                + DEFERRED_PAYMENT - Deferred payment financing
                + EQUAL_PAYMENT - Equal payment financing
        + `plan`:`124` (string) - This is the plan number for this financing transaction.
            _length<=3_
        + `gracePeriod`:`12` (number) - This is the grace period, in months, associated with deferred payment transactions.
            _max=99_
        + `term`:`12` (number) - This is the number of payments, in months, for equal payment transactions.
            _max=99_

## acquirerDataAttributes (object)
+ acquirerData.code - This is the code of the acquirer data. Possible values are:
        + CRX (Credorax)
+ acquirerData.authId - This is the auth idof the acquirer data.
+ acquirerData.externalSubMerchantId - This is the external merchant id of the acquirer data.

## authenticationAttributes (object)
+ authentication.id -This is the id of authentication.
+ authentication.eci -This is the eci of authentication.
+ authentication.cavv -This is the cavv of authentication.
+ authentication.xid -This is the xid of authentication.
+ authentication.status -This is the status of authentication.
+ authentication.merchantRefNum -This is the merchantRefNumof authentication.
+ authentication.threeDEnrollment -This is the threeDEnrollmentof authentication.
+ authentication.threeDResult -This is the threeDResultof authentication.
+ authentication.signatureStatus -This is the signatureStatus of authentication.
+ authentication.error (object) -This is the error details of authentication.
    + code -This is the error code.
    + message -This is the description of the error.
    + fieldErrors (object) -This is a list of fields that have issues.
    + field -Field name.
    + error -Error associated with the field name.

## Billing Details
+ billingDetails (object) - These are the billing details for the request.
    + street:`100 Queen` (string)  - This is the first line of the street address in the billing address.
        _length<=50_
    + street2:`Unit 201` (string) - This is the second line of the street address in the billing address, if required (e.g., apartment number).
        _length<=50_
    + city:`Toronto` (string) - This is the city in the billing address.
        _length<=40_
    + zip:`MSH 2N2` (string) - This is the postal/zip code in the billing address.
        _length<=10_
    + country:`CA` (string) - This is the country where the address is located. See [Country Codes](#countrycodes).
        _length=2_
    + state:`ON` (string) - This is the state or province of the billing address. For Canada see [Province Codes](#provincecodes). For the United States see [State Codes](#statecodes). Other countries have no restrictions.
        _length<=40_
    + phone:`444-9999` (string) - This is the customer's telephone number.
        _length<=40_

## `Card`

+ One of

    + card (object, required) - This is the payment token that represents the [card](#cardobject) used for the request. Only one **card** object can be included in the request.

        + Properties

            + paymentToken:`LTEyMzYzMjQ3ODg` (string, required) - This is the payment token representing the card.
                _length<=80_
            + cvv:`123` (string, optional) - This is the 3- or 4-digit security code that appears on the card following the card number.
                _length=3-4_

    + card (object, required) - These are the details of the [card](#cardobject) used for the request. Only one **card** object can be included in the request.

        + Properties

            + cardNum:`4111111111111111` (string, required) - This is the card number used for the request.
                _length=8-20_
                
            + cardExpiry (object, required) - This is the card's [expiry date](#cardexpiryobject).
                + month:12 (number, required) - This is the card expiry month.
                    _length=2_
                + year:2020 (number, required) - This is the card expiry year.
                    _length=4_
            + cvv:`123` (string) - This is the 3- or 4-digit security code that appears on the card following the card number.
                _length=3-4_
            + holdername:`Jane Smith` (string) - This is the name of the card holder.
            + type (enum) - This is type of card used for the request.
                - AM – American Express
                - DC – Diners Club
                - DI – Discover
                - JC – JCB
                - MC – Mastercard
                - MD – Maestro
                - SF – Swiff
                - SO – Solo
                - VI – Visa
                - VD – Visa Debit
                - VE – Visa Electron
            + lastDigits:`1111` (string) - These are the last four digits of the card used for the request.
                _Read Only, length=4_
            + status:`STATUS` (enum) - This is the status of the card.
                + Members
                    + STATUSES?
            + nickName:`Jane's Card` (string) - This is the nickname the merchant has for the card holder.
                _length<=???_
            + cardBin:`411111` (string) - This is the card BIN (typically the first 6 digits).
                _Read Only, length=6_
            + track1 (string, optional) - This is Track 1 information read from the card's magnetic stripe.
            + track2 (string, optional) - This is Track 2 information read from the card's magnetic stripe.

## `Date of Birth`
+ dateOfBirth (object, required) - This is the customer's date of birth. 

    + Properties
        + day:29 (number, required) - This is the day of birth.
            _length=2_
        + month:12 (number, required) - This is the month of birth.
            _length=2_
        + year:2020 (number, required) - This is the year of birth.
            _length=4_

## errorAttributes (object)
+ error.code -This is the error code.
+ error.internalCode -This is the internal error code.
+ error.message -This is the description of the error.
+ error.riskReasonCode -if applicable The corresponding reason code from the risk system
+ error.details(array) -if applicable This is a collection of detailed description.
+ error.fieldErrors(array) - if applicable This is a list of fields that have issues.
    + field -Field name.
    + error -Error associated with the field name.
+ error.links (array) - if applicable This is a list of links to the related resource
    + rel - Description or relation of the link. Eg: default, self, first, prev, next, last
    + href - The actual URL of the link.

## Gateway Response
+ gatewayResponse (object) - This is the raw response returned by an acquirer. It is returned only if your account is configured accordingly.
    _Read Only_

    + Properties
        + code (string) - This is acquirer identification code, such as DJN, CRX, etc.
            _Read Only_
        + responseCode (string) - This is the raw response returned by the acquirer.
            _Read Only_
        + avsCode (string) - This is the raw AVS code returned by the acquirer.
            _Read Only_
        + balanceResponse (string) - This is the balance remaining on a gift card, if a gift card was used for the original transaction.
            _Read Only_
        + mid (string) - This is the acquirer MID that was sent to the clearing house.
            _Read Only_
        + terminalId (string) - This is the merchant's terminal ID.
            _Read Only_
        + batchNumber (string) - This is the batch number.
            _Read Only_
        + seqNumber (string) - This is the merchant's sequence number.
            _Read Only_
        + effectiveDate (string) - This is the date of the bank deposit associated with the transaction.
            _Read Only_
        + financingType (string) - This is the type of financing offered.
            _Read Only_
        + plan (string) - This is the plan number for this financing transaction.
            _Read Only_
        + gracePeriod (string) - This is the grace period, in months, associated with deferred payment transactions.
            _Read Only_
        + term (string) - This is the number of payments, in months, for equal payment transactions.
            _Read Only_
        + responseId (string) - This is the response ID assigned by Credorax.
            _Read Only_
        + requestId (string) - This is the request ID assigned by Paysafe.
            _Read Only_
        + description (string) - This is a description of the response.
            _Read Only_
        + authCode (string) - This is the authorization code.
            _Read Only_
        + txnDateTime (string) - This is the transaction date and time.
            _Read Only_
        + referenceNbr (string) - This is the bank net transaction Id/Merch Tran Ref
            _Read Only_
        + responseReasonCode (string) - This is the raw response reason code returned by Credorax.
            _Read Only_
        + cvv2Result (string) - This is the raw cvv2 result code.
            _Read Only_

## Level2Level3

+ `level2Level3` (object, optional) - This allows merchants who are enabled to provide additional [L2/L3 transaction data](#level2level3object). Not all processing gateways support this parameter. Contact your account manager for more information.
    + exemptLocalTax:true (boolean, optional) - This indicates whether or not local tax is exempted for the request. 
    + localTaxAmount:1500 (number, optional) - This is the local sales tax applied to the purchase.
        _length<=99999999999_
    + nationalTaxAmount:0 (number, optional) - This is the national tax included in the transaction amount.
        _length<=99999999999_
    + freightAmount:0 (number, optional) - This is the freight or shipping portion of the total transaction amount.
        _length<=99999999999_
    + dutyAmount:0 (number, optional) - This is the duty associated with the import of the purchased goods.
        _length<=99999999999_
    + destinationZip:90210 (string, optional) - This is the postal/zip code of the address to which the purchased goods will be delivered.
        _length<=10_
    + destinationCountry:US (string, optional) - This is the country to which the goods are being shipped.
        _length=2_
    + shipFromZip:90211 (string, optional) - This is the postal/zip code of the address from which the purchased goods are being shipped.
        _length<=10_
    + Include Line Items
            
## Line Items

+ `lineItems` (object, optional) - This is more [detailed information](#lineitemsobject) about the items that are being purchased.
    + description:Disney Cruise Line (string, optional) - This is a description of the item(s) being purchased.
        _length<=50_
    + productCode:DCL (string, optional) - This is a merchant-defined description code of the item being purchased.
        _length<=12_
    + quantity:4 (number, optional) - This is the quantity of the item.
        _length<=99999999999_, _max 4 decimals_
    + unitAmount:120000 (number, optional) - This is the unit price of the item being purchased, in minor units. The currency will be based on the account setting.
        _length<=99999999999_
    + taxRate:5 (number, optional) - This is the tax rate used to calculate the tax amount.
        _length<=100_, _max 2 decimals_
    + taxAmount:24000 (number, optional) - This is the amount of any value-added taxes that can be associated with the purchased item, in minor units.
        _length<=99999999999_
    + totalAmount:504000 (number, optional) - This is the total amount of the line item, typically calculated as price multiplied by quantity, in minor units.
        _length<=99999999999_

## Merchant Descriptor
+ merchantDescriptor (object)
    + dynamicDescriptor:`OnlineStore` (string) - This is a merchant descriptor that will be displayed on a customer’s statement.
        _length<=20_
    + phone:`999-8888` (string) - This is the merchant’s phone number, which will be appended to the merchant descriptor on a customer’s statement.
        _length<=13_

## metadataAttributes (object)
+ key : `length = 50` -This is a description of the data being added to the order.
+ value : `length = 100` - This is the value for the key/value pair.

## OriginalCreditResponse (object)
+ id: 25f6dadf-176a-415f-95c9-6ff39ff697ba - Read Only, length<=36    This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
+ merchantRefNum: P1234 (required) - length<=255 This is the merchant reference number created by the merchant and submitted as part of the request.
+ amount: 100 (required) - max=99999999999 This is the amount of the request, in minor units.
+ card (object) - These are the details of the card used for the request.Only one card object can be included in the request.
    + paymentToken (required) - Max = 80 This is the payment token representing the card.
+ card (object) - These are the details of the card used for the request.Only one card object can be included in the request.   
    + cardNum (): 4111111111111111 (required) - length=8-20 This is the card number used for the request.
        + cardExpiry (required) - This is the card's expiry date.
        + month:12 (number, required) - This is the card expiry month. length=2
        + year:2020 (number, required) - This is the card expiry year. length=4
    + cvv - This is the 3- or 4-digit security code that appears on the card following the card number.
    + track1 - This is Track 1 information read from the card's magnetic stripe.
    + track2 - This is Track 2 information read from the card's magnetic stripe.`
+ dupCheck: true (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
+ description: Purchase Credit - This is a description of the transaction, provided by the merchant. length<=255
+ customerIp: 204.91.0.12 -This is the customer's IP address.length<=39
+ accountId: 123456789 (optional) -This is the merchant account number.
+ profile - These are some details about the customer.
 - firstName: test -  This is the customer’s first name. length<=80
 - lastname: user -  This is the customer's last name. length<=80
 - email: john.smith@email.com -  This is the customer's email address. length<=255
+ billingAddress - These are the billing details for the request.
 - street: 100 queen - length<=50 This is the first line of the street address in the billing address.
 - street2: unit 201 - length<=50 This is the second line of the street address in the billing address, if required (e.g., apartment number).
 - city: Toronto - This is the city in the billing address. length<=40
 - zip: MSH 2N2 - This is the postal/zip code in the billing address. length<=10
 - country: CA - Size = 2
 - state: ON - Use the 2-character state or province codes for Canada or the United States. length<=40
 - phone - This is the customer's telephone number. length<=40

## Partial Auth
+ partialAuth (object)
    + `requested`:`true` (boolean) - This specifies whether or not a partial authorization was requested.
        + Default: false
    + `amountDue`:`1000` (number) - This is the amount of the full authorization that is not covered by the payment request.
    + `originalAmount`:`2000` (number) - This is the actual amount of the full authorization.

## PaymentHandleRequest (object)

+ id:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the payment handle. 
    _Read Only, length<=36_
+ paymentHandleTokenFrom:`7576835c-0396-11e9-8eb2-f2801f1b9fd1` (string) - This is an existing payment handle token, from which payment instrument and profile details can be retrieved.
    _length<=36_
+ merchantRefNum:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _length<=100_
+ One of
    + consumerOperation:`ADD` (enum) - This is the consumer operation on the payment instrument. You **must** include either *consumerOperation* or *transactionType*.
        + Members
            + ADD - Consumer wants to save the payment instrument to the profile.
            + EDIT - Consumer wants to edit the payment instrument that is attached to the profile.
            + DELETE - Consumer wants to delete the payment instrument from the profile. 
    + transactionType:`PAYMENT` (enum) - This specifies the transaction type for which the payment handle is created. You **must** include either *transactionType* or *consumerOperation*.
        + Members
            + PAYMENT - Payment Handle is created to continue the Payment.
            + STANDALONE_CREDIT - Payment Handle is created to continue the standalone credit.
            + ORIGINAL_CREDIT - Payment Handle is created to continue the original credit.
            + VERIFICATION - Payment Handle is created to continue the verification request.
+ singleUseProfileToken:`6c4ca5d2-039a-11e9-8eb2-f2801f1b9fd1` (string) - This is the single use profile token of the profile on which the consumer operation (ADD/EDIT/DELETE) is to be done. **Note:** This field is required if *consumerOperation* is provided.
    _length<=36_
+ status:`PAYABLE` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Paysafe has received the request and is waiting for the downstream processor’s response.
        + INITIATED - The transaction was initiated with the downstream provider.
        + PAYABLE - The merchant can use the payment handle for a payment request.
        + PROCESSING - The payment handle was authorized by customer, awaiting PSP response.
        + FAILED - The transaction failed due to either an error or being declined. 
        + CANCELLED - The authorization request has been fully reversed.
        + EXPIRED - The payment handle expired because the merchant did not proceed with the payment transaction. 
        + COMPLETED - The payment request was initiated successfully using the payment handle.
+ usage:`SINGLE_USE` (enum) - This specifies how the payment handle will be used for payments.
    + Members
        + SINGLE_USE - The payment handle can be used for one transaction only and expires if not used.
        + MULTI_USE - The payment handle can be used multiple times.
+ paymentType:`CARD` (enum, required) - This is the payment type associated with this payment handle.
    + Members
        + CARD
        + SKRILL
        + NETELLER
        + PAYSAFE_CASH
        + PAYSAFE_CARD
+ action:`NONE` (enum) - This specifies the next step of the user journey once they proceed to the payment.
    + Members
        + NONE
        + REDIRECT
        + AUTHENTICATE
+ executionMode:`SYNCHRONOUS` (enum) - This specifies the action of the merchant server in order to complete the payment.
    + Members
        + ASYNCHRONOUS - The payment request is not completed immediately and the merchant must rely on webhooks to retrieve the status of the payment request.
        + SYNCHRONOUS - The status of the payment request will be returned synchronously to the merchant, e.g., a credit card request.
+ amount:`1000` (string) - This is the amount of the request, in minor units. **Note:** This field is mandatory if *transactionType* is included.
    _Max =99999999999_
+ currencyCode:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD, returned in the request response.
    _Read Only, max=3_
+ paymentHandleToken:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string) - This is the payment token generated by Paysafe that will be used by merchants for payments requests.
    _Read Only, length<=36_
+ Include Card
+ Include Profile
+ Include Billing Details
+ Include Merchant Descriptor
+ returnLinks (object) - Specifies all links
    + rel(enum) -This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. 
        + self - This will get details of the current call.
        + payment_redirect - Merchant needs to redirect this consumer to this url to complete payment
    + href - The actual URL
    + method - The http method
+ customerIp:`111.111.111.111` (string) - This is the customer's IP address.
    _length<=39_
+ timeToLiveSeconds:`1212121212` (number) - This is the period of time, in seconds, the single-use token is valid before expiration. 
    _Read Only, length<=?????_

## PaymentHandleRequest Object
+ paymentHandleRequest (object)
    + id:`26359efd-7cfb-4014-a13d-1724e3ff17fa` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., to look up the payment handle. 
        _Read Only, length<=36_
    + paymentHandleTokenFrom:`7576835c-0396-11e9-8eb2-f2801f1b9fd1` (string) - This is an existing payment handle token, from which payment instrument and profile details can be retrieved.
        _length<=36_
    + merchantRefNum:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
        _length<=100_
    + One of
        + consumerOperation:`ADD` (enum) - This is the consumer operation on the payment instrument. You **must** include either *consumerOperation* or *transactionType*.
            + Members
                + ADD - Consumer wants to save the payment instrument to the profile.
                + EDIT - Consumer wants to edit the payment instrument that is attached to the profile.
                + DELETE - Consumer wants to delete the payment instrument from the profile. 
        + transactionType:`PAYMENT` (enum) - This specifies the transaction type for which the payment handle is created. You **must** include either *transactionType* or *consumerOperation*.
            + Members
                + PAYMENT - Payment Handle is created to continue the Payment.
                + STANDALONE_CREDIT - Payment Handle is created to continue the standalone credit.
                + ORIGINAL_CREDIT - Payment Handle is created to continue the original credit.
                + VERIFICATION - Payment Handle is created to continue the verification request.
    + singleUseProfileToken:`6c4ca5d2-039a-11e9-8eb2-f2801f1b9fd1` (string) - This is the single use profile token of the profile on which the consumer operation (ADD/EDIT/DELETE) is to be done. **Note:** This field is required if *consumerOperation* is provided.
        _length<=36_
    + status:`PAYABLE` (enum) - This is the status of the transaction request.
        _Read Only_
        + Members
            + RECEIVED - Paysafe has received the request and is waiting for the downstream processor’s response.
            + INITIATED - The transaction was initiated with the downstream provider.
            + PAYABLE - The merchant can use the payment handle for a payment request.
            + PROCESSING - The payment handle was authorized by customer, awaiting PSP response.
            + FAILED - The transaction failed due to either an error or being declined. 
            + CANCELLED - The authorization request has been fully reversed.
            + EXPIRED - The payment handle expired because the merchant did not proceed with the payment transaction. 
            + COMPLETED - The payment request was initiated successfully using the payment handle.
    + usage:`SINGLE_USE` (enum) - This specifies how the payment handle will be used for payments.
        + Members
            + SINGLE_USE - The payment handle can be used for one transaction only and expires if not used.
            + MULTI_USE - The payment handle can be used multiple times.
    + paymentType:`CARD` (enum, required) - This is the payment type associated with this payment handle.
        + Members
            + CARD
            + SKRILL
            + NETELLER
            + PAYSAFE_CASH
            + PAYSAFE_CARD
    + action:`NONE` (enum) - This specifies the next step of the user journey once they proceed to the payment.
        + Members
            + NONE
            + REDIRECT
            + AUTHENTICATE
    + executionMode:`SYNCHRONOUS` (enum) - This specifies the action of the merchant server in order to complete the payment.
        + Members
            + ASYNCHRONOUS - The payment request is not completed immediately and the merchant must rely on webhooks to retrieve the status of the payment request.
            + SYNCHRONOUS - The status of the payment request will be returned synchronously to the merchant, e.g., a credit card request.
    + amount:`1000` (string) - This is the amount of the request, in minor units. **Note:** This field is mandatory if *transactionType* is included.
        _Max =99999999999_
    + currencyCode:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD, returned in the request response.
        _Read Only, max=3_
    + paymentHandleToken:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string) - This is the payment token generated by Paysafe that will be used by merchants for payments requests.
        _Read Only, length<=36_
    + Include Card
    + Include Profile
    + Include Billing Details
    + Include Merchant Descriptor
    + returnLinks (object) - Specifies all links
        + rel(enum) -This is the link type, allowing different endpoints to be targeted depending on the end state of the transaction. The link relation describes how this link relates to the previous call. 
            + self - This will get details of the current call.
            + payment_redirect - Merchant needs to redirect this consumer to this url to complete payment
        + href - The actual URL
        + method - The http method
    + customerIp:`111.111.111.111` (string) - This is the customer's IP address.
        _length<=39_
    + timeToLiveSeconds:`1212121212` (number) - This is the period of time, in seconds, the single-use token is valid before expiration. 
        _Read Only, length<=?????_

## PaymentsRequest (object)

+ `id`:`3aeb9c63-6386-46a3-9f8e-f452e722228a` (string) - This is the ID returned in the response. This ID can be used for future associated requests, e.g., looking up the payment. 
    _Read Only, length<=36_
+ `merchantRefNum`:`merchantRefNum-101` (string, required) - This is the merchant reference number created by the merchant and submitted as part of the request. It must be unique for each request.
    _length<=255_
+ `amount`:`1000` (number, required) - This is the amount of the request, in minor units.
    _max=99999999999_
+ `dupCheck`:`false` (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the *merchantRefNum* has already been used in a previous request within the past 90 days.
    + Default: true
+ `settleWithAuth`:`true` (boolean) - This indicates whether the request is an Authorization only (no Settlement) or a Purchase (Authorization and Settlement).
    + Default: true
+ `preAuth`:`false`  (boolean) - This indicates whether the Authorization request should be sent as a Pre-Authorization. You should use the *preAuth* element in cases where you are not sure that you can fully settle the Authorization within 4 days. Contact your account manager for more information.
+ Include Partial Auth
+ `paymentHandleToken`:`842778a0-03a2-11e9-8eb2-f2801f1b9fd1` (string) - This is the payment token generated by Paysafe that will be used for the payment request.
    _length<=36_
+ Include PaymentHandleRequest Object
+ `availableToSettle`:`0` (number) -This is the amount of of the Authorization remaining to settle, in minor units.
    _Read Only_
+ `childAccountNum`:`3216549877` (string) - This is the child merchant account number. It is returned only if the transaction was processed via a master account.
    _length<=10_
+ `customerIp`:`111.111.111.111` (string) - This is the customer's IP address.
    _length<=39_
+ `description`:`Consumer Purchase` (string) - This is a description of the transaction, provided by the merchant.
    _length<=255_
+ `status`:`PAYABLE` (enum) - This is the status of the transaction request.
    _Read Only_
    + Members
        + RECEIVED - Paysafe has received the request and is waiting for the downstream processor’s response.
        + INITIATED - The transaction was initiated with the downstream provider.
        + PAYABLE - The merchant can use the payment handle for a payment request.
        + PROCESSING - The payment handle was authorized by customer, awaiting PSP response.
        + FAILED - The transaction failed due to either an error or being declined. 
        + CANCELLED - The authorization request has been fully reversed.
        + EXPIRED - The payment handle expired because the merchant did not proceed with the payment transaction. 
        + COMPLETED - The payment request was initiated successfully using the payment handle.
+ `currencyCode`:`CAD` (string) - This is the [currency of the merchant account](#currencycodes), e.g., USD or CAD, returned in the request response.
    _Read Only, max=3_
+ Include Level2Level3
+ Include Gateway Response
+ Include accordD
+ recipient(recipientAttributes) - This is recipient information.
+ riskReasonCode (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.
+ Include Splitpay
+ storedCredential(storedCredentialDetailsAttributes) - The storedCredential object is used to identify authorization requests that use stored credentials for a consumer, in order to improve authorization rates and reduce fraud. Stored credentials can be used in two cases:
Using a payment token – An authorization request that uses a paymentToken from the Customer Vault API.           
Using a card number – An authorization request that uses a credit card number stored by the merchant
+ Include Merchant Descriptor
+ settlements (array) - This is the list of all settlements. This will be returned only if settleWithAuth=true in the request.
+ acquirerData(acquirerDataAttributes) - This is additional information about the card acquirer required when you are performing an original credit request.
        This object is required only when you are using Credorax (CRX) as your acquirer for Original Credits. Contact your account manager for details.
+ error(errorAttributes) - Details of the error.
+ metadata(metadataAttributes) - This allows the merchant to specify additional data (e.g., affiliate codes, session IDs, etc.) to be stored against the transaction and returned to in status calls, reports, etc.
        Up to 10 metadata key/value pairs are enabled per order. They do not need to be defined in advance and can be different on each transaction.
+ statusReason - This is reason for the status. This is present in case of ERROR, FAILURE, HELD status.
+ authentication(authenticationAttributes) - This is the 3DS authentication details.

## Profile

+ `profile` (object) 
    + id:`de39b080-03aa-11e9-8eb2-f2801f1b9fd1` (string) -  This is the ID returned in the response. **Note:** If you do not include the profile ID, you must provide other customer details like firstName, lastName, and email. If the ID is included, then any additional profile elements provided will be overwritten to existing customer profile? 
        _length<=36_
    + status:`ACTIVE` (enum) - This is the status of the customer profile, returned in the response.
        + Members
            + ACTIVE
    + merchantCustomerId:`custid123` (string) - This is the reference number for the customer created by the merchant and submitted as part of the request. It must be unique for each customer.
        _length<=255_
    + firstName:`Jane` (string) - This is the customer’s first name.
        _length<=80_
    + lastname:`Smyth` (string) - This is the customer's last name.
        _length<=80_
    + locale:`ca_en` (enum) - This indicates the customer's locale.
        + Members
            + ???
    + Include Date of Birth
    + email:`jane.smyth@email.com` (string) - This is the customer's email address.
        _length<=255_
    + phone:`12345678` (string) - This is the customer's phone number.
        _length<=40_
    + mobile:`4446666` (string) - This is the customer's mobile phone number. 
        _length<=40_
    + gender:`M` (enum) - This is the customer’s gender.
        - F
        - M
    + nationality:`Indian` (string) - This is the customer’s nationality.
        _length<=30_

## recipientAttributes (object)
+ recipient.dateOfBirth (object) - This is the date of birth of the recipient.
    + dateOfBirth.day(number) - This is the day of the dateOfBirth.
    + dateOfBirth.month(number) - This is the month of the dateOfBirth.
    + dateOfBirth.year(number) - This is the year of the dateOfBirth.
+ recipient.zip - This is the ZIP Code of the recipient.
+ recipient.lastName - This is the last name of the recipient.
+ recipient.accountNumber - This is the account number of the recipient.

## RefundResponse (object)
+ id: 25f6dadf-176a-415f-95c9-6ff39ff697ba - Read Only, length<=36    This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
+ merchantRefNum: P1234 (required) - length<=255 This is the merchant reference number created by the merchant and submitted as part of the request.
+ amount: 100 (required) - max=99999999999 This is the amount of the request, in minor units.
+ dupCheck: true (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
+ childAccountNum : `length <= 10` -This is the child merchant account number. It is returned only if the transaction was processed via a master account.
+ txnTime : `date` - This is the date and time the transaction was processed.For example, 2018-11-27T09:12:11Z
+ status (statusAttributes) - This is the status of the transaction request.
+ error(errorAttributes) - Details of the error.
+ Include Splitpay
+ riskReasonCode (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.        
+ Include Gateway Response

## SettlementResponse (object)
+ id: 25f6dadf-176a-415f-95c9-6ff39ff697ba - Read Only, length<=36    This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
+ merchantRefNum: P1234 (required) - length<=255 This is the merchant reference number created by the merchant and submitted as part of the request.
+ amount: 100 (required) - max=99999999999 This is the amount of the request, in minor units.
+ dupCheck: true (boolean) - This validates that this request is not a duplicate. A request is considered a duplicate if the merchantRefNum has already been used in a previous request within the past 90 days.
+ availableToRefund (number) -This is the amount of of the Authorization remaining to refund, in minor units.
+ childAccountNum : `length <= 10` -This is the child merchant account number. It is returned only when the transaction is processed via a master account.
+ status (statusAttributes) - This is the status of the transaction request.
+ error(errorAttributes) - Details of the error.
+ Include Splitpay
+ riskReasonCode (array) - An array of integers is returned, displaying the detailed risk reason codes if your transaction was declined. It is returned only if your account is configured accordingly.        
+ Include Gateway Response

## Splitpay
+ splitpay (array, optional) - For Splitpay transactions only, an array containing the linked accounts and the amount shared with each. You must include either *amount* or *percent*. However, you cannot include both values.
    + (object)
        + Properties
            + linkedAccount:`123124124` (string, required) - This is the ID of the linked account. This account must already be linked to the merchant account.
            + One of
                + amount:`505` (number, optional) - This is the amount to transfer to the linked account in minor currency units.
                + percent:`5` (number, optional) - This is the percentage of the total transaction amount to transfer to that account.

## statusAttributes (enum)
+ RECEIVED - Our system has received the request and is waiting for the downstream processor’s response.
+ INITIATED - The transaction was initiated with the downstream provider.
+ PAYABLE - The merchant can proceed with payments post request.
+ PROCESSING - Payment Handle was authorized by customer, awaiting PSP response.
+ FAILED - The transaction failed, due to either an error or being declined. 
+ CANCELLED - The authorization request has been fully reversed.
+ EXPIRED - The payment handle got expired due to merchant not proceeding with transaction payments post.
+ COMPLETED - Payments call was initiated successfully using the payment Handle.

## storedCredentialDetailsAttributes (object)
+ type (enum) - This specifies the type of request being made. Possible values are: 
    + ADHOC – Ad hoc consumer-initiated request.
    + TOPUP – Unscheduled merchant iniitated request when a consumer balance is below a set limit.
    + RECURRING –  Scheduled merchant initiated recurring request.
+ occurrence (enum) - This specifies whether this stored credential request is initial or recurring. Possible values are: 
    + INITIAL – Used when this is the first time the consumer uses this credit card.
    + SUBSEQUENT – Used when the consumer uses this credit card for subsquent requests.

## voidAuthResponse (object)
+ id: 25f6dadf-176a-415f-95c9-6ff39ff697ba - Read Only, length<=36    This is the ID returned in the response. This ID can be used for future associated requests, e,g., Refunds.
+ merchantRefNum: P1234 (required) - length<=255 This is the merchant reference number created by the merchant and submitted as part of the request.
+ amount: 100 (required) - max=99999999999 This is the amount of the request, in minor units.